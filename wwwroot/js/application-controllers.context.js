var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
function BossFactory(pelement) {
    console.log(pelement.id, 'BossFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.bossHome = function () {
        let pars = toHttpParams({});
        console.log('bossHome', pars);
        return window['https']({ url: '/BossFace/Boss/BossHome', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createNavigation = function () {
        let pars = toHttpParams({});
        console.log('createNavigation', pars);
        return window['https']({ url: '/BossFace/Boss/CreateNavigation', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/BossFace/Boss/View', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/BossFace/Boss/PartialView', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/BossFace/Boss/ViewComponent', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/BossFace/Boss/Json', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/BossFace/Boss/OnActionExecuting', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/BossFace/Boss/OnActionExecuted', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/BossFace/Boss/OnActionExecutionAsync', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/BossFace/Boss/Dispose', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/BossFace/Boss/Conflict', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/BossFace/Boss/Problem', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/BossFace/Boss/ValidationProblem', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/BossFace/Boss/Created', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/BossFace/Boss/CreatedAtAction', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/BossFace/Boss/CreatedAtRoute', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/BossFace/Boss/Accepted', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/BossFace/Boss/AcceptedAtAction', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/BossFace/Boss/AcceptedAtRoute', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/BossFace/Boss/Challenge', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/BossFace/Boss/Forbid', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/BossFace/Boss/SignIn', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/BossFace/Boss/SignOut', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/BossFace/Boss/TryUpdateModelAsync', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/BossFace/Boss/TryValidateModel', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/BossFace/Boss/StatusCode', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/BossFace/Boss/Content', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/BossFace/Boss/NoContent', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/BossFace/Boss/Ok', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/BossFace/Boss/Redirect', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/BossFace/Boss/RedirectPermanent', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/BossFace/Boss/RedirectPreserveMethod', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/BossFace/Boss/RedirectPermanentPreserveMethod', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/BossFace/Boss/LocalRedirect', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/BossFace/Boss/LocalRedirectPermanent', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/BossFace/Boss/LocalRedirectPreserveMethod', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/BossFace/Boss/LocalRedirectPermanentPreserveMethod', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/BossFace/Boss/RedirectToAction', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/BossFace/Boss/RedirectToActionPreserveMethod', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/BossFace/Boss/RedirectToActionPermanent', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/BossFace/Boss/RedirectToActionPermanentPreserveMethod', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/BossFace/Boss/RedirectToRoute', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/BossFace/Boss/RedirectToRoutePreserveMethod', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/BossFace/Boss/RedirectToRoutePermanent', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/BossFace/Boss/RedirectToRoutePermanentPreserveMethod', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/BossFace/Boss/RedirectToPage', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/BossFace/Boss/RedirectToPagePermanent', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/BossFace/Boss/RedirectToPagePreserveMethod', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/BossFace/Boss/RedirectToPagePermanentPreserveMethod', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/BossFace/Boss/File', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/BossFace/Boss/PhysicalFile', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/BossFace/Boss/Unauthorized', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/BossFace/Boss/NotFound', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/BossFace/Boss/BadRequest', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/BossFace/Boss/UnprocessableEntity', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/BossFace/Boss/Equals', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/BossFace/Boss/GetHashCode', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/BossFace/Boss/GetType', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/BossFace/Boss/ToString', type: 'BossFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let BossController = class BossController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'BossFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new BossFactory($element[0]));
        window['$boss'] = $scope;
        window['$bossController'] = $scope;
        $scope['$bossController'] = window['$bossController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
BossController = __decorate([
    Controller({ name: 'BossController' })
], BossController);
function DBAFactory(pelement) {
    console.log(pelement.id, 'DBAFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.dBAHome = function () {
        let pars = toHttpParams({});
        console.log('dBAHome', pars);
        return window['https']({ url: '/DBAFace/DBA/DBAHome', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createNavigation = function () {
        let pars = toHttpParams({});
        console.log('createNavigation', pars);
        return window['https']({ url: '/DBAFace/DBA/CreateNavigation', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DBAFace/DBA/View', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DBAFace/DBA/PartialView', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DBAFace/DBA/ViewComponent', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DBAFace/DBA/Json', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DBAFace/DBA/OnActionExecuting', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DBAFace/DBA/OnActionExecuted', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DBAFace/DBA/OnActionExecutionAsync', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DBAFace/DBA/Dispose', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DBAFace/DBA/Conflict', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DBAFace/DBA/Problem', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DBAFace/DBA/ValidationProblem', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DBAFace/DBA/Created', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DBAFace/DBA/CreatedAtAction', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DBAFace/DBA/CreatedAtRoute', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DBAFace/DBA/Accepted', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DBAFace/DBA/AcceptedAtAction', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DBAFace/DBA/AcceptedAtRoute', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DBAFace/DBA/Challenge', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DBAFace/DBA/Forbid', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DBAFace/DBA/SignIn', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DBAFace/DBA/SignOut', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DBAFace/DBA/TryUpdateModelAsync', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DBAFace/DBA/TryValidateModel', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DBAFace/DBA/StatusCode', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DBAFace/DBA/Content', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DBAFace/DBA/NoContent', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DBAFace/DBA/Ok', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DBAFace/DBA/Redirect', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DBAFace/DBA/RedirectPermanent', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DBAFace/DBA/RedirectPreserveMethod', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DBAFace/DBA/RedirectPermanentPreserveMethod', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DBAFace/DBA/LocalRedirect', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DBAFace/DBA/LocalRedirectPermanent', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DBAFace/DBA/LocalRedirectPreserveMethod', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DBAFace/DBA/LocalRedirectPermanentPreserveMethod', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DBAFace/DBA/RedirectToAction', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DBAFace/DBA/RedirectToActionPreserveMethod', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DBAFace/DBA/RedirectToActionPermanent', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DBAFace/DBA/RedirectToActionPermanentPreserveMethod', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DBAFace/DBA/RedirectToRoute', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DBAFace/DBA/RedirectToRoutePreserveMethod', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DBAFace/DBA/RedirectToRoutePermanent', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DBAFace/DBA/RedirectToRoutePermanentPreserveMethod', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DBAFace/DBA/RedirectToPage', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DBAFace/DBA/RedirectToPagePermanent', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DBAFace/DBA/RedirectToPagePreserveMethod', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DBAFace/DBA/RedirectToPagePermanentPreserveMethod', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DBAFace/DBA/File', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DBAFace/DBA/PhysicalFile', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DBAFace/DBA/Unauthorized', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DBAFace/DBA/NotFound', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DBAFace/DBA/BadRequest', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DBAFace/DBA/UnprocessableEntity', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DBAFace/DBA/Equals', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DBAFace/DBA/GetHashCode', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DBAFace/DBA/GetType', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DBAFace/DBA/ToString', type: 'DBAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let DBAController = class DBAController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'DBAFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new DBAFactory($element[0]));
        window['$dBA'] = $scope;
        window['$dBAController'] = $scope;
        $scope['$dBAController'] = window['$dBAController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
DBAController = __decorate([
    Controller({ name: 'DBAController' })
], DBAController);
function BusinessDatasetsFactory(pelement) {
    console.log(pelement.id, 'BusinessDatasetsFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Index', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.details = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('details', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Details', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.create = function (businessDataset) {
        let pars = toHttpParams({
            businessDataset: businessDataset
        });
        console.log('create', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Create', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.edit = function (id, businessDataset) {
        let pars = toHttpParams({
            id: id,
            businessDataset: businessDataset
        });
        console.log('edit', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Edit', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.delete = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('delete', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Delete', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.deleteConfirmed = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('deleteConfirmed', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/DeleteConfirmed', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/ngOnInit', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/ngOnDestroy', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/ngOnChanges', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/View', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/GetSettings', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Setup', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/InfoDialog', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/ShowHelp', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RemoteDialog', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/ConfirmDialog', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/CreateEntityDialog', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/InputDialog', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Eval', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/HandleEvalResult', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Callback', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/AddEventListener', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/DispatchEvent', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/OnConnected', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/PartialView', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/ViewComponent', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Json', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/OnActionExecuting', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/OnActionExecuted', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/OnActionExecutionAsync', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Dispose', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Conflict', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Problem', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/ValidationProblem', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Created', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/CreatedAtAction', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/CreatedAtRoute', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Accepted', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/AcceptedAtAction', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/AcceptedAtRoute', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Challenge', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Forbid', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/SignIn', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/SignOut', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/TryUpdateModelAsync', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/TryValidateModel', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/StatusCode', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Content', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/NoContent', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Ok', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Redirect', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RedirectPermanent', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RedirectPreserveMethod', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RedirectPermanentPreserveMethod', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/LocalRedirect', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/LocalRedirectPermanent', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/LocalRedirectPreserveMethod', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/LocalRedirectPermanentPreserveMethod', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RedirectToAction', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RedirectToActionPreserveMethod', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RedirectToActionPermanent', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RedirectToActionPermanentPreserveMethod', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RedirectToRoute', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RedirectToRoutePreserveMethod', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RedirectToRoutePermanent', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RedirectToRoutePermanentPreserveMethod', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RedirectToPage', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RedirectToPagePermanent', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RedirectToPagePreserveMethod', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/RedirectToPagePermanentPreserveMethod', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/File', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/PhysicalFile', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Unauthorized', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/NotFound', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/BadRequest', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/UnprocessableEntity', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/Equals', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/GetHashCode', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/GetType', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DevFace/BusinessDatasets/ToString', type: 'BusinessDatasetsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let BusinessDatasetsController = class BusinessDatasetsController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'BusinessDatasetsFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new BusinessDatasetsFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$businessDatasets'] = $scope;
        window['$businessDatasetsController'] = $scope;
        $scope['$businessDatasetsController'] = window['$businessDatasetsController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
BusinessDatasetsController = __decorate([
    Controller({ name: 'BusinessDatasetsController' })
], BusinessDatasetsController);
function BusinessDatasourcesFactory(pelement) {
    console.log(pelement.id, 'BusinessDatasourcesFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.validateConnectionString = function (connectionString) {
        let pars = toHttpParams({
            connectionString: connectionString
        });
        console.log('validateConnectionString', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/ValidateConnectionString', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.report = function () {
        let pars = toHttpParams({});
        console.log('report', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Report', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getDataModel = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('getDataModel', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/GetDataModel', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Index', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.details = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('details', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Details', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.create = function (businessDatasource) {
        let pars = toHttpParams({
            businessDatasource: businessDatasource
        });
        console.log('create', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Create', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.edit = function (id, businessDatasource) {
        let pars = toHttpParams({
            id: id,
            businessDatasource: businessDatasource
        });
        console.log('edit', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Edit', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.delete = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('delete', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Delete', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.deleteConfirmed = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('deleteConfirmed', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/DeleteConfirmed', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/ngOnInit', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/ngOnDestroy', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/ngOnChanges', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/View', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/GetSettings', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Setup', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/InfoDialog', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/ShowHelp', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RemoteDialog', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/ConfirmDialog', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/CreateEntityDialog', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/InputDialog', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Eval', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/HandleEvalResult', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Callback', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/AddEventListener', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/DispatchEvent', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/OnConnected', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/PartialView', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/ViewComponent', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Json', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/OnActionExecuting', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/OnActionExecuted', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/OnActionExecutionAsync', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Dispose', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Conflict', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Problem', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/ValidationProblem', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Created', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/CreatedAtAction', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/CreatedAtRoute', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Accepted', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/AcceptedAtAction', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/AcceptedAtRoute', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Challenge', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Forbid', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/SignIn', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/SignOut', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/TryUpdateModelAsync', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/TryValidateModel', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/StatusCode', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Content', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/NoContent', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Ok', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Redirect', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RedirectPermanent', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RedirectPreserveMethod', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RedirectPermanentPreserveMethod', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/LocalRedirect', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/LocalRedirectPermanent', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/LocalRedirectPreserveMethod', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/LocalRedirectPermanentPreserveMethod', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RedirectToAction', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RedirectToActionPreserveMethod', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RedirectToActionPermanent', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RedirectToActionPermanentPreserveMethod', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RedirectToRoute', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RedirectToRoutePreserveMethod', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RedirectToRoutePermanent', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RedirectToRoutePermanentPreserveMethod', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RedirectToPage', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RedirectToPagePermanent', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RedirectToPagePreserveMethod', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/RedirectToPagePermanentPreserveMethod', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/File', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/PhysicalFile', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Unauthorized', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/NotFound', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/BadRequest', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/UnprocessableEntity', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/Equals', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/GetHashCode', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/GetType', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DevFace/BusinessDatasources/ToString', type: 'BusinessDatasourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let BusinessDatasourcesController = class BusinessDatasourcesController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'BusinessDatasourcesFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new BusinessDatasourcesFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$businessDatasources'] = $scope;
        window['$businessDatasourcesController'] = $scope;
        $scope['$businessDatasourcesController'] = window['$businessDatasourcesController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
BusinessDatasourcesController = __decorate([
    Controller({ name: 'BusinessDatasourcesController' })
], BusinessDatasourcesController);
function BusinessFunctionsFactory(pelement) {
    console.log(pelement.id, 'BusinessFunctionsFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Index', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.details = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('details', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Details', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.create = function (businessFunction) {
        let pars = toHttpParams({
            businessFunction: businessFunction
        });
        console.log('create', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Create', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.edit = function (id, businessFunction) {
        let pars = toHttpParams({
            id: id,
            businessFunction: businessFunction
        });
        console.log('edit', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Edit', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.delete = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('delete', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Delete', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.deleteConfirmed = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('deleteConfirmed', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/DeleteConfirmed', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/ngOnInit', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/ngOnDestroy', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/ngOnChanges', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/View', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/GetSettings', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Setup', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/InfoDialog', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/ShowHelp', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RemoteDialog', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/ConfirmDialog', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/CreateEntityDialog', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/InputDialog', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Eval', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/HandleEvalResult', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Callback', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/AddEventListener', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/DispatchEvent', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/OnConnected', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/PartialView', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/ViewComponent', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Json', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/OnActionExecuting', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/OnActionExecuted', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/OnActionExecutionAsync', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Dispose', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Conflict', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Problem', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/ValidationProblem', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Created', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/CreatedAtAction', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/CreatedAtRoute', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Accepted', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/AcceptedAtAction', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/AcceptedAtRoute', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Challenge', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Forbid', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/SignIn', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/SignOut', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/TryUpdateModelAsync', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/TryValidateModel', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/StatusCode', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Content', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/NoContent', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Ok', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Redirect', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RedirectPermanent', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RedirectPreserveMethod', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RedirectPermanentPreserveMethod', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/LocalRedirect', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/LocalRedirectPermanent', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/LocalRedirectPreserveMethod', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/LocalRedirectPermanentPreserveMethod', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RedirectToAction', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RedirectToActionPreserveMethod', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RedirectToActionPermanent', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RedirectToActionPermanentPreserveMethod', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RedirectToRoute', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RedirectToRoutePreserveMethod', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RedirectToRoutePermanent', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RedirectToRoutePermanentPreserveMethod', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RedirectToPage', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RedirectToPagePermanent', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RedirectToPagePreserveMethod', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/RedirectToPagePermanentPreserveMethod', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/File', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/PhysicalFile', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Unauthorized', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/NotFound', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/BadRequest', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/UnprocessableEntity', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/Equals', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/GetHashCode', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/GetType', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DevFace/BusinessFunctions/ToString', type: 'BusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let BusinessFunctionsController = class BusinessFunctionsController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'BusinessFunctionsFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new BusinessFunctionsFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$businessFunctions'] = $scope;
        window['$businessFunctionsController'] = $scope;
        $scope['$businessFunctionsController'] = window['$businessFunctionsController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
BusinessFunctionsController = __decorate([
    Controller({ name: 'BusinessFunctionsController' })
], BusinessFunctionsController);
function BusinessIndicatorsFactory(pelement) {
    console.log(pelement.id, 'BusinessIndicatorsFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Index', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.details = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('details', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Details', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.create = function (businessIndicator) {
        let pars = toHttpParams({
            businessIndicator: businessIndicator
        });
        console.log('create', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Create', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.edit = function (id, businessIndicator) {
        let pars = toHttpParams({
            id: id,
            businessIndicator: businessIndicator
        });
        console.log('edit', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Edit', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.delete = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('delete', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Delete', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.deleteConfirmed = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('deleteConfirmed', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/DeleteConfirmed', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/ngOnInit', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/ngOnDestroy', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/ngOnChanges', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/View', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/GetSettings', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Setup', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/InfoDialog', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/ShowHelp', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RemoteDialog', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/ConfirmDialog', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/CreateEntityDialog', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/InputDialog', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Eval', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/HandleEvalResult', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Callback', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/AddEventListener', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/DispatchEvent', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/OnConnected', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/PartialView', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/ViewComponent', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Json', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/OnActionExecuting', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/OnActionExecuted', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/OnActionExecutionAsync', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Dispose', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Conflict', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Problem', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/ValidationProblem', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Created', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/CreatedAtAction', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/CreatedAtRoute', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Accepted', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/AcceptedAtAction', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/AcceptedAtRoute', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Challenge', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Forbid', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/SignIn', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/SignOut', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/TryUpdateModelAsync', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/TryValidateModel', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/StatusCode', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Content', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/NoContent', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Ok', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Redirect', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RedirectPermanent', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RedirectPreserveMethod', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RedirectPermanentPreserveMethod', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/LocalRedirect', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/LocalRedirectPermanent', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/LocalRedirectPreserveMethod', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/LocalRedirectPermanentPreserveMethod', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RedirectToAction', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RedirectToActionPreserveMethod', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RedirectToActionPermanent', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RedirectToActionPermanentPreserveMethod', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RedirectToRoute', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RedirectToRoutePreserveMethod', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RedirectToRoutePermanent', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RedirectToRoutePermanentPreserveMethod', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RedirectToPage', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RedirectToPagePermanent', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RedirectToPagePreserveMethod', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/RedirectToPagePermanentPreserveMethod', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/File', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/PhysicalFile', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Unauthorized', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/NotFound', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/BadRequest', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/UnprocessableEntity', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/Equals', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/GetHashCode', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/GetType', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DevFace/BusinessIndicators/ToString', type: 'BusinessIndicatorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let BusinessIndicatorsController = class BusinessIndicatorsController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'BusinessIndicatorsFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new BusinessIndicatorsFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$businessIndicators'] = $scope;
        window['$businessIndicatorsController'] = $scope;
        $scope['$businessIndicatorsController'] = window['$businessIndicatorsController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
BusinessIndicatorsController = __decorate([
    Controller({ name: 'BusinessIndicatorsController' })
], BusinessIndicatorsController);
function BusinessProcessesFactory(pelement) {
    console.log(pelement.id, 'BusinessProcessesFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Index', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.initModel = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('initModel', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/InitModel', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.newModel = function () {
        let pars = toHttpParams({});
        console.log('newModel', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/NewModel', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getKey = function () {
        let pars = toHttpParams({});
        console.log('getKey', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/GetKey', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setModel = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('setModel', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/SetModel', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getModel = function (controllerType) {
        let pars = toHttpParams({
            controllerType: controllerType
        });
        console.log('getModel', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/GetModel', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getAnotherModel = function (key) {
        let pars = toHttpParams({
            key: key
        });
        console.log('getAnotherModel', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/GetAnotherModel', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/ngOnInit', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/ngOnDestroy', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/ngOnChanges', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/View', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/GetSettings', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Setup', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/InfoDialog', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/ShowHelp', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RemoteDialog', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/ConfirmDialog', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/CreateEntityDialog', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/InputDialog', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Eval', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/HandleEvalResult', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Callback', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/AddEventListener', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/DispatchEvent', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/OnConnected', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/PartialView', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/ViewComponent', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Json', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/OnActionExecuting', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/OnActionExecuted', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/OnActionExecutionAsync', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Dispose', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Conflict', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Problem', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/ValidationProblem', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Created', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/CreatedAtAction', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/CreatedAtRoute', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Accepted', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/AcceptedAtAction', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/AcceptedAtRoute', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Challenge', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Forbid', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/SignIn', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/SignOut', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/TryUpdateModelAsync', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/TryValidateModel', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/StatusCode', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Content', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/NoContent', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Ok', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Redirect', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RedirectPermanent', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RedirectPreserveMethod', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RedirectPermanentPreserveMethod', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/LocalRedirect', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/LocalRedirectPermanent', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/LocalRedirectPreserveMethod', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/LocalRedirectPermanentPreserveMethod', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RedirectToAction', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RedirectToActionPreserveMethod', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RedirectToActionPermanent', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RedirectToActionPermanentPreserveMethod', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RedirectToRoute', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RedirectToRoutePreserveMethod', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RedirectToRoutePermanent', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RedirectToRoutePermanentPreserveMethod', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RedirectToPage', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RedirectToPagePermanent', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RedirectToPagePreserveMethod', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/RedirectToPagePermanentPreserveMethod', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/File', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/PhysicalFile', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Unauthorized', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/NotFound', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/BadRequest', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/UnprocessableEntity', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/Equals', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/GetHashCode', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/GetType', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DevFace/BusinessProcesses/ToString', type: 'BusinessProcessesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let BusinessProcessesController = class BusinessProcessesController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'BusinessProcessesFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new BusinessProcessesFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$businessProcesses'] = $scope;
        window['$businessProcessesController'] = $scope;
        $scope['$businessProcessesController'] = window['$businessProcessesController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
BusinessProcessesController = __decorate([
    Controller({ name: 'BusinessProcessesController' })
], BusinessProcessesController);
function BusinessReportsFactory(pelement) {
    console.log(pelement.id, 'BusinessReportsFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Index', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.compile = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('compile', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Compile', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.details = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('details', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Details', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.create = function (businessReport) {
        let pars = toHttpParams({
            businessReport: businessReport
        });
        console.log('create', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Create', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.edit = function (id, businessReport) {
        let pars = toHttpParams({
            id: id,
            businessReport: businessReport
        });
        console.log('edit', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Edit', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.delete = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('delete', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Delete', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.deleteConfirmed = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('deleteConfirmed', pars);
        return window['https']({ url: '/DevFace/BusinessReports/DeleteConfirmed', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/DevFace/BusinessReports/ngOnInit', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/DevFace/BusinessReports/ngOnDestroy', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/DevFace/BusinessReports/ngOnChanges', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DevFace/BusinessReports/View', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/DevFace/BusinessReports/GetSettings', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Setup', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/DevFace/BusinessReports/InfoDialog', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/DevFace/BusinessReports/ShowHelp', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RemoteDialog', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/DevFace/BusinessReports/ConfirmDialog', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/DevFace/BusinessReports/CreateEntityDialog', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/DevFace/BusinessReports/InputDialog', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Eval', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/DevFace/BusinessReports/HandleEvalResult', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Callback', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/DevFace/BusinessReports/AddEventListener', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/DevFace/BusinessReports/DispatchEvent', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/DevFace/BusinessReports/OnConnected', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DevFace/BusinessReports/PartialView', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DevFace/BusinessReports/ViewComponent', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Json', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DevFace/BusinessReports/OnActionExecuting', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DevFace/BusinessReports/OnActionExecuted', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DevFace/BusinessReports/OnActionExecutionAsync', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Dispose', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Conflict', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Problem', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DevFace/BusinessReports/ValidationProblem', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Created', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DevFace/BusinessReports/CreatedAtAction', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DevFace/BusinessReports/CreatedAtRoute', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Accepted', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DevFace/BusinessReports/AcceptedAtAction', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DevFace/BusinessReports/AcceptedAtRoute', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Challenge', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Forbid', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DevFace/BusinessReports/SignIn', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DevFace/BusinessReports/SignOut', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DevFace/BusinessReports/TryUpdateModelAsync', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DevFace/BusinessReports/TryValidateModel', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DevFace/BusinessReports/StatusCode', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Content', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DevFace/BusinessReports/NoContent', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Ok', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Redirect', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RedirectPermanent', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RedirectPreserveMethod', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RedirectPermanentPreserveMethod', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DevFace/BusinessReports/LocalRedirect', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessReports/LocalRedirectPermanent', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessReports/LocalRedirectPreserveMethod', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessReports/LocalRedirectPermanentPreserveMethod', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RedirectToAction', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RedirectToActionPreserveMethod', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RedirectToActionPermanent', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RedirectToActionPermanentPreserveMethod', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RedirectToRoute', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RedirectToRoutePreserveMethod', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RedirectToRoutePermanent', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RedirectToRoutePermanentPreserveMethod', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RedirectToPage', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RedirectToPagePermanent', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RedirectToPagePreserveMethod', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessReports/RedirectToPagePermanentPreserveMethod', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DevFace/BusinessReports/File', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DevFace/BusinessReports/PhysicalFile', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Unauthorized', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DevFace/BusinessReports/NotFound', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DevFace/BusinessReports/BadRequest', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DevFace/BusinessReports/UnprocessableEntity', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DevFace/BusinessReports/Equals', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DevFace/BusinessReports/GetHashCode', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DevFace/BusinessReports/GetType', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DevFace/BusinessReports/ToString', type: 'BusinessReportsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let BusinessReportsController = class BusinessReportsController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'BusinessReportsFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new BusinessReportsFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$businessReports'] = $scope;
        window['$businessReportsController'] = $scope;
        $scope['$businessReportsController'] = window['$businessReportsController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
BusinessReportsController = __decorate([
    Controller({ name: 'BusinessReportsController' })
], BusinessReportsController);
function BusinessResourcesFactory(pelement) {
    console.log(pelement.id, 'BusinessResourcesFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.createTable = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('createTable', pars);
        return window['https']({ url: '/DevFace/BusinessResources/CreateTable', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Index', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.details = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('details', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Details', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.create = function (businessResource) {
        let pars = toHttpParams({
            businessResource: businessResource
        });
        console.log('create', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Create', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.edit = function (id, businessResource) {
        let pars = toHttpParams({
            id: id,
            businessResource: businessResource
        });
        console.log('edit', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Edit', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.delete = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('delete', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Delete', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.deleteConfirmed = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('deleteConfirmed', pars);
        return window['https']({ url: '/DevFace/BusinessResources/DeleteConfirmed', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/DevFace/BusinessResources/ngOnInit', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/DevFace/BusinessResources/ngOnDestroy', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/DevFace/BusinessResources/ngOnChanges', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DevFace/BusinessResources/View', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/DevFace/BusinessResources/GetSettings', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Setup', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/DevFace/BusinessResources/InfoDialog', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/DevFace/BusinessResources/ShowHelp', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RemoteDialog', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/DevFace/BusinessResources/ConfirmDialog', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/DevFace/BusinessResources/CreateEntityDialog', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/DevFace/BusinessResources/InputDialog', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Eval', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/DevFace/BusinessResources/HandleEvalResult', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Callback', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/DevFace/BusinessResources/AddEventListener', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/DevFace/BusinessResources/DispatchEvent', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/DevFace/BusinessResources/OnConnected', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DevFace/BusinessResources/PartialView', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DevFace/BusinessResources/ViewComponent', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Json', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DevFace/BusinessResources/OnActionExecuting', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DevFace/BusinessResources/OnActionExecuted', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DevFace/BusinessResources/OnActionExecutionAsync', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Dispose', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Conflict', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Problem', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DevFace/BusinessResources/ValidationProblem', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Created', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DevFace/BusinessResources/CreatedAtAction', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DevFace/BusinessResources/CreatedAtRoute', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Accepted', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DevFace/BusinessResources/AcceptedAtAction', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DevFace/BusinessResources/AcceptedAtRoute', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Challenge', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Forbid', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DevFace/BusinessResources/SignIn', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DevFace/BusinessResources/SignOut', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DevFace/BusinessResources/TryUpdateModelAsync', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DevFace/BusinessResources/TryValidateModel', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DevFace/BusinessResources/StatusCode', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Content', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DevFace/BusinessResources/NoContent', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Ok', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Redirect', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RedirectPermanent', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RedirectPreserveMethod', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RedirectPermanentPreserveMethod', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DevFace/BusinessResources/LocalRedirect', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessResources/LocalRedirectPermanent', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessResources/LocalRedirectPreserveMethod', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessResources/LocalRedirectPermanentPreserveMethod', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RedirectToAction', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RedirectToActionPreserveMethod', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RedirectToActionPermanent', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RedirectToActionPermanentPreserveMethod', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RedirectToRoute', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RedirectToRoutePreserveMethod', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RedirectToRoutePermanent', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RedirectToRoutePermanentPreserveMethod', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RedirectToPage', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RedirectToPagePermanent', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RedirectToPagePreserveMethod', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/BusinessResources/RedirectToPagePermanentPreserveMethod', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DevFace/BusinessResources/File', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DevFace/BusinessResources/PhysicalFile', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Unauthorized', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DevFace/BusinessResources/NotFound', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DevFace/BusinessResources/BadRequest', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DevFace/BusinessResources/UnprocessableEntity', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DevFace/BusinessResources/Equals', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DevFace/BusinessResources/GetHashCode', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DevFace/BusinessResources/GetType', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DevFace/BusinessResources/ToString', type: 'BusinessResourcesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let BusinessResourcesController = class BusinessResourcesController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'BusinessResourcesFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new BusinessResourcesFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$businessResources'] = $scope;
        window['$businessResourcesController'] = $scope;
        $scope['$businessResourcesController'] = window['$businessResourcesController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
BusinessResourcesController = __decorate([
    Controller({ name: 'BusinessResourcesController' })
], BusinessResourcesController);
function MessageAttributesFactory(pelement) {
    console.log(pelement.id, 'MessageAttributesFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Index', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.details = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('details', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Details', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.create = function (messageAttribute) {
        let pars = toHttpParams({
            messageAttribute: messageAttribute
        });
        console.log('create', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Create', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.edit = function (id, messageAttribute) {
        let pars = toHttpParams({
            id: id,
            messageAttribute: messageAttribute
        });
        console.log('edit', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Edit', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.delete = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('delete', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Delete', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.deleteConfirmed = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('deleteConfirmed', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/DeleteConfirmed', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/ngOnInit', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/ngOnDestroy', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/ngOnChanges', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/View', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/GetSettings', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Setup', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/InfoDialog', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/ShowHelp', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RemoteDialog', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/ConfirmDialog', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/CreateEntityDialog', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/InputDialog', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Eval', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/HandleEvalResult', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Callback', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/AddEventListener', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/DispatchEvent', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/OnConnected', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/PartialView', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/ViewComponent', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Json', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/OnActionExecuting', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/OnActionExecuted', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/OnActionExecutionAsync', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Dispose', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Conflict', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Problem', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/ValidationProblem', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Created', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/CreatedAtAction', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/CreatedAtRoute', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Accepted', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/AcceptedAtAction', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/AcceptedAtRoute', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Challenge', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Forbid', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/SignIn', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/SignOut', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/TryUpdateModelAsync', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/TryValidateModel', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/StatusCode', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Content', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/NoContent', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Ok', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Redirect', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RedirectPermanent', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RedirectPreserveMethod', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RedirectPermanentPreserveMethod', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/LocalRedirect', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/LocalRedirectPermanent', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/LocalRedirectPreserveMethod', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/LocalRedirectPermanentPreserveMethod', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RedirectToAction', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RedirectToActionPreserveMethod', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RedirectToActionPermanent', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RedirectToActionPermanentPreserveMethod', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RedirectToRoute', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RedirectToRoutePreserveMethod', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RedirectToRoutePermanent', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RedirectToRoutePermanentPreserveMethod', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RedirectToPage', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RedirectToPagePermanent', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RedirectToPagePreserveMethod', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/RedirectToPagePermanentPreserveMethod', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/File', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/PhysicalFile', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Unauthorized', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/NotFound', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/BadRequest', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/UnprocessableEntity', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/Equals', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/GetHashCode', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/GetType', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DevFace/MessageAttributes/ToString', type: 'MessageAttributesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let MessageAttributesController = class MessageAttributesController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'MessageAttributesFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new MessageAttributesFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$messageAttributes'] = $scope;
        window['$messageAttributesController'] = $scope;
        $scope['$messageAttributesController'] = window['$messageAttributesController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
MessageAttributesController = __decorate([
    Controller({ name: 'MessageAttributesController' })
], MessageAttributesController);
function MessageProtocolsFactory(pelement) {
    console.log(pelement.id, 'MessageProtocolsFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.createTable = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('createTable', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/CreateTable', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.editProperty = function (id, messageProperty) {
        let pars = toHttpParams({
            id: id,
            messageProperty: messageProperty
        });
        console.log('editProperty', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/EditProperty', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewEditProperty = function (messageProtocolId, messagePropertyId) {
        let pars = toHttpParams({
            messageProtocolId: messageProtocolId,
            messagePropertyId: messagePropertyId
        });
        console.log('viewEditProperty', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/ViewEditProperty', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addProperty = function (messageProtocolId, messageAttributeId) {
        let pars = toHttpParams({
            messageProtocolId: messageProtocolId,
            messageAttributeId: messageAttributeId
        });
        console.log('addProperty', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/AddProperty', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.removeProperty = function (messageProtocolId, messagePropertyId) {
        let pars = toHttpParams({
            messageProtocolId: messageProtocolId,
            messagePropertyId: messagePropertyId
        });
        console.log('removeProperty', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RemoveProperty', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewAddProperty = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('viewAddProperty', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/ViewAddProperty', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Index', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.details = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('details', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Details', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.create = function (messageProtocol) {
        let pars = toHttpParams({
            messageProtocol: messageProtocol
        });
        console.log('create', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Create', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.edit = function (id, messageProtocol) {
        let pars = toHttpParams({
            id: id,
            messageProtocol: messageProtocol
        });
        console.log('edit', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Edit', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.delete = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('delete', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Delete', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.deleteConfirmed = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('deleteConfirmed', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/DeleteConfirmed', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/ngOnInit', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/ngOnDestroy', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/ngOnChanges', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/View', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/GetSettings', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Setup', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/InfoDialog', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/ShowHelp', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RemoteDialog', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/ConfirmDialog', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/CreateEntityDialog', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/InputDialog', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Eval', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/HandleEvalResult', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Callback', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/AddEventListener', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/DispatchEvent', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/OnConnected', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/PartialView', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/ViewComponent', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Json', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/OnActionExecuting', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/OnActionExecuted', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/OnActionExecutionAsync', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Dispose', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Conflict', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Problem', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/ValidationProblem', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Created', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/CreatedAtAction', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/CreatedAtRoute', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Accepted', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/AcceptedAtAction', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/AcceptedAtRoute', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Challenge', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Forbid', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/SignIn', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/SignOut', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/TryUpdateModelAsync', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/TryValidateModel', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/StatusCode', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Content', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/NoContent', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Ok', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Redirect', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RedirectPermanent', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RedirectPreserveMethod', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RedirectPermanentPreserveMethod', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/LocalRedirect', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/LocalRedirectPermanent', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/LocalRedirectPreserveMethod', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/LocalRedirectPermanentPreserveMethod', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RedirectToAction', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RedirectToActionPreserveMethod', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RedirectToActionPermanent', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RedirectToActionPermanentPreserveMethod', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RedirectToRoute', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RedirectToRoutePreserveMethod', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RedirectToRoutePermanent', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RedirectToRoutePermanentPreserveMethod', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RedirectToPage', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RedirectToPagePermanent', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RedirectToPagePreserveMethod', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/RedirectToPagePermanentPreserveMethod', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/File', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/PhysicalFile', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Unauthorized', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/NotFound', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/BadRequest', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/UnprocessableEntity', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/Equals', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/GetHashCode', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/GetType', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DevFace/MessageProtocols/ToString', type: 'MessageProtocolsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let MessageProtocolsController = class MessageProtocolsController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'MessageProtocolsFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new MessageProtocolsFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$messageProtocols'] = $scope;
        window['$messageProtocolsController'] = $scope;
        $scope['$messageProtocolsController'] = window['$messageProtocolsController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
MessageProtocolsController = __decorate([
    Controller({ name: 'MessageProtocolsController' })
], MessageProtocolsController);
function SimulationFactory(pelement) {
    console.log(pelement.id, 'SimulationFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/DevFace/Simulation/Index', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.simulationSetup = function () {
        let pars = toHttpParams({});
        console.log('simulationSetup', pars);
        return window['https']({ url: '/DevFace/Simulation/SimulationSetup', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.initModel = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('initModel', pars);
        return window['https']({ url: '/DevFace/Simulation/InitModel', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.newModel = function () {
        let pars = toHttpParams({});
        console.log('newModel', pars);
        return window['https']({ url: '/DevFace/Simulation/NewModel', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getKey = function () {
        let pars = toHttpParams({});
        console.log('getKey', pars);
        return window['https']({ url: '/DevFace/Simulation/GetKey', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setModel = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('setModel', pars);
        return window['https']({ url: '/DevFace/Simulation/SetModel', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getModel = function (controllerType) {
        let pars = toHttpParams({
            controllerType: controllerType
        });
        console.log('getModel', pars);
        return window['https']({ url: '/DevFace/Simulation/GetModel', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getAnotherModel = function (key) {
        let pars = toHttpParams({
            key: key
        });
        console.log('getAnotherModel', pars);
        return window['https']({ url: '/DevFace/Simulation/GetAnotherModel', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/DevFace/Simulation/ngOnInit', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/DevFace/Simulation/ngOnDestroy', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/DevFace/Simulation/ngOnChanges', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DevFace/Simulation/View', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/DevFace/Simulation/GetSettings', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/DevFace/Simulation/Setup', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/DevFace/Simulation/InfoDialog', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/DevFace/Simulation/ShowHelp', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/DevFace/Simulation/RemoteDialog', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/DevFace/Simulation/ConfirmDialog', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/DevFace/Simulation/CreateEntityDialog', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/DevFace/Simulation/InputDialog', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/DevFace/Simulation/Eval', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/DevFace/Simulation/HandleEvalResult', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/DevFace/Simulation/Callback', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/DevFace/Simulation/AddEventListener', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/DevFace/Simulation/DispatchEvent', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/DevFace/Simulation/OnConnected', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DevFace/Simulation/PartialView', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DevFace/Simulation/ViewComponent', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DevFace/Simulation/Json', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DevFace/Simulation/OnActionExecuting', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DevFace/Simulation/OnActionExecuted', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DevFace/Simulation/OnActionExecutionAsync', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DevFace/Simulation/Dispose', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DevFace/Simulation/Conflict', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DevFace/Simulation/Problem', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DevFace/Simulation/ValidationProblem', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DevFace/Simulation/Created', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DevFace/Simulation/CreatedAtAction', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DevFace/Simulation/CreatedAtRoute', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DevFace/Simulation/Accepted', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DevFace/Simulation/AcceptedAtAction', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DevFace/Simulation/AcceptedAtRoute', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DevFace/Simulation/Challenge', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DevFace/Simulation/Forbid', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DevFace/Simulation/SignIn', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DevFace/Simulation/SignOut', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DevFace/Simulation/TryUpdateModelAsync', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DevFace/Simulation/TryValidateModel', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DevFace/Simulation/StatusCode', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DevFace/Simulation/Content', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DevFace/Simulation/NoContent', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DevFace/Simulation/Ok', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DevFace/Simulation/Redirect', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DevFace/Simulation/RedirectPermanent', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Simulation/RedirectPreserveMethod', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Simulation/RedirectPermanentPreserveMethod', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DevFace/Simulation/LocalRedirect', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DevFace/Simulation/LocalRedirectPermanent', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Simulation/LocalRedirectPreserveMethod', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Simulation/LocalRedirectPermanentPreserveMethod', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DevFace/Simulation/RedirectToAction', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Simulation/RedirectToActionPreserveMethod', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DevFace/Simulation/RedirectToActionPermanent', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Simulation/RedirectToActionPermanentPreserveMethod', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DevFace/Simulation/RedirectToRoute', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DevFace/Simulation/RedirectToRoutePreserveMethod', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DevFace/Simulation/RedirectToRoutePermanent', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Simulation/RedirectToRoutePermanentPreserveMethod', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DevFace/Simulation/RedirectToPage', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DevFace/Simulation/RedirectToPagePermanent', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DevFace/Simulation/RedirectToPagePreserveMethod', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Simulation/RedirectToPagePermanentPreserveMethod', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DevFace/Simulation/File', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DevFace/Simulation/PhysicalFile', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DevFace/Simulation/Unauthorized', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DevFace/Simulation/NotFound', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DevFace/Simulation/BadRequest', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DevFace/Simulation/UnprocessableEntity', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DevFace/Simulation/Equals', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DevFace/Simulation/GetHashCode', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DevFace/Simulation/GetType', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DevFace/Simulation/ToString', type: 'SimulationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let SimulationController = class SimulationController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'SimulationFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new SimulationFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$simulation'] = $scope;
        window['$simulationController'] = $scope;
        $scope['$simulationController'] = window['$simulationController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
SimulationController = __decorate([
    Controller({ name: 'SimulationController' })
], SimulationController);
function SAFactory(pelement) {
    console.log(pelement.id, 'SAFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.sAHome = function () {
        let pars = toHttpParams({});
        console.log('sAHome', pars);
        return window['https']({ url: '/SAFace/SA/SAHome', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createNavigation = function () {
        let pars = toHttpParams({});
        console.log('createNavigation', pars);
        return window['https']({ url: '/SAFace/SA/CreateNavigation', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/SAFace/SA/View', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/SAFace/SA/PartialView', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/SAFace/SA/ViewComponent', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/SAFace/SA/Json', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/SAFace/SA/OnActionExecuting', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/SAFace/SA/OnActionExecuted', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/SAFace/SA/OnActionExecutionAsync', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/SAFace/SA/Dispose', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/SAFace/SA/Conflict', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/SAFace/SA/Problem', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/SAFace/SA/ValidationProblem', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/SAFace/SA/Created', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/SAFace/SA/CreatedAtAction', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/SAFace/SA/CreatedAtRoute', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/SAFace/SA/Accepted', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/SAFace/SA/AcceptedAtAction', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/SAFace/SA/AcceptedAtRoute', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/SAFace/SA/Challenge', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/SAFace/SA/Forbid', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/SAFace/SA/SignIn', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/SAFace/SA/SignOut', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/SAFace/SA/TryUpdateModelAsync', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/SAFace/SA/TryValidateModel', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/SAFace/SA/StatusCode', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/SAFace/SA/Content', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/SAFace/SA/NoContent', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/SAFace/SA/Ok', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/SAFace/SA/Redirect', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/SAFace/SA/RedirectPermanent', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/SAFace/SA/RedirectPreserveMethod', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/SAFace/SA/RedirectPermanentPreserveMethod', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/SAFace/SA/LocalRedirect', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/SAFace/SA/LocalRedirectPermanent', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/SAFace/SA/LocalRedirectPreserveMethod', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/SAFace/SA/LocalRedirectPermanentPreserveMethod', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/SAFace/SA/RedirectToAction', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/SAFace/SA/RedirectToActionPreserveMethod', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/SAFace/SA/RedirectToActionPermanent', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/SAFace/SA/RedirectToActionPermanentPreserveMethod', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/SAFace/SA/RedirectToRoute', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/SAFace/SA/RedirectToRoutePreserveMethod', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/SAFace/SA/RedirectToRoutePermanent', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/SAFace/SA/RedirectToRoutePermanentPreserveMethod', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/SAFace/SA/RedirectToPage', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/SAFace/SA/RedirectToPagePermanent', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/SAFace/SA/RedirectToPagePreserveMethod', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/SAFace/SA/RedirectToPagePermanentPreserveMethod', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/SAFace/SA/File', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/SAFace/SA/PhysicalFile', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/SAFace/SA/Unauthorized', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/SAFace/SA/NotFound', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/SAFace/SA/BadRequest', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/SAFace/SA/UnprocessableEntity', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/SAFace/SA/Equals', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/SAFace/SA/GetHashCode', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/SAFace/SA/GetType', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/SAFace/SA/ToString', type: 'SAFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let SAController = class SAController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'SAFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new SAFactory($element[0]));
        window['$sA'] = $scope;
        window['$sAController'] = $scope;
        $scope['$sAController'] = window['$sAController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
SAController = __decorate([
    Controller({ name: 'SAController' })
], SAController);
function LogMessagesFactory(pelement) {
    console.log(pelement.id, 'LogMessagesFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/SIFace/LogMessages/Index', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/SIFace/LogMessages/View', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/SIFace/LogMessages/PartialView', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/SIFace/LogMessages/ViewComponent', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/SIFace/LogMessages/Json', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/SIFace/LogMessages/OnActionExecuting', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/SIFace/LogMessages/OnActionExecuted', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/SIFace/LogMessages/OnActionExecutionAsync', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/SIFace/LogMessages/Dispose', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/SIFace/LogMessages/Conflict', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/SIFace/LogMessages/Problem', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/SIFace/LogMessages/ValidationProblem', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/SIFace/LogMessages/Created', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/SIFace/LogMessages/CreatedAtAction', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/SIFace/LogMessages/CreatedAtRoute', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/SIFace/LogMessages/Accepted', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/SIFace/LogMessages/AcceptedAtAction', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/SIFace/LogMessages/AcceptedAtRoute', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/SIFace/LogMessages/Challenge', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/SIFace/LogMessages/Forbid', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/SIFace/LogMessages/SignIn', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/SIFace/LogMessages/SignOut', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/SIFace/LogMessages/TryUpdateModelAsync', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/SIFace/LogMessages/TryValidateModel', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/SIFace/LogMessages/StatusCode', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/SIFace/LogMessages/Content', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/SIFace/LogMessages/NoContent', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/SIFace/LogMessages/Ok', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/SIFace/LogMessages/Redirect', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/SIFace/LogMessages/RedirectPermanent', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/SIFace/LogMessages/RedirectPreserveMethod', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/SIFace/LogMessages/RedirectPermanentPreserveMethod', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/SIFace/LogMessages/LocalRedirect', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/SIFace/LogMessages/LocalRedirectPermanent', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/SIFace/LogMessages/LocalRedirectPreserveMethod', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/SIFace/LogMessages/LocalRedirectPermanentPreserveMethod', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/SIFace/LogMessages/RedirectToAction', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/SIFace/LogMessages/RedirectToActionPreserveMethod', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/SIFace/LogMessages/RedirectToActionPermanent', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/SIFace/LogMessages/RedirectToActionPermanentPreserveMethod', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/SIFace/LogMessages/RedirectToRoute', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/SIFace/LogMessages/RedirectToRoutePreserveMethod', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/SIFace/LogMessages/RedirectToRoutePermanent', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/SIFace/LogMessages/RedirectToRoutePermanentPreserveMethod', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/SIFace/LogMessages/RedirectToPage', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/SIFace/LogMessages/RedirectToPagePermanent', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/SIFace/LogMessages/RedirectToPagePreserveMethod', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/SIFace/LogMessages/RedirectToPagePermanentPreserveMethod', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/SIFace/LogMessages/File', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/SIFace/LogMessages/PhysicalFile', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/SIFace/LogMessages/Unauthorized', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/SIFace/LogMessages/NotFound', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/SIFace/LogMessages/BadRequest', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/SIFace/LogMessages/UnprocessableEntity', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/SIFace/LogMessages/Equals', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/SIFace/LogMessages/GetHashCode', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/SIFace/LogMessages/GetType', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/SIFace/LogMessages/ToString', type: 'LogMessagesFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let LogMessagesController = class LogMessagesController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'LogMessagesFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new LogMessagesFactory($element[0]));
        window['$logMessages'] = $scope;
        window['$logMessagesController'] = $scope;
        $scope['$logMessagesController'] = window['$logMessagesController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
LogMessagesController = __decorate([
    Controller({ name: 'LogMessagesController' })
], LogMessagesController);
function SIFactory(pelement) {
    console.log(pelement.id, 'SIFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.sIHome = function () {
        let pars = toHttpParams({});
        console.log('sIHome', pars);
        return window['https']({ url: '/SIFace/SI/SIHome', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createNavigation = function () {
        let pars = toHttpParams({});
        console.log('createNavigation', pars);
        return window['https']({ url: '/SIFace/SI/CreateNavigation', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/SIFace/SI/View', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/SIFace/SI/PartialView', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/SIFace/SI/ViewComponent', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/SIFace/SI/Json', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/SIFace/SI/OnActionExecuting', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/SIFace/SI/OnActionExecuted', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/SIFace/SI/OnActionExecutionAsync', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/SIFace/SI/Dispose', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/SIFace/SI/Conflict', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/SIFace/SI/Problem', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/SIFace/SI/ValidationProblem', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/SIFace/SI/Created', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/SIFace/SI/CreatedAtAction', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/SIFace/SI/CreatedAtRoute', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/SIFace/SI/Accepted', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/SIFace/SI/AcceptedAtAction', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/SIFace/SI/AcceptedAtRoute', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/SIFace/SI/Challenge', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/SIFace/SI/Forbid', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/SIFace/SI/SignIn', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/SIFace/SI/SignOut', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/SIFace/SI/TryUpdateModelAsync', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/SIFace/SI/TryValidateModel', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/SIFace/SI/StatusCode', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/SIFace/SI/Content', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/SIFace/SI/NoContent', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/SIFace/SI/Ok', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/SIFace/SI/Redirect', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/SIFace/SI/RedirectPermanent', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/SIFace/SI/RedirectPreserveMethod', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/SIFace/SI/RedirectPermanentPreserveMethod', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/SIFace/SI/LocalRedirect', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/SIFace/SI/LocalRedirectPermanent', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/SIFace/SI/LocalRedirectPreserveMethod', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/SIFace/SI/LocalRedirectPermanentPreserveMethod', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/SIFace/SI/RedirectToAction', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/SIFace/SI/RedirectToActionPreserveMethod', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/SIFace/SI/RedirectToActionPermanent', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/SIFace/SI/RedirectToActionPermanentPreserveMethod', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/SIFace/SI/RedirectToRoute', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/SIFace/SI/RedirectToRoutePreserveMethod', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/SIFace/SI/RedirectToRoutePermanent', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/SIFace/SI/RedirectToRoutePermanentPreserveMethod', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/SIFace/SI/RedirectToPage', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/SIFace/SI/RedirectToPagePermanent', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/SIFace/SI/RedirectToPagePreserveMethod', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/SIFace/SI/RedirectToPagePermanentPreserveMethod', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/SIFace/SI/File', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/SIFace/SI/PhysicalFile', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/SIFace/SI/Unauthorized', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/SIFace/SI/NotFound', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/SIFace/SI/BadRequest', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/SIFace/SI/UnprocessableEntity', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/SIFace/SI/Equals', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/SIFace/SI/GetHashCode', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/SIFace/SI/GetType', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/SIFace/SI/ToString', type: 'SIFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let SIController = class SIController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'SIFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new SIFactory($element[0]));
        window['$sI'] = $scope;
        window['$sIController'] = $scope;
        $scope['$sIController'] = window['$sIController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
SIController = __decorate([
    Controller({ name: 'SIController' })
], SIController);
function TaskManagerFactory(pelement) {
    console.log(pelement.id, 'TaskManagerFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/SIFace/TaskManager/Index', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/SIFace/TaskManager/View', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/SIFace/TaskManager/PartialView', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/SIFace/TaskManager/ViewComponent', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/SIFace/TaskManager/Json', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/SIFace/TaskManager/OnActionExecuting', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/SIFace/TaskManager/OnActionExecuted', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/SIFace/TaskManager/OnActionExecutionAsync', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/SIFace/TaskManager/Dispose', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/SIFace/TaskManager/Conflict', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/SIFace/TaskManager/Problem', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/SIFace/TaskManager/ValidationProblem', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/SIFace/TaskManager/Created', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/SIFace/TaskManager/CreatedAtAction', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/SIFace/TaskManager/CreatedAtRoute', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/SIFace/TaskManager/Accepted', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/SIFace/TaskManager/AcceptedAtAction', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/SIFace/TaskManager/AcceptedAtRoute', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/SIFace/TaskManager/Challenge', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/SIFace/TaskManager/Forbid', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/SIFace/TaskManager/SignIn', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/SIFace/TaskManager/SignOut', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/SIFace/TaskManager/TryUpdateModelAsync', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/SIFace/TaskManager/TryValidateModel', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/SIFace/TaskManager/StatusCode', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/SIFace/TaskManager/Content', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/SIFace/TaskManager/NoContent', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/SIFace/TaskManager/Ok', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/SIFace/TaskManager/Redirect', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/SIFace/TaskManager/RedirectPermanent', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/SIFace/TaskManager/RedirectPreserveMethod', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/SIFace/TaskManager/RedirectPermanentPreserveMethod', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/SIFace/TaskManager/LocalRedirect', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/SIFace/TaskManager/LocalRedirectPermanent', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/SIFace/TaskManager/LocalRedirectPreserveMethod', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/SIFace/TaskManager/LocalRedirectPermanentPreserveMethod', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/SIFace/TaskManager/RedirectToAction', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/SIFace/TaskManager/RedirectToActionPreserveMethod', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/SIFace/TaskManager/RedirectToActionPermanent', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/SIFace/TaskManager/RedirectToActionPermanentPreserveMethod', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/SIFace/TaskManager/RedirectToRoute', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/SIFace/TaskManager/RedirectToRoutePreserveMethod', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/SIFace/TaskManager/RedirectToRoutePermanent', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/SIFace/TaskManager/RedirectToRoutePermanentPreserveMethod', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/SIFace/TaskManager/RedirectToPage', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/SIFace/TaskManager/RedirectToPagePermanent', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/SIFace/TaskManager/RedirectToPagePreserveMethod', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/SIFace/TaskManager/RedirectToPagePermanentPreserveMethod', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/SIFace/TaskManager/File', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/SIFace/TaskManager/PhysicalFile', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/SIFace/TaskManager/Unauthorized', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/SIFace/TaskManager/NotFound', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/SIFace/TaskManager/BadRequest', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/SIFace/TaskManager/UnprocessableEntity', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/SIFace/TaskManager/Equals', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/SIFace/TaskManager/GetHashCode', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/SIFace/TaskManager/GetType', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/SIFace/TaskManager/ToString', type: 'TaskManagerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let TaskManagerController = class TaskManagerController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'TaskManagerFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new TaskManagerFactory($element[0]));
        window['$taskManager'] = $scope;
        window['$taskManagerController'] = $scope;
        $scope['$taskManagerController'] = window['$taskManagerController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
TaskManagerController = __decorate([
    Controller({ name: 'TaskManagerController' })
], TaskManagerController);
function DiagramFactory(pelement) {
    console.log(pelement.id, 'DiagramFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.onkeypress = function (message) {
        let pars = toHttpParams({
            message: message
        });
        console.log('onkeypress', pars);
        return window['https']({ url: '/DevFace/Diagram/onkeypress', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onkeypressed = function (message) {
        let pars = toHttpParams({
            message: message
        });
        console.log('onkeypressed', pars);
        return window['https']({ url: '/DevFace/Diagram/onkeypressed', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.context = function () {
        let pars = toHttpParams({});
        console.log('context', pars);
        return window['https']({ url: '/DevFace/Diagram/Context', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.initModel = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('initModel', pars);
        return window['https']({ url: '/DevFace/Diagram/InitModel', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.newModel = function () {
        let pars = toHttpParams({});
        console.log('newModel', pars);
        return window['https']({ url: '/DevFace/Diagram/NewModel', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getKey = function () {
        let pars = toHttpParams({});
        console.log('getKey', pars);
        return window['https']({ url: '/DevFace/Diagram/GetKey', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setModel = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('setModel', pars);
        return window['https']({ url: '/DevFace/Diagram/SetModel', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getModel = function (controllerType) {
        let pars = toHttpParams({
            controllerType: controllerType
        });
        console.log('getModel', pars);
        return window['https']({ url: '/DevFace/Diagram/GetModel', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getAnotherModel = function (key) {
        let pars = toHttpParams({
            key: key
        });
        console.log('getAnotherModel', pars);
        return window['https']({ url: '/DevFace/Diagram/GetAnotherModel', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/DevFace/Diagram/ngOnInit', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/DevFace/Diagram/ngOnDestroy', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/DevFace/Diagram/ngOnChanges', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DevFace/Diagram/View', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/DevFace/Diagram/GetSettings', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/DevFace/Diagram/Setup', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/DevFace/Diagram/InfoDialog', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/DevFace/Diagram/ShowHelp', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/DevFace/Diagram/RemoteDialog', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/DevFace/Diagram/ConfirmDialog', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/DevFace/Diagram/CreateEntityDialog', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/DevFace/Diagram/InputDialog', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/DevFace/Diagram/Eval', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/DevFace/Diagram/HandleEvalResult', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/DevFace/Diagram/Callback', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/DevFace/Diagram/AddEventListener', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/DevFace/Diagram/DispatchEvent', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/DevFace/Diagram/OnConnected', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DevFace/Diagram/PartialView', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DevFace/Diagram/ViewComponent', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DevFace/Diagram/Json', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DevFace/Diagram/OnActionExecuting', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DevFace/Diagram/OnActionExecuted', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DevFace/Diagram/OnActionExecutionAsync', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DevFace/Diagram/Dispose', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DevFace/Diagram/Conflict', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DevFace/Diagram/Problem', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DevFace/Diagram/ValidationProblem', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DevFace/Diagram/Created', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DevFace/Diagram/CreatedAtAction', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DevFace/Diagram/CreatedAtRoute', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DevFace/Diagram/Accepted', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DevFace/Diagram/AcceptedAtAction', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DevFace/Diagram/AcceptedAtRoute', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DevFace/Diagram/Challenge', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DevFace/Diagram/Forbid', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DevFace/Diagram/SignIn', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DevFace/Diagram/SignOut', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DevFace/Diagram/TryUpdateModelAsync', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DevFace/Diagram/TryValidateModel', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DevFace/Diagram/StatusCode', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DevFace/Diagram/Content', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DevFace/Diagram/NoContent', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DevFace/Diagram/Ok', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DevFace/Diagram/Redirect', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DevFace/Diagram/RedirectPermanent', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Diagram/RedirectPreserveMethod', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Diagram/RedirectPermanentPreserveMethod', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DevFace/Diagram/LocalRedirect', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DevFace/Diagram/LocalRedirectPermanent', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Diagram/LocalRedirectPreserveMethod', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Diagram/LocalRedirectPermanentPreserveMethod', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DevFace/Diagram/RedirectToAction', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Diagram/RedirectToActionPreserveMethod', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DevFace/Diagram/RedirectToActionPermanent', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Diagram/RedirectToActionPermanentPreserveMethod', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DevFace/Diagram/RedirectToRoute', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DevFace/Diagram/RedirectToRoutePreserveMethod', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DevFace/Diagram/RedirectToRoutePermanent', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Diagram/RedirectToRoutePermanentPreserveMethod', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DevFace/Diagram/RedirectToPage', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DevFace/Diagram/RedirectToPagePermanent', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DevFace/Diagram/RedirectToPagePreserveMethod', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Diagram/RedirectToPagePermanentPreserveMethod', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DevFace/Diagram/File', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DevFace/Diagram/PhysicalFile', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DevFace/Diagram/Unauthorized', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DevFace/Diagram/NotFound', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DevFace/Diagram/BadRequest', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DevFace/Diagram/UnprocessableEntity', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DevFace/Diagram/Equals', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DevFace/Diagram/GetHashCode', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DevFace/Diagram/GetType', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DevFace/Diagram/ToString', type: 'DiagramFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let DiagramController = class DiagramController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'DiagramFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new DiagramFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$diagram'] = $scope;
        window['$diagramController'] = $scope;
        $scope['$diagramController'] = window['$diagramController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
DiagramController = __decorate([
    Controller({ name: 'DiagramController' })
], DiagramController);
function UserBusinessFunctionsFactory(pelement) {
    console.log(pelement.id, 'UserBusinessFunctionsFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.businessFunctions = function () {
        let pars = toHttpParams({});
        console.log('businessFunctions', pars);
        return window['https']({ url: '/UserBusinessFunctions/BusinessFunctions', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/UserBusinessFunctions/View', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/UserBusinessFunctions/PartialView', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/UserBusinessFunctions/ViewComponent', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/UserBusinessFunctions/Json', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/UserBusinessFunctions/OnActionExecuting', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/UserBusinessFunctions/OnActionExecuted', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/UserBusinessFunctions/OnActionExecutionAsync', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/UserBusinessFunctions/Dispose', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/UserBusinessFunctions/Conflict', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/UserBusinessFunctions/Problem', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/UserBusinessFunctions/ValidationProblem', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/UserBusinessFunctions/Created', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/UserBusinessFunctions/CreatedAtAction', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/UserBusinessFunctions/CreatedAtRoute', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/UserBusinessFunctions/Accepted', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/UserBusinessFunctions/AcceptedAtAction', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/UserBusinessFunctions/AcceptedAtRoute', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/UserBusinessFunctions/Challenge', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/UserBusinessFunctions/Forbid', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/UserBusinessFunctions/SignIn', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/UserBusinessFunctions/SignOut', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/UserBusinessFunctions/TryUpdateModelAsync', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/UserBusinessFunctions/TryValidateModel', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/UserBusinessFunctions/StatusCode', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/UserBusinessFunctions/Content', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/UserBusinessFunctions/NoContent', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/UserBusinessFunctions/Ok', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/UserBusinessFunctions/Redirect', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/UserBusinessFunctions/RedirectPermanent', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/UserBusinessFunctions/RedirectPreserveMethod', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/UserBusinessFunctions/RedirectPermanentPreserveMethod', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/UserBusinessFunctions/LocalRedirect', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/UserBusinessFunctions/LocalRedirectPermanent', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/UserBusinessFunctions/LocalRedirectPreserveMethod', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/UserBusinessFunctions/LocalRedirectPermanentPreserveMethod', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/UserBusinessFunctions/RedirectToAction', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/UserBusinessFunctions/RedirectToActionPreserveMethod', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/UserBusinessFunctions/RedirectToActionPermanent', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/UserBusinessFunctions/RedirectToActionPermanentPreserveMethod', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/UserBusinessFunctions/RedirectToRoute', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/UserBusinessFunctions/RedirectToRoutePreserveMethod', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/UserBusinessFunctions/RedirectToRoutePermanent', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/UserBusinessFunctions/RedirectToRoutePermanentPreserveMethod', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/UserBusinessFunctions/RedirectToPage', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/UserBusinessFunctions/RedirectToPagePermanent', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/UserBusinessFunctions/RedirectToPagePreserveMethod', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/UserBusinessFunctions/RedirectToPagePermanentPreserveMethod', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/UserBusinessFunctions/File', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/UserBusinessFunctions/PhysicalFile', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/UserBusinessFunctions/Unauthorized', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/UserBusinessFunctions/NotFound', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/UserBusinessFunctions/BadRequest', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/UserBusinessFunctions/UnprocessableEntity', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/UserBusinessFunctions/Equals', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/UserBusinessFunctions/GetHashCode', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/UserBusinessFunctions/GetType', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/UserBusinessFunctions/ToString', type: 'UserBusinessFunctionsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let UserBusinessFunctionsController = class UserBusinessFunctionsController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'UserBusinessFunctionsFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new UserBusinessFunctionsFactory($element[0]));
        window['$userBusinessFunctions'] = $scope;
        window['$userBusinessFunctionsController'] = $scope;
        $scope['$userBusinessFunctionsController'] = window['$userBusinessFunctionsController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
UserBusinessFunctionsController = __decorate([
    Controller({ name: 'UserBusinessFunctionsController' })
], UserBusinessFunctionsController);
function UserNavigationFactory(pelement) {
    console.log(pelement.id, 'UserNavigationFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.createNavigation = function () {
        let pars = toHttpParams({});
        console.log('createNavigation', pars);
        return window['https']({ url: '/UserFace/UserNavigation/CreateNavigation', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/UserFace/UserNavigation/View', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/UserFace/UserNavigation/PartialView', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/UserFace/UserNavigation/ViewComponent', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/UserFace/UserNavigation/Json', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/UserFace/UserNavigation/OnActionExecuting', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/UserFace/UserNavigation/OnActionExecuted', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/UserFace/UserNavigation/OnActionExecutionAsync', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/UserFace/UserNavigation/Dispose', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/UserFace/UserNavigation/Conflict', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/UserFace/UserNavigation/Problem', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/UserFace/UserNavigation/ValidationProblem', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/UserFace/UserNavigation/Created', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/UserFace/UserNavigation/CreatedAtAction', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/UserFace/UserNavigation/CreatedAtRoute', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/UserFace/UserNavigation/Accepted', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/UserFace/UserNavigation/AcceptedAtAction', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/UserFace/UserNavigation/AcceptedAtRoute', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/UserFace/UserNavigation/Challenge', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/UserFace/UserNavigation/Forbid', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/UserFace/UserNavigation/SignIn', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/UserFace/UserNavigation/SignOut', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/UserFace/UserNavigation/TryUpdateModelAsync', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/UserFace/UserNavigation/TryValidateModel', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/UserFace/UserNavigation/StatusCode', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/UserFace/UserNavigation/Content', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/UserFace/UserNavigation/NoContent', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/UserFace/UserNavigation/Ok', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/UserFace/UserNavigation/Redirect', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/UserFace/UserNavigation/RedirectPermanent', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/UserFace/UserNavigation/RedirectPreserveMethod', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/UserFace/UserNavigation/RedirectPermanentPreserveMethod', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/UserFace/UserNavigation/LocalRedirect', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/UserFace/UserNavigation/LocalRedirectPermanent', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/UserFace/UserNavigation/LocalRedirectPreserveMethod', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/UserFace/UserNavigation/LocalRedirectPermanentPreserveMethod', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/UserFace/UserNavigation/RedirectToAction', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/UserFace/UserNavigation/RedirectToActionPreserveMethod', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/UserFace/UserNavigation/RedirectToActionPermanent', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/UserFace/UserNavigation/RedirectToActionPermanentPreserveMethod', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/UserFace/UserNavigation/RedirectToRoute', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/UserFace/UserNavigation/RedirectToRoutePreserveMethod', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/UserFace/UserNavigation/RedirectToRoutePermanent', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/UserFace/UserNavigation/RedirectToRoutePermanentPreserveMethod', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/UserFace/UserNavigation/RedirectToPage', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/UserFace/UserNavigation/RedirectToPagePermanent', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/UserFace/UserNavigation/RedirectToPagePreserveMethod', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/UserFace/UserNavigation/RedirectToPagePermanentPreserveMethod', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/UserFace/UserNavigation/File', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/UserFace/UserNavigation/PhysicalFile', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/UserFace/UserNavigation/Unauthorized', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/UserFace/UserNavigation/NotFound', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/UserFace/UserNavigation/BadRequest', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/UserFace/UserNavigation/UnprocessableEntity', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/UserFace/UserNavigation/Equals', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/UserFace/UserNavigation/GetHashCode', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/UserFace/UserNavigation/GetType', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/UserFace/UserNavigation/ToString', type: 'UserNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let UserNavigationController = class UserNavigationController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'UserNavigationFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new UserNavigationFactory($element[0]));
        window['$userNavigation'] = $scope;
        window['$userNavigationController'] = $scope;
        $scope['$userNavigationController'] = window['$userNavigationController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
UserNavigationController = __decorate([
    Controller({ name: 'UserNavigationController' })
], UserNavigationController);
function PageFactory(pelement) {
    console.log(pelement.id, 'PageFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/Page/ngOnInit', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/Page/ngOnDestroy', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/Page/ngOnChanges', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Page/View', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/Page/GetSettings', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/Page/Setup', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/Page/InfoDialog', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/Page/ShowHelp', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/Page/RemoteDialog', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/Page/ConfirmDialog', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/Page/CreateEntityDialog', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/Page/InputDialog', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/Page/Eval', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/Page/HandleEvalResult', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/Page/Callback', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/Page/AddEventListener', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/Page/DispatchEvent', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/Page/OnConnected', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Page/PartialView', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Page/ViewComponent', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Page/Json', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Page/OnActionExecuting', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Page/OnActionExecuted', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Page/OnActionExecutionAsync', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Page/Dispose', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Page/Conflict', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Page/Problem', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Page/ValidationProblem', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Page/Created', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Page/CreatedAtAction', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Page/CreatedAtRoute', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Page/Accepted', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Page/AcceptedAtAction', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Page/AcceptedAtRoute', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Page/Challenge', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Page/Forbid', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Page/SignIn', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Page/SignOut', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Page/TryUpdateModelAsync', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Page/TryValidateModel', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Page/StatusCode', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Page/Content', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Page/NoContent', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Page/Ok', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Page/Redirect', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Page/RedirectPermanent', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Page/RedirectPreserveMethod', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Page/RedirectPermanentPreserveMethod', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Page/LocalRedirect', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Page/LocalRedirectPermanent', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Page/LocalRedirectPreserveMethod', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Page/LocalRedirectPermanentPreserveMethod', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Page/RedirectToAction', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Page/RedirectToActionPreserveMethod', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Page/RedirectToActionPermanent', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Page/RedirectToActionPermanentPreserveMethod', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Page/RedirectToRoute', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Page/RedirectToRoutePreserveMethod', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Page/RedirectToRoutePermanent', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Page/RedirectToRoutePermanentPreserveMethod', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Page/RedirectToPage', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Page/RedirectToPagePermanent', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Page/RedirectToPagePreserveMethod', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Page/RedirectToPagePermanentPreserveMethod', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Page/File', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Page/PhysicalFile', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Page/Unauthorized', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Page/NotFound', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Page/BadRequest', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Page/UnprocessableEntity', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Page/Equals', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Page/GetHashCode', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Page/GetType', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Page/ToString', type: 'PageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let PageController = class PageController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'PageFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new PageFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$page'] = $scope;
        window['$pageController'] = $scope;
        $scope['$pageController'] = window['$pageController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
PageController = __decorate([
    Controller({ name: 'PageController' })
], PageController);
function TeleFactory(pelement) {
    console.log(pelement.id, 'TeleFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/Tele/ngOnInit', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/Tele/ngOnDestroy', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/Tele/ngOnChanges', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Tele/View', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/Tele/GetSettings', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/Tele/Setup', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/Tele/InfoDialog', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/Tele/ShowHelp', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/Tele/RemoteDialog', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/Tele/ConfirmDialog', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/Tele/CreateEntityDialog', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/Tele/InputDialog', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/Tele/Eval', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/Tele/HandleEvalResult', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/Tele/Callback', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/Tele/AddEventListener', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/Tele/DispatchEvent', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/Tele/OnConnected', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Tele/PartialView', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Tele/ViewComponent', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Tele/Json', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Tele/OnActionExecuting', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Tele/OnActionExecuted', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Tele/OnActionExecutionAsync', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Tele/Dispose', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Tele/Conflict', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Tele/Problem', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Tele/ValidationProblem', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Tele/Created', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Tele/CreatedAtAction', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Tele/CreatedAtRoute', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Tele/Accepted', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Tele/AcceptedAtAction', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Tele/AcceptedAtRoute', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Tele/Challenge', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Tele/Forbid', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Tele/SignIn', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Tele/SignOut', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Tele/TryUpdateModelAsync', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Tele/TryValidateModel', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Tele/StatusCode', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Tele/Content', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Tele/NoContent', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Tele/Ok', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Tele/Redirect', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Tele/RedirectPermanent', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Tele/RedirectPreserveMethod', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Tele/RedirectPermanentPreserveMethod', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Tele/LocalRedirect', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Tele/LocalRedirectPermanent', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Tele/LocalRedirectPreserveMethod', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Tele/LocalRedirectPermanentPreserveMethod', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Tele/RedirectToAction', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Tele/RedirectToActionPreserveMethod', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Tele/RedirectToActionPermanent', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Tele/RedirectToActionPermanentPreserveMethod', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Tele/RedirectToRoute', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Tele/RedirectToRoutePreserveMethod', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Tele/RedirectToRoutePermanent', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Tele/RedirectToRoutePermanentPreserveMethod', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Tele/RedirectToPage', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Tele/RedirectToPagePermanent', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Tele/RedirectToPagePreserveMethod', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Tele/RedirectToPagePermanentPreserveMethod', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Tele/File', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Tele/PhysicalFile', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Tele/Unauthorized', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Tele/NotFound', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Tele/BadRequest', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Tele/UnprocessableEntity', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Tele/Equals', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Tele/GetHashCode', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Tele/GetType', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Tele/ToString', type: 'TeleFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let TeleController = class TeleController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'TeleFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new TeleFactory($element[0]));
        window['$tele'] = $scope;
        window['$teleController'] = $scope;
        $scope['$teleController'] = window['$teleController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
TeleController = __decorate([
    Controller({ name: 'TeleController' })
], TeleController);
function ViewComponentFactory(pelement) {
    console.log(pelement.id, 'ViewComponentFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/ViewComponent/ngOnInit', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/ViewComponent/ngOnDestroy', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/ViewComponent/ngOnChanges', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/ViewComponent/View', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/ViewComponent/GetSettings', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/ViewComponent/Setup', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/ViewComponent/InfoDialog', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/ViewComponent/ShowHelp', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/ViewComponent/RemoteDialog', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/ViewComponent/ConfirmDialog', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/ViewComponent/CreateEntityDialog', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/ViewComponent/InputDialog', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/ViewComponent/Eval', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/ViewComponent/HandleEvalResult', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/ViewComponent/Callback', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/ViewComponent/AddEventListener', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/ViewComponent/DispatchEvent', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/ViewComponent/OnConnected', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/ViewComponent/PartialView', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/ViewComponent/ViewComponent', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/ViewComponent/Json', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/ViewComponent/OnActionExecuting', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/ViewComponent/OnActionExecuted', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/ViewComponent/OnActionExecutionAsync', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/ViewComponent/Dispose', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/ViewComponent/Conflict', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/ViewComponent/Problem', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/ViewComponent/ValidationProblem', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/ViewComponent/Created', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/ViewComponent/CreatedAtAction', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/ViewComponent/CreatedAtRoute', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/ViewComponent/Accepted', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/ViewComponent/AcceptedAtAction', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/ViewComponent/AcceptedAtRoute', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/ViewComponent/Challenge', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/ViewComponent/Forbid', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/ViewComponent/SignIn', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/ViewComponent/SignOut', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/ViewComponent/TryUpdateModelAsync', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/ViewComponent/TryValidateModel', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/ViewComponent/StatusCode', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/ViewComponent/Content', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/ViewComponent/NoContent', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/ViewComponent/Ok', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/ViewComponent/Redirect', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/ViewComponent/RedirectPermanent', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/ViewComponent/RedirectPreserveMethod', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/ViewComponent/RedirectPermanentPreserveMethod', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/ViewComponent/LocalRedirect', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/ViewComponent/LocalRedirectPermanent', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/ViewComponent/LocalRedirectPreserveMethod', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/ViewComponent/LocalRedirectPermanentPreserveMethod', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/ViewComponent/RedirectToAction', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/ViewComponent/RedirectToActionPreserveMethod', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/ViewComponent/RedirectToActionPermanent', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/ViewComponent/RedirectToActionPermanentPreserveMethod', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/ViewComponent/RedirectToRoute', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/ViewComponent/RedirectToRoutePreserveMethod', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/ViewComponent/RedirectToRoutePermanent', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/ViewComponent/RedirectToRoutePermanentPreserveMethod', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/ViewComponent/RedirectToPage', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/ViewComponent/RedirectToPagePermanent', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/ViewComponent/RedirectToPagePreserveMethod', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/ViewComponent/RedirectToPagePermanentPreserveMethod', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/ViewComponent/File', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/ViewComponent/PhysicalFile', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/ViewComponent/Unauthorized', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/ViewComponent/NotFound', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/ViewComponent/BadRequest', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/ViewComponent/UnprocessableEntity', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/ViewComponent/Equals', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/ViewComponent/GetHashCode', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/ViewComponent/GetType', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/ViewComponent/ToString', type: 'ViewComponentFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let ViewComponentController = class ViewComponentController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'ViewComponentFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new ViewComponentFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$viewComponent'] = $scope;
        window['$viewComponentController'] = $scope;
        $scope['$viewComponentController'] = window['$viewComponentController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
ViewComponentController = __decorate([
    Controller({ name: 'ViewComponentController' })
], ViewComponentController);
function OdbcDatasourceFactory(pelement) {
    console.log(pelement.id, 'OdbcDatasourceFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.getDatasources = function () {
        let pars = toHttpParams({});
        console.log('getDatasources', pars);
        return window['https']({ url: '/OdbcDatasource/GetDatasources', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getMetadata = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('getMetadata', pars);
        return window['https']({ url: '/OdbcDatasource/GetMetadata', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/OdbcDatasource/View', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/OdbcDatasource/PartialView', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/OdbcDatasource/ViewComponent', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/OdbcDatasource/Json', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/OdbcDatasource/OnActionExecuting', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/OdbcDatasource/OnActionExecuted', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/OdbcDatasource/OnActionExecutionAsync', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/OdbcDatasource/Dispose', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/OdbcDatasource/Conflict', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/OdbcDatasource/Problem', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/OdbcDatasource/ValidationProblem', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/OdbcDatasource/Created', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/OdbcDatasource/CreatedAtAction', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/OdbcDatasource/CreatedAtRoute', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/OdbcDatasource/Accepted', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/OdbcDatasource/AcceptedAtAction', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/OdbcDatasource/AcceptedAtRoute', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/OdbcDatasource/Challenge', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/OdbcDatasource/Forbid', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/OdbcDatasource/SignIn', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/OdbcDatasource/SignOut', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/OdbcDatasource/TryUpdateModelAsync', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/OdbcDatasource/TryValidateModel', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/OdbcDatasource/StatusCode', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/OdbcDatasource/Content', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/OdbcDatasource/NoContent', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/OdbcDatasource/Ok', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/OdbcDatasource/Redirect', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/OdbcDatasource/RedirectPermanent', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/OdbcDatasource/RedirectPreserveMethod', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/OdbcDatasource/RedirectPermanentPreserveMethod', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/OdbcDatasource/LocalRedirect', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/OdbcDatasource/LocalRedirectPermanent', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/OdbcDatasource/LocalRedirectPreserveMethod', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/OdbcDatasource/LocalRedirectPermanentPreserveMethod', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/OdbcDatasource/RedirectToAction', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/OdbcDatasource/RedirectToActionPreserveMethod', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/OdbcDatasource/RedirectToActionPermanent', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/OdbcDatasource/RedirectToActionPermanentPreserveMethod', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/OdbcDatasource/RedirectToRoute', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/OdbcDatasource/RedirectToRoutePreserveMethod', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/OdbcDatasource/RedirectToRoutePermanent', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/OdbcDatasource/RedirectToRoutePermanentPreserveMethod', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/OdbcDatasource/RedirectToPage', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/OdbcDatasource/RedirectToPagePermanent', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/OdbcDatasource/RedirectToPagePreserveMethod', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/OdbcDatasource/RedirectToPagePermanentPreserveMethod', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/OdbcDatasource/File', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/OdbcDatasource/PhysicalFile', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/OdbcDatasource/Unauthorized', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/OdbcDatasource/NotFound', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/OdbcDatasource/BadRequest', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/OdbcDatasource/UnprocessableEntity', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/OdbcDatasource/Equals', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/OdbcDatasource/GetHashCode', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/OdbcDatasource/GetType', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/OdbcDatasource/ToString', type: 'OdbcDatasourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let OdbcDatasourceController = class OdbcDatasourceController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'OdbcDatasourceFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new OdbcDatasourceFactory($element[0]));
        window['$odbcDatasource'] = $scope;
        window['$odbcDatasourceController'] = $scope;
        $scope['$odbcDatasourceController'] = window['$odbcDatasourceController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
OdbcDatasourceController = __decorate([
    Controller({ name: 'OdbcDatasourceController' })
], OdbcDatasourceController);
function MasterDialogFactory(pelement) {
    console.log(pelement.id, 'MasterDialogFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.get = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('get', pars);
        return window['https']({ url: '/MasterDialog/Get', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/MasterDialog/View', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/MasterDialog/PartialView', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/MasterDialog/ViewComponent', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/MasterDialog/Json', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/MasterDialog/OnActionExecuting', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/MasterDialog/OnActionExecuted', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/MasterDialog/OnActionExecutionAsync', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/MasterDialog/Dispose', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/MasterDialog/Conflict', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/MasterDialog/Problem', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/MasterDialog/ValidationProblem', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/MasterDialog/Created', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/MasterDialog/CreatedAtAction', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/MasterDialog/CreatedAtRoute', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/MasterDialog/Accepted', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/MasterDialog/AcceptedAtAction', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/MasterDialog/AcceptedAtRoute', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/MasterDialog/Challenge', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/MasterDialog/Forbid', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/MasterDialog/SignIn', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/MasterDialog/SignOut', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/MasterDialog/TryUpdateModelAsync', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/MasterDialog/TryValidateModel', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/MasterDialog/StatusCode', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/MasterDialog/Content', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/MasterDialog/NoContent', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/MasterDialog/Ok', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/MasterDialog/Redirect', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/MasterDialog/RedirectPermanent', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/MasterDialog/RedirectPreserveMethod', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/MasterDialog/RedirectPermanentPreserveMethod', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/MasterDialog/LocalRedirect', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/MasterDialog/LocalRedirectPermanent', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/MasterDialog/LocalRedirectPreserveMethod', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/MasterDialog/LocalRedirectPermanentPreserveMethod', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/MasterDialog/RedirectToAction', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/MasterDialog/RedirectToActionPreserveMethod', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/MasterDialog/RedirectToActionPermanent', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/MasterDialog/RedirectToActionPermanentPreserveMethod', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/MasterDialog/RedirectToRoute', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/MasterDialog/RedirectToRoutePreserveMethod', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/MasterDialog/RedirectToRoutePermanent', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/MasterDialog/RedirectToRoutePermanentPreserveMethod', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/MasterDialog/RedirectToPage', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/MasterDialog/RedirectToPagePermanent', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/MasterDialog/RedirectToPagePreserveMethod', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/MasterDialog/RedirectToPagePermanentPreserveMethod', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/MasterDialog/File', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/MasterDialog/PhysicalFile', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/MasterDialog/Unauthorized', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/MasterDialog/NotFound', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/MasterDialog/BadRequest', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/MasterDialog/UnprocessableEntity', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/MasterDialog/Equals', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/MasterDialog/GetHashCode', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/MasterDialog/GetType', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/MasterDialog/ToString', type: 'MasterDialogFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let MasterDialogController = class MasterDialogController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'MasterDialogFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new MasterDialogFactory($element[0]));
        window['$masterDialog'] = $scope;
        window['$masterDialogController'] = $scope;
        $scope['$masterDialogController'] = window['$masterDialogController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
MasterDialogController = __decorate([
    Controller({ name: 'MasterDialogController' })
], MasterDialogController);
function AccountFactory(pelement) {
    console.log(pelement.id, 'AccountFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.loginAsUser = function () {
        let pars = toHttpParams({});
        console.log('loginAsUser', pars);
        return window['https']({ url: '/Account/LoginAsUser', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.activationRequire = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('activationRequire', pars);
        return window['https']({ url: '/Account/ActivationRequire', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.sendActivationKey = function () {
        let pars = toHttpParams({});
        console.log('sendActivationKey', pars);
        return window['https']({ url: '/Account/SendActivationKey', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.logout = function () {
        let pars = toHttpParams({});
        console.log('logout', pars);
        return window['https']({ url: '/Account/Logout', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.restore = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('restore', pars);
        return window['https']({ url: '/Account/Restore', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.registration = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('registration', pars);
        return window['https']({ url: '/Account/Registration', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.activate = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('activate', pars);
        return window['https']({ url: '/Account/Activate', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.registrationComplete = function () {
        let pars = toHttpParams({});
        console.log('registrationComplete', pars);
        return window['https']({ url: '/Account/RegistrationComplete', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getValidationState = function (property) {
        let pars = toHttpParams({
            property: property
        });
        console.log('getValidationState', pars);
        return window['https']({ url: '/Account/GetValidationState', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.login = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('login', pars);
        return window['https']({ url: '/Account/Login', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/Account/ngOnInit', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/Account/ngOnDestroy', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/Account/ngOnChanges', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Account/View', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/Account/GetSettings', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/Account/Setup', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/Account/InfoDialog', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/Account/ShowHelp', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/Account/RemoteDialog', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/Account/ConfirmDialog', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/Account/CreateEntityDialog', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/Account/InputDialog', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/Account/Eval', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/Account/HandleEvalResult', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/Account/Callback', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/Account/AddEventListener', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/Account/DispatchEvent', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/Account/OnConnected', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Account/PartialView', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Account/ViewComponent', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Account/Json', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Account/OnActionExecuting', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Account/OnActionExecuted', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Account/OnActionExecutionAsync', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Account/Dispose', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Account/Conflict', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Account/Problem', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Account/ValidationProblem', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Account/Created', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Account/CreatedAtAction', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Account/CreatedAtRoute', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Account/Accepted', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Account/AcceptedAtAction', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Account/AcceptedAtRoute', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Account/Challenge', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Account/Forbid', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Account/SignIn', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Account/SignOut', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Account/TryUpdateModelAsync', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Account/TryValidateModel', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Account/StatusCode', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Account/Content', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Account/NoContent', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Account/Ok', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Account/Redirect', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Account/RedirectPermanent', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Account/RedirectPreserveMethod', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Account/RedirectPermanentPreserveMethod', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Account/LocalRedirect', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Account/LocalRedirectPermanent', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Account/LocalRedirectPreserveMethod', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Account/LocalRedirectPermanentPreserveMethod', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Account/RedirectToAction', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Account/RedirectToActionPreserveMethod', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Account/RedirectToActionPermanent', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Account/RedirectToActionPermanentPreserveMethod', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Account/RedirectToRoute', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Account/RedirectToRoutePreserveMethod', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Account/RedirectToRoutePermanent', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Account/RedirectToRoutePermanentPreserveMethod', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Account/RedirectToPage', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Account/RedirectToPagePermanent', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Account/RedirectToPagePreserveMethod', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Account/RedirectToPagePermanentPreserveMethod', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Account/File', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Account/PhysicalFile', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Account/Unauthorized', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Account/NotFound', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Account/BadRequest', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Account/UnprocessableEntity', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Account/Equals', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Account/GetHashCode', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Account/GetType', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Account/ToString', type: 'AccountFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let AccountController = class AccountController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'AccountFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new AccountFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$account'] = $scope;
        window['$accountController'] = $scope;
        $scope['$accountController'] = window['$accountController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
AccountController = __decorate([
    Controller({ name: 'AccountController' })
], AccountController);
function ExplorerFactory(pelement) {
    console.log(pelement.id, 'ExplorerFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.explorer = function () {
        let pars = toHttpParams({});
        console.log('explorer', pars);
        return window['https']({ url: '/Explorer/Explorer', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.initModel = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('initModel', pars);
        return window['https']({ url: '/Explorer/InitModel', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.newModel = function () {
        let pars = toHttpParams({});
        console.log('newModel', pars);
        return window['https']({ url: '/Explorer/NewModel', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getKey = function () {
        let pars = toHttpParams({});
        console.log('getKey', pars);
        return window['https']({ url: '/Explorer/GetKey', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setModel = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('setModel', pars);
        return window['https']({ url: '/Explorer/SetModel', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getModel = function (controllerType) {
        let pars = toHttpParams({
            controllerType: controllerType
        });
        console.log('getModel', pars);
        return window['https']({ url: '/Explorer/GetModel', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getAnotherModel = function (key) {
        let pars = toHttpParams({
            key: key
        });
        console.log('getAnotherModel', pars);
        return window['https']({ url: '/Explorer/GetAnotherModel', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/Explorer/ngOnInit', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/Explorer/ngOnDestroy', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/Explorer/ngOnChanges', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Explorer/View', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/Explorer/GetSettings', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/Explorer/Setup', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/Explorer/InfoDialog', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/Explorer/ShowHelp', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/Explorer/RemoteDialog', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/Explorer/ConfirmDialog', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/Explorer/CreateEntityDialog', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/Explorer/InputDialog', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/Explorer/Eval', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/Explorer/HandleEvalResult', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/Explorer/Callback', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/Explorer/AddEventListener', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/Explorer/DispatchEvent', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/Explorer/OnConnected', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Explorer/PartialView', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Explorer/ViewComponent', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Explorer/Json', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Explorer/OnActionExecuting', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Explorer/OnActionExecuted', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Explorer/OnActionExecutionAsync', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Explorer/Dispose', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Explorer/Conflict', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Explorer/Problem', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Explorer/ValidationProblem', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Explorer/Created', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Explorer/CreatedAtAction', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Explorer/CreatedAtRoute', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Explorer/Accepted', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Explorer/AcceptedAtAction', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Explorer/AcceptedAtRoute', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Explorer/Challenge', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Explorer/Forbid', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Explorer/SignIn', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Explorer/SignOut', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Explorer/TryUpdateModelAsync', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Explorer/TryValidateModel', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Explorer/StatusCode', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Explorer/Content', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Explorer/NoContent', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Explorer/Ok', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Explorer/Redirect', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Explorer/RedirectPermanent', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Explorer/RedirectPreserveMethod', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Explorer/RedirectPermanentPreserveMethod', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Explorer/LocalRedirect', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Explorer/LocalRedirectPermanent', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Explorer/LocalRedirectPreserveMethod', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Explorer/LocalRedirectPermanentPreserveMethod', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Explorer/RedirectToAction', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Explorer/RedirectToActionPreserveMethod', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Explorer/RedirectToActionPermanent', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Explorer/RedirectToActionPermanentPreserveMethod', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Explorer/RedirectToRoute', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Explorer/RedirectToRoutePreserveMethod', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Explorer/RedirectToRoutePermanent', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Explorer/RedirectToRoutePermanentPreserveMethod', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Explorer/RedirectToPage', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Explorer/RedirectToPagePermanent', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Explorer/RedirectToPagePreserveMethod', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Explorer/RedirectToPagePermanentPreserveMethod', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Explorer/File', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Explorer/PhysicalFile', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Explorer/Unauthorized', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Explorer/NotFound', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Explorer/BadRequest', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Explorer/UnprocessableEntity', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Explorer/Equals', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Explorer/GetHashCode', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Explorer/GetType', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Explorer/ToString', type: 'ExplorerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let ExplorerController = class ExplorerController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'ExplorerFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new ExplorerFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$explorer'] = $scope;
        window['$explorerController'] = $scope;
        $scope['$explorerController'] = window['$explorerController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
ExplorerController = __decorate([
    Controller({ name: 'ExplorerController' })
], ExplorerController);
function GeneratorsFactory(pelement) {
    console.log(pelement.id, 'GeneratorsFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.modelGenerator = function () {
        let pars = toHttpParams({});
        console.log('modelGenerator', pars);
        return window['https']({ url: '/Generators/ModelGenerator', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.repositoryGenerator = function () {
        let pars = toHttpParams({});
        console.log('repositoryGenerator', pars);
        return window['https']({ url: '/Generators/RepositoryGenerator', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tableGenerator = function () {
        let pars = toHttpParams({});
        console.log('tableGenerator', pars);
        return window['https']({ url: '/Generators/TableGenerator', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.webapiGenerator = function () {
        let pars = toHttpParams({});
        console.log('webapiGenerator', pars);
        return window['https']({ url: '/Generators/WebapiGenerator', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dbcontextGenerator = function () {
        let pars = toHttpParams({});
        console.log('dbcontextGenerator', pars);
        return window['https']({ url: '/Generators/DbcontextGenerator', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.controllerGenerator = function () {
        let pars = toHttpParams({});
        console.log('controllerGenerator', pars);
        return window['https']({ url: '/Generators/ControllerGenerator', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/Generators/ngOnInit', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/Generators/ngOnDestroy', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/Generators/ngOnChanges', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Generators/View', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/Generators/GetSettings', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/Generators/Setup', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/Generators/InfoDialog', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/Generators/ShowHelp', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/Generators/RemoteDialog', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/Generators/ConfirmDialog', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/Generators/CreateEntityDialog', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/Generators/InputDialog', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/Generators/Eval', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/Generators/HandleEvalResult', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/Generators/Callback', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/Generators/AddEventListener', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/Generators/DispatchEvent', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/Generators/OnConnected', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Generators/PartialView', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Generators/ViewComponent', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Generators/Json', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Generators/OnActionExecuting', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Generators/OnActionExecuted', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Generators/OnActionExecutionAsync', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Generators/Dispose', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Generators/Conflict', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Generators/Problem', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Generators/ValidationProblem', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Generators/Created', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Generators/CreatedAtAction', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Generators/CreatedAtRoute', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Generators/Accepted', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Generators/AcceptedAtAction', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Generators/AcceptedAtRoute', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Generators/Challenge', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Generators/Forbid', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Generators/SignIn', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Generators/SignOut', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Generators/TryUpdateModelAsync', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Generators/TryValidateModel', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Generators/StatusCode', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Generators/Content', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Generators/NoContent', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Generators/Ok', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Generators/Redirect', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Generators/RedirectPermanent', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Generators/RedirectPreserveMethod', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Generators/RedirectPermanentPreserveMethod', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Generators/LocalRedirect', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Generators/LocalRedirectPermanent', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Generators/LocalRedirectPreserveMethod', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Generators/LocalRedirectPermanentPreserveMethod', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Generators/RedirectToAction', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Generators/RedirectToActionPreserveMethod', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Generators/RedirectToActionPermanent', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Generators/RedirectToActionPermanentPreserveMethod', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Generators/RedirectToRoute', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Generators/RedirectToRoutePreserveMethod', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Generators/RedirectToRoutePermanent', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Generators/RedirectToRoutePermanentPreserveMethod', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Generators/RedirectToPage', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Generators/RedirectToPagePermanent', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Generators/RedirectToPagePreserveMethod', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Generators/RedirectToPagePermanentPreserveMethod', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Generators/File', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Generators/PhysicalFile', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Generators/Unauthorized', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Generators/NotFound', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Generators/BadRequest', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Generators/UnprocessableEntity', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Generators/Equals', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Generators/GetHashCode', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Generators/GetType', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Generators/ToString', type: 'GeneratorsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let GeneratorsController = class GeneratorsController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'GeneratorsFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new GeneratorsFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$generators'] = $scope;
        window['$generatorsController'] = $scope;
        $scope['$generatorsController'] = window['$generatorsController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
GeneratorsController = __decorate([
    Controller({ name: 'GeneratorsController' })
], GeneratorsController);
function GoogleChartsFactory(pelement) {
    console.log(pelement.id, 'GoogleChartsFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.bar = function () {
        let pars = toHttpParams({});
        console.log('bar', pars);
        return window['https']({ url: '/GoogleCharts/Bar', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.column = function () {
        let pars = toHttpParams({});
        console.log('column', pars);
        return window['https']({ url: '/GoogleCharts/Column', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.core = function () {
        let pars = toHttpParams({});
        console.log('core', pars);
        return window['https']({ url: '/GoogleCharts/Core', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.org = function () {
        let pars = toHttpParams({});
        console.log('org', pars);
        return window['https']({ url: '/GoogleCharts/Org', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.table = function () {
        let pars = toHttpParams({});
        console.log('table', pars);
        return window['https']({ url: '/GoogleCharts/Table', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/GoogleCharts/View', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/GoogleCharts/PartialView', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/GoogleCharts/ViewComponent', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/GoogleCharts/Json', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/GoogleCharts/OnActionExecuting', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/GoogleCharts/OnActionExecuted', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/GoogleCharts/OnActionExecutionAsync', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/GoogleCharts/Dispose', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/GoogleCharts/Conflict', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/GoogleCharts/Problem', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/GoogleCharts/ValidationProblem', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/GoogleCharts/Created', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/GoogleCharts/CreatedAtAction', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/GoogleCharts/CreatedAtRoute', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/GoogleCharts/Accepted', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/GoogleCharts/AcceptedAtAction', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/GoogleCharts/AcceptedAtRoute', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/GoogleCharts/Challenge', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/GoogleCharts/Forbid', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/GoogleCharts/SignIn', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/GoogleCharts/SignOut', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/GoogleCharts/TryUpdateModelAsync', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/GoogleCharts/TryValidateModel', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/GoogleCharts/StatusCode', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/GoogleCharts/Content', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/GoogleCharts/NoContent', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/GoogleCharts/Ok', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/GoogleCharts/Redirect', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/GoogleCharts/RedirectPermanent', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/GoogleCharts/RedirectPreserveMethod', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/GoogleCharts/RedirectPermanentPreserveMethod', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/GoogleCharts/LocalRedirect', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/GoogleCharts/LocalRedirectPermanent', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/GoogleCharts/LocalRedirectPreserveMethod', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/GoogleCharts/LocalRedirectPermanentPreserveMethod', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/GoogleCharts/RedirectToAction', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/GoogleCharts/RedirectToActionPreserveMethod', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/GoogleCharts/RedirectToActionPermanent', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/GoogleCharts/RedirectToActionPermanentPreserveMethod', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/GoogleCharts/RedirectToRoute', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/GoogleCharts/RedirectToRoutePreserveMethod', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/GoogleCharts/RedirectToRoutePermanent', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/GoogleCharts/RedirectToRoutePermanentPreserveMethod', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/GoogleCharts/RedirectToPage', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/GoogleCharts/RedirectToPagePermanent', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/GoogleCharts/RedirectToPagePreserveMethod', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/GoogleCharts/RedirectToPagePermanentPreserveMethod', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/GoogleCharts/File', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/GoogleCharts/PhysicalFile', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/GoogleCharts/Unauthorized', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/GoogleCharts/NotFound', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/GoogleCharts/BadRequest', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/GoogleCharts/UnprocessableEntity', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/GoogleCharts/Equals', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/GoogleCharts/GetHashCode', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/GoogleCharts/GetType', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/GoogleCharts/ToString', type: 'GoogleChartsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let GoogleChartsController = class GoogleChartsController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'GoogleChartsFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new GoogleChartsFactory($element[0]));
        window['$googleCharts'] = $scope;
        window['$googleChartsController'] = $scope;
        $scope['$googleChartsController'] = window['$googleChartsController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
GoogleChartsController = __decorate([
    Controller({ name: 'GoogleChartsController' })
], GoogleChartsController);
function CardFactory(pelement) {
    console.log(pelement.id, 'CardFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.setActive = function (hash, property) {
        let pars = toHttpParams({
            hash: hash,
            property: property
        });
        console.log('setActive', pars);
        return window['https']({ url: '/Card/SetActive', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/Card/ngOnInit', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/Card/ngOnDestroy', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/Card/ngOnChanges', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Card/View', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/Card/GetSettings', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/Card/Setup', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/Card/InfoDialog', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/Card/ShowHelp', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/Card/RemoteDialog', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/Card/ConfirmDialog', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/Card/CreateEntityDialog', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/Card/InputDialog', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/Card/Eval', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/Card/HandleEvalResult', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/Card/Callback', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/Card/AddEventListener', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/Card/DispatchEvent', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/Card/OnConnected', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Card/PartialView', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Card/ViewComponent', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Card/Json', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Card/OnActionExecuting', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Card/OnActionExecuted', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Card/OnActionExecutionAsync', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Card/Dispose', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Card/Conflict', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Card/Problem', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Card/ValidationProblem', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Card/Created', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Card/CreatedAtAction', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Card/CreatedAtRoute', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Card/Accepted', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Card/AcceptedAtAction', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Card/AcceptedAtRoute', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Card/Challenge', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Card/Forbid', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Card/SignIn', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Card/SignOut', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Card/TryUpdateModelAsync', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Card/TryValidateModel', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Card/StatusCode', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Card/Content', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Card/NoContent', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Card/Ok', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Card/Redirect', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Card/RedirectPermanent', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Card/RedirectPreserveMethod', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Card/RedirectPermanentPreserveMethod', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Card/LocalRedirect', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Card/LocalRedirectPermanent', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Card/LocalRedirectPreserveMethod', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Card/LocalRedirectPermanentPreserveMethod', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Card/RedirectToAction', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Card/RedirectToActionPreserveMethod', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Card/RedirectToActionPermanent', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Card/RedirectToActionPermanentPreserveMethod', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Card/RedirectToRoute', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Card/RedirectToRoutePreserveMethod', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Card/RedirectToRoutePermanent', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Card/RedirectToRoutePermanentPreserveMethod', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Card/RedirectToPage', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Card/RedirectToPagePermanent', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Card/RedirectToPagePreserveMethod', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Card/RedirectToPagePermanentPreserveMethod', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Card/File', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Card/PhysicalFile', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Card/Unauthorized', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Card/NotFound', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Card/BadRequest', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Card/UnprocessableEntity', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Card/Equals', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Card/GetHashCode', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Card/GetType', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Card/ToString', type: 'CardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let CardController = class CardController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'CardFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new CardFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$card'] = $scope;
        window['$cardController'] = $scope;
        $scope['$cardController'] = window['$cardController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
CardController = __decorate([
    Controller({ name: 'CardController' })
], CardController);
function ComboboxFactory(pelement) {
    console.log(pelement.id, 'ComboboxFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Combobox/View', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Combobox/PartialView', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Combobox/ViewComponent', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Combobox/Json', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Combobox/OnActionExecuting', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Combobox/OnActionExecuted', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Combobox/OnActionExecutionAsync', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Combobox/Dispose', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Combobox/Conflict', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Combobox/Problem', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Combobox/ValidationProblem', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Combobox/Created', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Combobox/CreatedAtAction', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Combobox/CreatedAtRoute', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Combobox/Accepted', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Combobox/AcceptedAtAction', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Combobox/AcceptedAtRoute', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Combobox/Challenge', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Combobox/Forbid', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Combobox/SignIn', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Combobox/SignOut', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Combobox/TryUpdateModelAsync', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Combobox/TryValidateModel', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Combobox/StatusCode', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Combobox/Content', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Combobox/NoContent', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Combobox/Ok', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Combobox/Redirect', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Combobox/RedirectPermanent', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Combobox/RedirectPreserveMethod', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Combobox/RedirectPermanentPreserveMethod', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Combobox/LocalRedirect', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Combobox/LocalRedirectPermanent', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Combobox/LocalRedirectPreserveMethod', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Combobox/LocalRedirectPermanentPreserveMethod', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Combobox/RedirectToAction', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Combobox/RedirectToActionPreserveMethod', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Combobox/RedirectToActionPermanent', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Combobox/RedirectToActionPermanentPreserveMethod', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Combobox/RedirectToRoute', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Combobox/RedirectToRoutePreserveMethod', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Combobox/RedirectToRoutePermanent', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Combobox/RedirectToRoutePermanentPreserveMethod', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Combobox/RedirectToPage', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Combobox/RedirectToPagePermanent', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Combobox/RedirectToPagePreserveMethod', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Combobox/RedirectToPagePermanentPreserveMethod', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Combobox/File', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Combobox/PhysicalFile', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Combobox/Unauthorized', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Combobox/NotFound', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Combobox/BadRequest', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Combobox/UnprocessableEntity', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Combobox/Equals', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Combobox/GetHashCode', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Combobox/GetType', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Combobox/ToString', type: 'ComboboxFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let ComboboxController = class ComboboxController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'ComboboxFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new ComboboxFactory($element[0]));
        window['$combobox'] = $scope;
        window['$comboboxController'] = $scope;
        $scope['$comboboxController'] = window['$comboboxController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
ComboboxController = __decorate([
    Controller({ name: 'ComboboxController' })
], ComboboxController);
function FormFactory(pelement) {
    console.log(pelement.id, 'FormFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.getFormData = function (hash) {
        let pars = toHttpParams({
            hash: hash
        });
        console.log('getFormData', pars);
        return window['https']({ url: '/Form/GetFormData', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/Form/ngOnInit', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/Form/ngOnDestroy', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/Form/ngOnChanges', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Form/View', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/Form/GetSettings', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/Form/Setup', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/Form/InfoDialog', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/Form/ShowHelp', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/Form/RemoteDialog', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/Form/ConfirmDialog', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/Form/CreateEntityDialog', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/Form/InputDialog', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/Form/Eval', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/Form/HandleEvalResult', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/Form/Callback', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/Form/AddEventListener', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/Form/DispatchEvent', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/Form/OnConnected', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Form/PartialView', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Form/ViewComponent', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Form/Json', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Form/OnActionExecuting', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Form/OnActionExecuted', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Form/OnActionExecutionAsync', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Form/Dispose', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Form/Conflict', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Form/Problem', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Form/ValidationProblem', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Form/Created', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Form/CreatedAtAction', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Form/CreatedAtRoute', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Form/Accepted', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Form/AcceptedAtAction', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Form/AcceptedAtRoute', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Form/Challenge', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Form/Forbid', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Form/SignIn', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Form/SignOut', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Form/TryUpdateModelAsync', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Form/TryValidateModel', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Form/StatusCode', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Form/Content', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Form/NoContent', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Form/Ok', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Form/Redirect', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Form/RedirectPermanent', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Form/RedirectPreserveMethod', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Form/RedirectPermanentPreserveMethod', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Form/LocalRedirect', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Form/LocalRedirectPermanent', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Form/LocalRedirectPreserveMethod', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Form/LocalRedirectPermanentPreserveMethod', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Form/RedirectToAction', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Form/RedirectToActionPreserveMethod', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Form/RedirectToActionPermanent', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Form/RedirectToActionPermanentPreserveMethod', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Form/RedirectToRoute', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Form/RedirectToRoutePreserveMethod', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Form/RedirectToRoutePermanent', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Form/RedirectToRoutePermanentPreserveMethod', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Form/RedirectToPage', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Form/RedirectToPagePermanent', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Form/RedirectToPagePreserveMethod', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Form/RedirectToPagePermanentPreserveMethod', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Form/File', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Form/PhysicalFile', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Form/Unauthorized', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Form/NotFound', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Form/BadRequest', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Form/UnprocessableEntity', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Form/Equals', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Form/GetHashCode', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Form/GetType', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Form/ToString', type: 'FormFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let FormController = class FormController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'FormFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new FormFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$form'] = $scope;
        window['$formController'] = $scope;
        $scope['$formController'] = window['$formController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
FormController = __decorate([
    Controller({ name: 'FormController' })
], FormController);
function MatrixFactory(pelement) {
    console.log(pelement.id, 'MatrixFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.onclick = function (modelid) {
        let pars = toHttpParams({
            modelid: modelid
        });
        console.log('onclick', pars);
        return window['https']({ url: '/Matrix/onclick', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Matrix/View', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Matrix/PartialView', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Matrix/ViewComponent', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Matrix/Json', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Matrix/OnActionExecuting', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Matrix/OnActionExecuted', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Matrix/OnActionExecutionAsync', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Matrix/Dispose', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Matrix/Conflict', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Matrix/Problem', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Matrix/ValidationProblem', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Matrix/Created', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Matrix/CreatedAtAction', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Matrix/CreatedAtRoute', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Matrix/Accepted', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Matrix/AcceptedAtAction', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Matrix/AcceptedAtRoute', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Matrix/Challenge', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Matrix/Forbid', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Matrix/SignIn', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Matrix/SignOut', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Matrix/TryUpdateModelAsync', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Matrix/TryValidateModel', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Matrix/StatusCode', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Matrix/Content', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Matrix/NoContent', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Matrix/Ok', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Matrix/Redirect', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Matrix/RedirectPermanent', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Matrix/RedirectPreserveMethod', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Matrix/RedirectPermanentPreserveMethod', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Matrix/LocalRedirect', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Matrix/LocalRedirectPermanent', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Matrix/LocalRedirectPreserveMethod', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Matrix/LocalRedirectPermanentPreserveMethod', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Matrix/RedirectToAction', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Matrix/RedirectToActionPreserveMethod', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Matrix/RedirectToActionPermanent', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Matrix/RedirectToActionPermanentPreserveMethod', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Matrix/RedirectToRoute', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Matrix/RedirectToRoutePreserveMethod', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Matrix/RedirectToRoutePermanent', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Matrix/RedirectToRoutePermanentPreserveMethod', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Matrix/RedirectToPage', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Matrix/RedirectToPagePermanent', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Matrix/RedirectToPagePreserveMethod', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Matrix/RedirectToPagePermanentPreserveMethod', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Matrix/File', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Matrix/PhysicalFile', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Matrix/Unauthorized', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Matrix/NotFound', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Matrix/BadRequest', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Matrix/UnprocessableEntity', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Matrix/Equals', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Matrix/GetHashCode', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Matrix/GetType', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Matrix/ToString', type: 'MatrixFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let MatrixController = class MatrixController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'MatrixFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new MatrixFactory($element[0]));
        window['$matrix'] = $scope;
        window['$matrixController'] = $scope;
        $scope['$matrixController'] = window['$matrixController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
MatrixController = __decorate([
    Controller({ name: 'MatrixController' })
], MatrixController);
function WizzardFactory(pelement) {
    console.log(pelement.id, 'WizzardFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/Wizzard/ngOnInit', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/Wizzard/ngOnDestroy', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/Wizzard/ngOnChanges', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Wizzard/View', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/Wizzard/GetSettings', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/Wizzard/Setup', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/Wizzard/InfoDialog', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/Wizzard/ShowHelp', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/Wizzard/RemoteDialog', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/Wizzard/ConfirmDialog', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/Wizzard/CreateEntityDialog', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/Wizzard/InputDialog', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/Wizzard/Eval', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/Wizzard/HandleEvalResult', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/Wizzard/Callback', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/Wizzard/AddEventListener', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/Wizzard/DispatchEvent', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/Wizzard/OnConnected', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Wizzard/PartialView', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Wizzard/ViewComponent', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Wizzard/Json', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Wizzard/OnActionExecuting', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Wizzard/OnActionExecuted', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Wizzard/OnActionExecutionAsync', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Wizzard/Dispose', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Wizzard/Conflict', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Wizzard/Problem', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Wizzard/ValidationProblem', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Wizzard/Created', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Wizzard/CreatedAtAction', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Wizzard/CreatedAtRoute', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Wizzard/Accepted', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Wizzard/AcceptedAtAction', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Wizzard/AcceptedAtRoute', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Wizzard/Challenge', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Wizzard/Forbid', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Wizzard/SignIn', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Wizzard/SignOut', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Wizzard/TryUpdateModelAsync', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Wizzard/TryValidateModel', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Wizzard/StatusCode', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Wizzard/Content', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Wizzard/NoContent', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Wizzard/Ok', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Wizzard/Redirect', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Wizzard/RedirectPermanent', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Wizzard/RedirectPreserveMethod', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Wizzard/RedirectPermanentPreserveMethod', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Wizzard/LocalRedirect', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Wizzard/LocalRedirectPermanent', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Wizzard/LocalRedirectPreserveMethod', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Wizzard/LocalRedirectPermanentPreserveMethod', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Wizzard/RedirectToAction', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Wizzard/RedirectToActionPreserveMethod', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Wizzard/RedirectToActionPermanent', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Wizzard/RedirectToActionPermanentPreserveMethod', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Wizzard/RedirectToRoute', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Wizzard/RedirectToRoutePreserveMethod', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Wizzard/RedirectToRoutePermanent', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Wizzard/RedirectToRoutePermanentPreserveMethod', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Wizzard/RedirectToPage', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Wizzard/RedirectToPagePermanent', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Wizzard/RedirectToPagePreserveMethod', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Wizzard/RedirectToPagePermanentPreserveMethod', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Wizzard/File', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Wizzard/PhysicalFile', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Wizzard/Unauthorized', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Wizzard/NotFound', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Wizzard/BadRequest', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Wizzard/UnprocessableEntity', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Wizzard/Equals', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Wizzard/GetHashCode', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Wizzard/GetType', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Wizzard/ToString', type: 'WizzardFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let WizzardController = class WizzardController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'WizzardFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new WizzardFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$wizzard'] = $scope;
        window['$wizzardController'] = $scope;
        $scope['$wizzardController'] = window['$wizzardController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
WizzardController = __decorate([
    Controller({ name: 'WizzardController' })
], WizzardController);
function LayoutFactory(pelement) {
    console.log(pelement.id, 'LayoutFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/Layout/ngOnInit', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/Layout/ngOnDestroy', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/Layout/ngOnChanges', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Layout/View', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/Layout/GetSettings', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/Layout/Setup', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/Layout/InfoDialog', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/Layout/ShowHelp', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/Layout/RemoteDialog', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/Layout/ConfirmDialog', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/Layout/CreateEntityDialog', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/Layout/InputDialog', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/Layout/Eval', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/Layout/HandleEvalResult', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/Layout/Callback', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/Layout/AddEventListener', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/Layout/DispatchEvent', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/Layout/OnConnected', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Layout/PartialView', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Layout/ViewComponent', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Layout/Json', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Layout/OnActionExecuting', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Layout/OnActionExecuted', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Layout/OnActionExecutionAsync', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Layout/Dispose', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Layout/Conflict', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Layout/Problem', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Layout/ValidationProblem', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Layout/Created', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Layout/CreatedAtAction', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Layout/CreatedAtRoute', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Layout/Accepted', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Layout/AcceptedAtAction', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Layout/AcceptedAtRoute', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Layout/Challenge', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Layout/Forbid', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Layout/SignIn', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Layout/SignOut', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Layout/TryUpdateModelAsync', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Layout/TryValidateModel', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Layout/StatusCode', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Layout/Content', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Layout/NoContent', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Layout/Ok', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Layout/Redirect', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Layout/RedirectPermanent', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Layout/RedirectPreserveMethod', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Layout/RedirectPermanentPreserveMethod', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Layout/LocalRedirect', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Layout/LocalRedirectPermanent', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Layout/LocalRedirectPreserveMethod', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Layout/LocalRedirectPermanentPreserveMethod', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Layout/RedirectToAction', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Layout/RedirectToActionPreserveMethod', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Layout/RedirectToActionPermanent', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Layout/RedirectToActionPermanentPreserveMethod', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Layout/RedirectToRoute', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Layout/RedirectToRoutePreserveMethod', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Layout/RedirectToRoutePermanent', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Layout/RedirectToRoutePermanentPreserveMethod', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Layout/RedirectToPage', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Layout/RedirectToPagePermanent', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Layout/RedirectToPagePreserveMethod', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Layout/RedirectToPagePermanentPreserveMethod', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Layout/File', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Layout/PhysicalFile', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Layout/Unauthorized', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Layout/NotFound', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Layout/BadRequest', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Layout/UnprocessableEntity', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Layout/Equals', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Layout/GetHashCode', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Layout/GetType', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Layout/ToString', type: 'LayoutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let LayoutController = class LayoutController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'LayoutFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new LayoutFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$layout'] = $scope;
        window['$layoutController'] = $scope;
        $scope['$layoutController'] = window['$layoutController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
LayoutController = __decorate([
    Controller({ name: 'LayoutController' })
], LayoutController);
function ViewsNavigationFactory(pelement) {
    console.log(pelement.id, 'ViewsNavigationFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.createNavigation = function () {
        let pars = toHttpParams({});
        console.log('createNavigation', pars);
        return window['https']({ url: '/ViewsNavigation/CreateNavigation', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/ViewsNavigation/View', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/ViewsNavigation/PartialView', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/ViewsNavigation/ViewComponent', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/ViewsNavigation/Json', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/ViewsNavigation/OnActionExecuting', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/ViewsNavigation/OnActionExecuted', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/ViewsNavigation/OnActionExecutionAsync', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/ViewsNavigation/Dispose', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/ViewsNavigation/Conflict', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/ViewsNavigation/Problem', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/ViewsNavigation/ValidationProblem', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/ViewsNavigation/Created', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/ViewsNavigation/CreatedAtAction', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/ViewsNavigation/CreatedAtRoute', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/ViewsNavigation/Accepted', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/ViewsNavigation/AcceptedAtAction', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/ViewsNavigation/AcceptedAtRoute', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/ViewsNavigation/Challenge', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/ViewsNavigation/Forbid', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/ViewsNavigation/SignIn', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/ViewsNavigation/SignOut', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/ViewsNavigation/TryUpdateModelAsync', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/ViewsNavigation/TryValidateModel', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/ViewsNavigation/StatusCode', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/ViewsNavigation/Content', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/ViewsNavigation/NoContent', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/ViewsNavigation/Ok', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/ViewsNavigation/Redirect', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/ViewsNavigation/RedirectPermanent', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/ViewsNavigation/RedirectPreserveMethod', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/ViewsNavigation/RedirectPermanentPreserveMethod', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/ViewsNavigation/LocalRedirect', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/ViewsNavigation/LocalRedirectPermanent', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/ViewsNavigation/LocalRedirectPreserveMethod', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/ViewsNavigation/LocalRedirectPermanentPreserveMethod', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/ViewsNavigation/RedirectToAction', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/ViewsNavigation/RedirectToActionPreserveMethod', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/ViewsNavigation/RedirectToActionPermanent', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/ViewsNavigation/RedirectToActionPermanentPreserveMethod', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/ViewsNavigation/RedirectToRoute', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/ViewsNavigation/RedirectToRoutePreserveMethod', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/ViewsNavigation/RedirectToRoutePermanent', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/ViewsNavigation/RedirectToRoutePermanentPreserveMethod', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/ViewsNavigation/RedirectToPage', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/ViewsNavigation/RedirectToPagePermanent', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/ViewsNavigation/RedirectToPagePreserveMethod', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/ViewsNavigation/RedirectToPagePermanentPreserveMethod', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/ViewsNavigation/File', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/ViewsNavigation/PhysicalFile', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/ViewsNavigation/Unauthorized', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/ViewsNavigation/NotFound', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/ViewsNavigation/BadRequest', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/ViewsNavigation/UnprocessableEntity', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/ViewsNavigation/Equals', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/ViewsNavigation/GetHashCode', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/ViewsNavigation/GetType', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/ViewsNavigation/ToString', type: 'ViewsNavigationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let ViewsNavigationController = class ViewsNavigationController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'ViewsNavigationFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new ViewsNavigationFactory($element[0]));
        window['$viewsNavigation'] = $scope;
        window['$viewsNavigationController'] = $scope;
        $scope['$viewsNavigationController'] = window['$viewsNavigationController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
ViewsNavigationController = __decorate([
    Controller({ name: 'ViewsNavigationController' })
], ViewsNavigationController);
function HighchartFactory(pelement) {
    console.log(pelement.id, 'HighchartFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.getChartOptions = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('getChartOptions', pars);
        return window['https']({ url: '/Highchart/GetChartOptions', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.get = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('get', pars);
        return window['https']({ url: '/Highchart/Get', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.edit = function () {
        let pars = toHttpParams({});
        console.log('edit', pars);
        return window['https']({ url: '/Highchart/Edit', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Highchart/View', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Highchart/PartialView', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Highchart/ViewComponent', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Highchart/Json', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Highchart/OnActionExecuting', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Highchart/OnActionExecuted', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Highchart/OnActionExecutionAsync', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Highchart/Dispose', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Highchart/Conflict', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Highchart/Problem', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Highchart/ValidationProblem', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Highchart/Created', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Highchart/CreatedAtAction', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Highchart/CreatedAtRoute', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Highchart/Accepted', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Highchart/AcceptedAtAction', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Highchart/AcceptedAtRoute', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Highchart/Challenge', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Highchart/Forbid', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Highchart/SignIn', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Highchart/SignOut', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Highchart/TryUpdateModelAsync', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Highchart/TryValidateModel', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Highchart/StatusCode', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Highchart/Content', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Highchart/NoContent', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Highchart/Ok', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Highchart/Redirect', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Highchart/RedirectPermanent', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Highchart/RedirectPreserveMethod', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Highchart/RedirectPermanentPreserveMethod', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Highchart/LocalRedirect', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Highchart/LocalRedirectPermanent', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Highchart/LocalRedirectPreserveMethod', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Highchart/LocalRedirectPermanentPreserveMethod', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Highchart/RedirectToAction', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Highchart/RedirectToActionPreserveMethod', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Highchart/RedirectToActionPermanent', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Highchart/RedirectToActionPermanentPreserveMethod', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Highchart/RedirectToRoute', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Highchart/RedirectToRoutePreserveMethod', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Highchart/RedirectToRoutePermanent', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Highchart/RedirectToRoutePermanentPreserveMethod', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Highchart/RedirectToPage', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Highchart/RedirectToPagePermanent', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Highchart/RedirectToPagePreserveMethod', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Highchart/RedirectToPagePermanentPreserveMethod', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Highchart/File', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Highchart/PhysicalFile', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Highchart/Unauthorized', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Highchart/NotFound', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Highchart/BadRequest', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Highchart/UnprocessableEntity', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Highchart/Equals', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Highchart/GetHashCode', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Highchart/GetType', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Highchart/ToString', type: 'HighchartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let HighchartController = class HighchartController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'HighchartFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new HighchartFactory($element[0]));
        window['$highchart'] = $scope;
        window['$highchartController'] = $scope;
        $scope['$highchartController'] = window['$highchartController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
HighchartController = __decorate([
    Controller({ name: 'HighchartController' })
], HighchartController);
function HelpTopicsFactory(pelement) {
    console.log(pelement.id, 'HelpTopicsFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/HelpTopics/Index', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.get = function (view) {
        let pars = toHttpParams({
            view: view
        });
        console.log('get', pars);
        return window['https']({ url: '/HelpTopics/Get', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.error = function () {
        let pars = toHttpParams({});
        console.log('error', pars);
        return window['https']({ url: '/HelpTopics/Error', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/HelpTopics/View', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/HelpTopics/PartialView', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/HelpTopics/ViewComponent', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/HelpTopics/Json', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/HelpTopics/OnActionExecuting', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/HelpTopics/OnActionExecuted', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/HelpTopics/OnActionExecutionAsync', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/HelpTopics/Dispose', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/HelpTopics/Conflict', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/HelpTopics/Problem', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/HelpTopics/ValidationProblem', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/HelpTopics/Created', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/HelpTopics/CreatedAtAction', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/HelpTopics/CreatedAtRoute', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/HelpTopics/Accepted', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/HelpTopics/AcceptedAtAction', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/HelpTopics/AcceptedAtRoute', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/HelpTopics/Challenge', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/HelpTopics/Forbid', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/HelpTopics/SignIn', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/HelpTopics/SignOut', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/HelpTopics/TryUpdateModelAsync', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/HelpTopics/TryValidateModel', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/HelpTopics/StatusCode', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/HelpTopics/Content', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/HelpTopics/NoContent', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/HelpTopics/Ok', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/HelpTopics/Redirect', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/HelpTopics/RedirectPermanent', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/HelpTopics/RedirectPreserveMethod', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/HelpTopics/RedirectPermanentPreserveMethod', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/HelpTopics/LocalRedirect', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/HelpTopics/LocalRedirectPermanent', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/HelpTopics/LocalRedirectPreserveMethod', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/HelpTopics/LocalRedirectPermanentPreserveMethod', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/HelpTopics/RedirectToAction', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/HelpTopics/RedirectToActionPreserveMethod', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/HelpTopics/RedirectToActionPermanent', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/HelpTopics/RedirectToActionPermanentPreserveMethod', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/HelpTopics/RedirectToRoute', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/HelpTopics/RedirectToRoutePreserveMethod', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/HelpTopics/RedirectToRoutePermanent', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/HelpTopics/RedirectToRoutePermanentPreserveMethod', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/HelpTopics/RedirectToPage', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/HelpTopics/RedirectToPagePermanent', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/HelpTopics/RedirectToPagePreserveMethod', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/HelpTopics/RedirectToPagePermanentPreserveMethod', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/HelpTopics/File', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/HelpTopics/PhysicalFile', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/HelpTopics/Unauthorized', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/HelpTopics/NotFound', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/HelpTopics/BadRequest', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/HelpTopics/UnprocessableEntity', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/HelpTopics/Equals', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/HelpTopics/GetHashCode', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/HelpTopics/GetType', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/HelpTopics/ToString', type: 'HelpTopicsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let HelpTopicsController = class HelpTopicsController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'HelpTopicsFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new HelpTopicsFactory($element[0]));
        window['$helpTopics'] = $scope;
        window['$helpTopicsController'] = $scope;
        $scope['$helpTopicsController'] = window['$helpTopicsController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
HelpTopicsController = __decorate([
    Controller({ name: 'HelpTopicsController' })
], HelpTopicsController);
function AboutFactory(pelement) {
    console.log(pelement.id, 'AboutFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.options = function () {
        let pars = toHttpParams({});
        console.log('options', pars);
        return window['https']({ url: '/About/Options', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.separationOfResponsibilities = function () {
        let pars = toHttpParams({});
        console.log('separationOfResponsibilities', pars);
        return window['https']({ url: '/About/SeparationOfResponsibilities', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.privacyPolicy = function () {
        let pars = toHttpParams({});
        console.log('privacyPolicy', pars);
        return window['https']({ url: '/About/PrivacyPolicy', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.contactInformation = function () {
        let pars = toHttpParams({});
        console.log('contactInformation', pars);
        return window['https']({ url: '/About/ContactInformation', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.docs = function () {
        let pars = toHttpParams({});
        console.log('docs', pars);
        return window['https']({ url: '/About/Docs', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/About/ngOnInit', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/About/ngOnDestroy', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/About/ngOnChanges', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/About/View', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/About/GetSettings', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/About/Setup', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/About/InfoDialog', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/About/ShowHelp', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/About/RemoteDialog', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/About/ConfirmDialog', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/About/CreateEntityDialog', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/About/InputDialog', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/About/Eval', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/About/HandleEvalResult', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/About/Callback', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/About/AddEventListener', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/About/DispatchEvent', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/About/OnConnected', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/About/PartialView', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/About/ViewComponent', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/About/Json', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/About/OnActionExecuting', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/About/OnActionExecuted', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/About/OnActionExecutionAsync', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/About/Dispose', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/About/Conflict', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/About/Problem', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/About/ValidationProblem', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/About/Created', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/About/CreatedAtAction', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/About/CreatedAtRoute', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/About/Accepted', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/About/AcceptedAtAction', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/About/AcceptedAtRoute', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/About/Challenge', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/About/Forbid', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/About/SignIn', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/About/SignOut', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/About/TryUpdateModelAsync', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/About/TryValidateModel', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/About/StatusCode', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/About/Content', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/About/NoContent', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/About/Ok', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/About/Redirect', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/About/RedirectPermanent', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/About/RedirectPreserveMethod', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/About/RedirectPermanentPreserveMethod', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/About/LocalRedirect', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/About/LocalRedirectPermanent', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/About/LocalRedirectPreserveMethod', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/About/LocalRedirectPermanentPreserveMethod', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/About/RedirectToAction', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/About/RedirectToActionPreserveMethod', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/About/RedirectToActionPermanent', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/About/RedirectToActionPermanentPreserveMethod', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/About/RedirectToRoute', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/About/RedirectToRoutePreserveMethod', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/About/RedirectToRoutePermanent', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/About/RedirectToRoutePermanentPreserveMethod', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/About/RedirectToPage', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/About/RedirectToPagePermanent', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/About/RedirectToPagePreserveMethod', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/About/RedirectToPagePermanentPreserveMethod', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/About/File', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/About/PhysicalFile', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/About/Unauthorized', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/About/NotFound', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/About/BadRequest', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/About/UnprocessableEntity', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/About/Equals', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/About/GetHashCode', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/About/GetType', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/About/ToString', type: 'AboutFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let AboutController = class AboutController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'AboutFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new AboutFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$about'] = $scope;
        window['$aboutController'] = $scope;
        $scope['$aboutController'] = window['$aboutController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
AboutController = __decorate([
    Controller({ name: 'AboutController' })
], AboutController);
function HighchartsGeneratorFactory(pelement) {
    console.log(pelement.id, 'HighchartsGeneratorFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.typeForName = function (typeName) {
        let pars = toHttpParams({
            typeName: typeName
        });
        console.log('typeForName', pars);
        return window['https']({ url: '/HighchartsGenerator/TypeForName', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.typeForShortName = function (_type) {
        let pars = toHttpParams({
            _type: _type
        });
        console.log('typeForShortName', pars);
        return window['https']({ url: '/HighchartsGenerator/TypeForShortName', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.generate = function () {
        let pars = toHttpParams({});
        console.log('generate', pars);
        return window['https']({ url: '/HighchartsGenerator/Generate', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/HighchartsGenerator/Index', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.chart = function (_type) {
        let pars = toHttpParams({
            _type: _type
        });
        console.log('chart', pars);
        return window['https']({ url: '/HighchartsGenerator/Chart', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onInit = function (_type) {
        let pars = toHttpParams({
            _type: _type
        });
        console.log('onInit', pars);
        return window['https']({ url: '/HighchartsGenerator/OnInit', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onUpdate = function (_type) {
        let pars = toHttpParams({
            _type: _type
        });
        console.log('onUpdate', pars);
        return window['https']({ url: '/HighchartsGenerator/OnUpdate', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getTypes = function () {
        let pars = toHttpParams({});
        console.log('getTypes', pars);
        return window['https']({ url: '/HighchartsGenerator/GetTypes', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.read = function (type) {
        let pars = toHttpParams({
            type: type
        });
        console.log('read', pars);
        return window['https']({ url: '/HighchartsGenerator/Read', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toCapitalStyle = function (type) {
        let pars = toHttpParams({
            type: type
        });
        console.log('toCapitalStyle', pars);
        return window['https']({ url: '/HighchartsGenerator/ToCapitalStyle', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.write = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('write', pars);
        return window['https']({ url: '/HighchartsGenerator/Write', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/HighchartsGenerator/View', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/HighchartsGenerator/PartialView', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/HighchartsGenerator/ViewComponent', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/HighchartsGenerator/Json', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/HighchartsGenerator/OnActionExecuting', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/HighchartsGenerator/OnActionExecuted', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/HighchartsGenerator/OnActionExecutionAsync', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/HighchartsGenerator/Dispose', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/HighchartsGenerator/Conflict', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/HighchartsGenerator/Problem', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/HighchartsGenerator/ValidationProblem', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/HighchartsGenerator/Created', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/HighchartsGenerator/CreatedAtAction', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/HighchartsGenerator/CreatedAtRoute', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/HighchartsGenerator/Accepted', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/HighchartsGenerator/AcceptedAtAction', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/HighchartsGenerator/AcceptedAtRoute', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/HighchartsGenerator/Challenge', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/HighchartsGenerator/Forbid', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/HighchartsGenerator/SignIn', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/HighchartsGenerator/SignOut', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/HighchartsGenerator/TryUpdateModelAsync', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/HighchartsGenerator/TryValidateModel', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/HighchartsGenerator/StatusCode', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/HighchartsGenerator/Content', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/HighchartsGenerator/NoContent', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/HighchartsGenerator/Ok', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/HighchartsGenerator/Redirect', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/HighchartsGenerator/RedirectPermanent', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/HighchartsGenerator/RedirectPreserveMethod', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/HighchartsGenerator/RedirectPermanentPreserveMethod', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/HighchartsGenerator/LocalRedirect', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/HighchartsGenerator/LocalRedirectPermanent', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/HighchartsGenerator/LocalRedirectPreserveMethod', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/HighchartsGenerator/LocalRedirectPermanentPreserveMethod', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/HighchartsGenerator/RedirectToAction', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/HighchartsGenerator/RedirectToActionPreserveMethod', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/HighchartsGenerator/RedirectToActionPermanent', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/HighchartsGenerator/RedirectToActionPermanentPreserveMethod', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/HighchartsGenerator/RedirectToRoute', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/HighchartsGenerator/RedirectToRoutePreserveMethod', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/HighchartsGenerator/RedirectToRoutePermanent', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/HighchartsGenerator/RedirectToRoutePermanentPreserveMethod', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/HighchartsGenerator/RedirectToPage', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/HighchartsGenerator/RedirectToPagePermanent', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/HighchartsGenerator/RedirectToPagePreserveMethod', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/HighchartsGenerator/RedirectToPagePermanentPreserveMethod', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/HighchartsGenerator/File', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/HighchartsGenerator/PhysicalFile', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/HighchartsGenerator/Unauthorized', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/HighchartsGenerator/NotFound', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/HighchartsGenerator/BadRequest', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/HighchartsGenerator/UnprocessableEntity', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/HighchartsGenerator/Equals', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/HighchartsGenerator/GetHashCode', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/HighchartsGenerator/GetType', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/HighchartsGenerator/ToString', type: 'HighchartsGeneratorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let HighchartsGeneratorController = class HighchartsGeneratorController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'HighchartsGeneratorFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new HighchartsGeneratorFactory($element[0]));
        window['$highchartsGenerator'] = $scope;
        window['$highchartsGeneratorController'] = $scope;
        $scope['$highchartsGeneratorController'] = window['$highchartsGeneratorController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
HighchartsGeneratorController = __decorate([
    Controller({ name: 'HighchartsGeneratorController' })
], HighchartsGeneratorController);
function ViewFactory(pelement) {
    console.log(pelement.id, 'ViewFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.createView = function (type) {
        let pars = toHttpParams({
            type: type
        });
        console.log('createView', pars);
        return window['https']({ url: '/View/CreateView', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.componentsPallete = function () {
        let pars = toHttpParams({});
        console.log('componentsPallete', pars);
        return window['https']({ url: '/View/ComponentsPallete', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.invoke = function (modeid, action, args) {
        let pars = toHttpParams({
            modeid: modeid,
            action: action,
            args: args
        });
        console.log('invoke', pars);
        return window['https']({ url: '/View/Invoke', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getModelsDebugView = function () {
        let pars = toHttpParams({});
        console.log('getModelsDebugView', pars);
        return window['https']({ url: '/View/GetModelsDebugView', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.find = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('find', pars);
        return window['https']({ url: '/View/Find', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setEdited = function (modelid, edited) {
        let pars = toHttpParams({
            modelid: modelid,
            edited: edited
        });
        console.log('setEdited', pars);
        return window['https']({ url: '/View/SetEdited', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setEditable = function (modelid, editable) {
        let pars = toHttpParams({
            modelid: modelid,
            editable: editable
        });
        console.log('setEditable', pars);
        return window['https']({ url: '/View/SetEditable', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setNotEditable = function (modelid) {
        let pars = toHttpParams({
            modelid: modelid
        });
        console.log('setNotEditable', pars);
        return window['https']({ url: '/View/SetNotEditable', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getModels = function () {
        let pars = toHttpParams({});
        console.log('getModels', pars);
        return window['https']({ url: '/View/GetModels', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.update = function (modelId) {
        let pars = toHttpParams({
            modelId: modelId
        });
        console.log('update', pars);
        return window['https']({ url: '/View/Update', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/View/ngOnInit', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/View/ngOnDestroy', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/View/ngOnChanges', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/View/View', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/View/GetSettings', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/View/Setup', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/View/InfoDialog', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/View/ShowHelp', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/View/RemoteDialog', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/View/ConfirmDialog', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/View/CreateEntityDialog', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/View/InputDialog', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/View/Eval', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/View/HandleEvalResult', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/View/Callback', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/View/AddEventListener', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/View/DispatchEvent', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/View/OnConnected', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/View/PartialView', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/View/ViewComponent', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/View/Json', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/View/OnActionExecuting', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/View/OnActionExecuted', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/View/OnActionExecutionAsync', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/View/Dispose', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/View/Conflict', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/View/Problem', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/View/ValidationProblem', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/View/Created', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/View/CreatedAtAction', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/View/CreatedAtRoute', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/View/Accepted', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/View/AcceptedAtAction', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/View/AcceptedAtRoute', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/View/Challenge', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/View/Forbid', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/View/SignIn', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/View/SignOut', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/View/TryUpdateModelAsync', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/View/TryValidateModel', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/View/StatusCode', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/View/Content', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/View/NoContent', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/View/Ok', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/View/Redirect', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/View/RedirectPermanent', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/View/RedirectPreserveMethod', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/View/RedirectPermanentPreserveMethod', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/View/LocalRedirect', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/View/LocalRedirectPermanent', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/View/LocalRedirectPreserveMethod', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/View/LocalRedirectPermanentPreserveMethod', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/View/RedirectToAction', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/View/RedirectToActionPreserveMethod', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/View/RedirectToActionPermanent', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/View/RedirectToActionPermanentPreserveMethod', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/View/RedirectToRoute', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/View/RedirectToRoutePreserveMethod', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/View/RedirectToRoutePermanent', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/View/RedirectToRoutePermanentPreserveMethod', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/View/RedirectToPage', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/View/RedirectToPagePermanent', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/View/RedirectToPagePreserveMethod', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/View/RedirectToPagePermanentPreserveMethod', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/View/File', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/View/PhysicalFile', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/View/Unauthorized', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/View/NotFound', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/View/BadRequest', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/View/UnprocessableEntity', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/View/Equals', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/View/GetHashCode', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/View/GetType', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/View/ToString', type: 'ViewFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let ViewController = class ViewController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'ViewFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new ViewFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$view'] = $scope;
        window['$viewController'] = $scope;
        $scope['$viewController'] = window['$viewController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
ViewController = __decorate([
    Controller({ name: 'ViewController' })
], ViewController);
function BusinessReportFactory(pelement) {
    console.log(pelement.id, 'BusinessReportFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.getKeywords = function (query) {
        let pars = toHttpParams({
            query: query
        });
        console.log('getKeywords', pars);
        return window['https']({ url: '/BusinessReport/GetKeywords', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getIndexes = function () {
        let pars = toHttpParams({});
        console.log('getIndexes', pars);
        return window['https']({ url: '/BusinessReport/GetIndexes', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.search = function (query) {
        let pars = toHttpParams({
            query: query
        });
        console.log('search', pars);
        return window['https']({ url: '/BusinessReport/Search', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/BusinessReport/View', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/BusinessReport/PartialView', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/BusinessReport/ViewComponent', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/BusinessReport/Json', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/BusinessReport/OnActionExecuting', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/BusinessReport/OnActionExecuted', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/BusinessReport/OnActionExecutionAsync', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/BusinessReport/Dispose', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/BusinessReport/Conflict', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/BusinessReport/Problem', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/BusinessReport/ValidationProblem', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/BusinessReport/Created', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/BusinessReport/CreatedAtAction', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/BusinessReport/CreatedAtRoute', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/BusinessReport/Accepted', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/BusinessReport/AcceptedAtAction', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/BusinessReport/AcceptedAtRoute', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/BusinessReport/Challenge', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/BusinessReport/Forbid', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/BusinessReport/SignIn', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/BusinessReport/SignOut', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/BusinessReport/TryUpdateModelAsync', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/BusinessReport/TryValidateModel', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/BusinessReport/StatusCode', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/BusinessReport/Content', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/BusinessReport/NoContent', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/BusinessReport/Ok', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/BusinessReport/Redirect', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/BusinessReport/RedirectPermanent', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/BusinessReport/RedirectPreserveMethod', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/BusinessReport/RedirectPermanentPreserveMethod', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/BusinessReport/LocalRedirect', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/BusinessReport/LocalRedirectPermanent', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/BusinessReport/LocalRedirectPreserveMethod', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/BusinessReport/LocalRedirectPermanentPreserveMethod', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/BusinessReport/RedirectToAction', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/BusinessReport/RedirectToActionPreserveMethod', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/BusinessReport/RedirectToActionPermanent', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/BusinessReport/RedirectToActionPermanentPreserveMethod', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/BusinessReport/RedirectToRoute', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/BusinessReport/RedirectToRoutePreserveMethod', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/BusinessReport/RedirectToRoutePermanent', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/BusinessReport/RedirectToRoutePermanentPreserveMethod', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/BusinessReport/RedirectToPage', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/BusinessReport/RedirectToPagePermanent', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/BusinessReport/RedirectToPagePreserveMethod', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/BusinessReport/RedirectToPagePermanentPreserveMethod', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/BusinessReport/File', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/BusinessReport/PhysicalFile', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/BusinessReport/Unauthorized', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/BusinessReport/NotFound', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/BusinessReport/BadRequest', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/BusinessReport/UnprocessableEntity', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/BusinessReport/Equals', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/BusinessReport/GetHashCode', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/BusinessReport/GetType', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/BusinessReport/ToString', type: 'BusinessReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let BusinessReportController = class BusinessReportController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'BusinessReportFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new BusinessReportFactory($element[0]));
        window['$businessReport'] = $scope;
        window['$businessReportController'] = $scope;
        $scope['$businessReportController'] = window['$businessReportController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
BusinessReportController = __decorate([
    Controller({ name: 'BusinessReportController' })
], BusinessReportController);
function SessionTestFactory(pelement) {
    console.log(pelement.id, 'SessionTestFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.getModels = function () {
        let pars = toHttpParams({});
        console.log('getModels', pars);
        return window['https']({ url: '/SessionTest/GetModels', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getModel = function (modelId) {
        let pars = toHttpParams({
            modelId: modelId
        });
        console.log('getModel', pars);
        return window['https']({ url: '/SessionTest/GetModel', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.doLong = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('doLong', pars);
        return window['https']({ url: '/SessionTest/DoLong', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.doShort = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('doShort', pars);
        return window['https']({ url: '/SessionTest/DoShort', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.doError = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('doError', pars);
        return window['https']({ url: '/SessionTest/DoError', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/SessionTest/View', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/SessionTest/PartialView', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/SessionTest/ViewComponent', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/SessionTest/Json', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/SessionTest/OnActionExecuting', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/SessionTest/OnActionExecuted', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/SessionTest/OnActionExecutionAsync', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/SessionTest/Dispose', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/SessionTest/Conflict', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/SessionTest/Problem', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/SessionTest/ValidationProblem', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/SessionTest/Created', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/SessionTest/CreatedAtAction', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/SessionTest/CreatedAtRoute', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/SessionTest/Accepted', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/SessionTest/AcceptedAtAction', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/SessionTest/AcceptedAtRoute', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/SessionTest/Challenge', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/SessionTest/Forbid', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/SessionTest/SignIn', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/SessionTest/SignOut', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/SessionTest/TryUpdateModelAsync', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/SessionTest/TryValidateModel', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/SessionTest/StatusCode', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/SessionTest/Content', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/SessionTest/NoContent', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/SessionTest/Ok', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/SessionTest/Redirect', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/SessionTest/RedirectPermanent', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/SessionTest/RedirectPreserveMethod', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/SessionTest/RedirectPermanentPreserveMethod', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/SessionTest/LocalRedirect', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/SessionTest/LocalRedirectPermanent', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/SessionTest/LocalRedirectPreserveMethod', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/SessionTest/LocalRedirectPermanentPreserveMethod', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/SessionTest/RedirectToAction', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/SessionTest/RedirectToActionPreserveMethod', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/SessionTest/RedirectToActionPermanent', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/SessionTest/RedirectToActionPermanentPreserveMethod', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/SessionTest/RedirectToRoute', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/SessionTest/RedirectToRoutePreserveMethod', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/SessionTest/RedirectToRoutePermanent', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/SessionTest/RedirectToRoutePermanentPreserveMethod', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/SessionTest/RedirectToPage', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/SessionTest/RedirectToPagePermanent', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/SessionTest/RedirectToPagePreserveMethod', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/SessionTest/RedirectToPagePermanentPreserveMethod', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/SessionTest/File', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/SessionTest/PhysicalFile', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/SessionTest/Unauthorized', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/SessionTest/NotFound', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/SessionTest/BadRequest', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/SessionTest/UnprocessableEntity', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/SessionTest/Equals', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/SessionTest/GetHashCode', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/SessionTest/GetType', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/SessionTest/ToString', type: 'SessionTestFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let SessionTestController = class SessionTestController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'SessionTestFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new SessionTestFactory($element[0]));
        window['$sessionTest'] = $scope;
        window['$sessionTestController'] = $scope;
        $scope['$sessionTestController'] = window['$sessionTestController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
SessionTestController = __decorate([
    Controller({ name: 'SessionTestController' })
], SessionTestController);
function ViewItemSetFactory(pelement) {
    console.log(pelement.id, 'ViewItemSetFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/ViewItemSet/View', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/ViewItemSet/PartialView', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/ViewItemSet/ViewComponent', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/ViewItemSet/Json', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/ViewItemSet/OnActionExecuting', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/ViewItemSet/OnActionExecuted', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/ViewItemSet/OnActionExecutionAsync', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/ViewItemSet/Dispose', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/ViewItemSet/Conflict', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/ViewItemSet/Problem', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/ViewItemSet/ValidationProblem', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/ViewItemSet/Created', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/ViewItemSet/CreatedAtAction', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/ViewItemSet/CreatedAtRoute', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/ViewItemSet/Accepted', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/ViewItemSet/AcceptedAtAction', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/ViewItemSet/AcceptedAtRoute', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/ViewItemSet/Challenge', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/ViewItemSet/Forbid', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/ViewItemSet/SignIn', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/ViewItemSet/SignOut', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/ViewItemSet/TryUpdateModelAsync', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/ViewItemSet/TryValidateModel', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/ViewItemSet/StatusCode', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/ViewItemSet/Content', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/ViewItemSet/NoContent', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/ViewItemSet/Ok', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/ViewItemSet/Redirect', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/ViewItemSet/RedirectPermanent', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/ViewItemSet/RedirectPreserveMethod', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/ViewItemSet/RedirectPermanentPreserveMethod', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/ViewItemSet/LocalRedirect', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/ViewItemSet/LocalRedirectPermanent', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/ViewItemSet/LocalRedirectPreserveMethod', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/ViewItemSet/LocalRedirectPermanentPreserveMethod', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/ViewItemSet/RedirectToAction', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/ViewItemSet/RedirectToActionPreserveMethod', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/ViewItemSet/RedirectToActionPermanent', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/ViewItemSet/RedirectToActionPermanentPreserveMethod', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/ViewItemSet/RedirectToRoute', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/ViewItemSet/RedirectToRoutePreserveMethod', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/ViewItemSet/RedirectToRoutePermanent', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/ViewItemSet/RedirectToRoutePermanentPreserveMethod', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/ViewItemSet/RedirectToPage', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/ViewItemSet/RedirectToPagePermanent', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/ViewItemSet/RedirectToPagePreserveMethod', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/ViewItemSet/RedirectToPagePermanentPreserveMethod', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/ViewItemSet/File', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/ViewItemSet/PhysicalFile', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/ViewItemSet/Unauthorized', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/ViewItemSet/NotFound', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/ViewItemSet/BadRequest', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/ViewItemSet/UnprocessableEntity', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/ViewItemSet/Equals', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/ViewItemSet/GetHashCode', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/ViewItemSet/GetType', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/ViewItemSet/ToString', type: 'ViewItemSetFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let ViewItemSetController = class ViewItemSetController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'ViewItemSetFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new ViewItemSetFactory($element[0]));
        window['$viewItemSet'] = $scope;
        window['$viewItemSetController'] = $scope;
        $scope['$viewItemSetController'] = window['$viewItemSetController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
ViewItemSetController = __decorate([
    Controller({ name: 'ViewItemSetController' })
], ViewItemSetController);
function TableFactory(pelement) {
    console.log(pelement.id, 'TableFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Table/View', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Table/PartialView', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Table/ViewComponent', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Table/Json', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Table/OnActionExecuting', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Table/OnActionExecuted', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Table/OnActionExecutionAsync', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Table/Dispose', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Table/Conflict', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Table/Problem', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Table/ValidationProblem', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Table/Created', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Table/CreatedAtAction', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Table/CreatedAtRoute', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Table/Accepted', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Table/AcceptedAtAction', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Table/AcceptedAtRoute', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Table/Challenge', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Table/Forbid', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Table/SignIn', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Table/SignOut', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Table/TryUpdateModelAsync', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Table/TryValidateModel', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Table/StatusCode', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Table/Content', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Table/NoContent', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Table/Ok', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Table/Redirect', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Table/RedirectPermanent', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Table/RedirectPreserveMethod', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Table/RedirectPermanentPreserveMethod', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Table/LocalRedirect', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Table/LocalRedirectPermanent', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Table/LocalRedirectPreserveMethod', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Table/LocalRedirectPermanentPreserveMethod', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Table/RedirectToAction', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Table/RedirectToActionPreserveMethod', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Table/RedirectToActionPermanent', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Table/RedirectToActionPermanentPreserveMethod', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Table/RedirectToRoute', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Table/RedirectToRoutePreserveMethod', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Table/RedirectToRoutePermanent', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Table/RedirectToRoutePermanentPreserveMethod', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Table/RedirectToPage', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Table/RedirectToPagePermanent', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Table/RedirectToPagePreserveMethod', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Table/RedirectToPagePermanentPreserveMethod', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Table/File', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Table/PhysicalFile', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Table/Unauthorized', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Table/NotFound', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Table/BadRequest', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Table/UnprocessableEntity', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Table/Equals', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Table/GetHashCode', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Table/GetType', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Table/ToString', type: 'TableFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let TableController = class TableController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'TableFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new TableFactory($element[0]));
        window['$table'] = $scope;
        window['$tableController'] = $scope;
        $scope['$tableController'] = window['$tableController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
TableController = __decorate([
    Controller({ name: 'TableController' })
], TableController);
function SelectFactory(pelement) {
    console.log(pelement.id, 'SelectFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.onselect = function (modelid) {
        let pars = toHttpParams({
            modelid: modelid
        });
        console.log('onselect', pars);
        return window['https']({ url: '/Select/onselect', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Select/View', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Select/PartialView', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Select/ViewComponent', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Select/Json', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Select/OnActionExecuting', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Select/OnActionExecuted', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Select/OnActionExecutionAsync', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Select/Dispose', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Select/Conflict', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Select/Problem', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Select/ValidationProblem', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Select/Created', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Select/CreatedAtAction', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Select/CreatedAtRoute', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Select/Accepted', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Select/AcceptedAtAction', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Select/AcceptedAtRoute', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Select/Challenge', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Select/Forbid', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Select/SignIn', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Select/SignOut', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Select/TryUpdateModelAsync', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Select/TryValidateModel', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Select/StatusCode', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Select/Content', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Select/NoContent', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Select/Ok', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Select/Redirect', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Select/RedirectPermanent', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Select/RedirectPreserveMethod', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Select/RedirectPermanentPreserveMethod', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Select/LocalRedirect', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Select/LocalRedirectPermanent', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Select/LocalRedirectPreserveMethod', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Select/LocalRedirectPermanentPreserveMethod', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Select/RedirectToAction', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Select/RedirectToActionPreserveMethod', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Select/RedirectToActionPermanent', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Select/RedirectToActionPermanentPreserveMethod', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Select/RedirectToRoute', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Select/RedirectToRoutePreserveMethod', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Select/RedirectToRoutePermanent', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Select/RedirectToRoutePermanentPreserveMethod', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Select/RedirectToPage', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Select/RedirectToPagePermanent', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Select/RedirectToPagePreserveMethod', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Select/RedirectToPagePermanentPreserveMethod', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Select/File', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Select/PhysicalFile', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Select/Unauthorized', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Select/NotFound', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Select/BadRequest', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Select/UnprocessableEntity', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Select/Equals', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Select/GetHashCode', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Select/GetType', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Select/ToString', type: 'SelectFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let SelectController = class SelectController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'SelectFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new SelectFactory($element[0]));
        window['$select'] = $scope;
        window['$selectController'] = $scope;
        $scope['$selectController'] = window['$selectController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
SelectController = __decorate([
    Controller({ name: 'SelectController' })
], SelectController);
function RouterFactory(pelement) {
    console.log(pelement.id, 'RouterFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Router/View', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Router/PartialView', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Router/ViewComponent', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Router/Json', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Router/OnActionExecuting', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Router/OnActionExecuted', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Router/OnActionExecutionAsync', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Router/Dispose', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Router/Conflict', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Router/Problem', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Router/ValidationProblem', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Router/Created', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Router/CreatedAtAction', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Router/CreatedAtRoute', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Router/Accepted', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Router/AcceptedAtAction', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Router/AcceptedAtRoute', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Router/Challenge', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Router/Forbid', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Router/SignIn', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Router/SignOut', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Router/TryUpdateModelAsync', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Router/TryValidateModel', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Router/StatusCode', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Router/Content', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Router/NoContent', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Router/Ok', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Router/Redirect', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Router/RedirectPermanent', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Router/RedirectPreserveMethod', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Router/RedirectPermanentPreserveMethod', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Router/LocalRedirect', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Router/LocalRedirectPermanent', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Router/LocalRedirectPreserveMethod', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Router/LocalRedirectPermanentPreserveMethod', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Router/RedirectToAction', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Router/RedirectToActionPreserveMethod', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Router/RedirectToActionPermanent', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Router/RedirectToActionPermanentPreserveMethod', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Router/RedirectToRoute', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Router/RedirectToRoutePreserveMethod', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Router/RedirectToRoutePermanent', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Router/RedirectToRoutePermanentPreserveMethod', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Router/RedirectToPage', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Router/RedirectToPagePermanent', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Router/RedirectToPagePreserveMethod', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Router/RedirectToPagePermanentPreserveMethod', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Router/File', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Router/PhysicalFile', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Router/Unauthorized', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Router/NotFound', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Router/BadRequest', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Router/UnprocessableEntity', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Router/Equals', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Router/GetHashCode', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Router/GetType', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Router/ToString', type: 'RouterFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let RouterController = class RouterController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'RouterFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new RouterFactory($element[0]));
        window['$router'] = $scope;
        window['$routerController'] = $scope;
        $scope['$routerController'] = window['$routerController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
RouterController = __decorate([
    Controller({ name: 'RouterController' })
], RouterController);
function ReturnOrderFactory(pelement) {
    console.log(pelement.id, 'ReturnOrderFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.addToOrder = function (modelid, itemid) {
        let pars = toHttpParams({
            modelid: modelid,
            itemid: itemid
        });
        console.log('addToOrder', pars);
        return window['https']({ url: '/ReturnOrder/AddToOrder', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.removeFromOrder = function (modelid, itemid) {
        let pars = toHttpParams({
            modelid: modelid,
            itemid: itemid
        });
        console.log('removeFromOrder', pars);
        return window['https']({ url: '/ReturnOrder/RemoveFromOrder', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/ReturnOrder/View', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/ReturnOrder/PartialView', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/ReturnOrder/ViewComponent', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/ReturnOrder/Json', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/ReturnOrder/OnActionExecuting', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/ReturnOrder/OnActionExecuted', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/ReturnOrder/OnActionExecutionAsync', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/ReturnOrder/Dispose', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/ReturnOrder/Conflict', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/ReturnOrder/Problem', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/ReturnOrder/ValidationProblem', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/ReturnOrder/Created', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/ReturnOrder/CreatedAtAction', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/ReturnOrder/CreatedAtRoute', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/ReturnOrder/Accepted', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/ReturnOrder/AcceptedAtAction', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/ReturnOrder/AcceptedAtRoute', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/ReturnOrder/Challenge', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/ReturnOrder/Forbid', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/ReturnOrder/SignIn', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/ReturnOrder/SignOut', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/ReturnOrder/TryUpdateModelAsync', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/ReturnOrder/TryValidateModel', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/ReturnOrder/StatusCode', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/ReturnOrder/Content', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/ReturnOrder/NoContent', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/ReturnOrder/Ok', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/ReturnOrder/Redirect', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/ReturnOrder/RedirectPermanent', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/ReturnOrder/RedirectPreserveMethod', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/ReturnOrder/RedirectPermanentPreserveMethod', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/ReturnOrder/LocalRedirect', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/ReturnOrder/LocalRedirectPermanent', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/ReturnOrder/LocalRedirectPreserveMethod', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/ReturnOrder/LocalRedirectPermanentPreserveMethod', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/ReturnOrder/RedirectToAction', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/ReturnOrder/RedirectToActionPreserveMethod', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/ReturnOrder/RedirectToActionPermanent', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/ReturnOrder/RedirectToActionPermanentPreserveMethod', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/ReturnOrder/RedirectToRoute', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/ReturnOrder/RedirectToRoutePreserveMethod', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/ReturnOrder/RedirectToRoutePermanent', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/ReturnOrder/RedirectToRoutePermanentPreserveMethod', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/ReturnOrder/RedirectToPage', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/ReturnOrder/RedirectToPagePermanent', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/ReturnOrder/RedirectToPagePreserveMethod', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/ReturnOrder/RedirectToPagePermanentPreserveMethod', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/ReturnOrder/File', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/ReturnOrder/PhysicalFile', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/ReturnOrder/Unauthorized', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/ReturnOrder/NotFound', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/ReturnOrder/BadRequest', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/ReturnOrder/UnprocessableEntity', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/ReturnOrder/Equals', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/ReturnOrder/GetHashCode', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/ReturnOrder/GetType', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/ReturnOrder/ToString', type: 'ReturnOrderFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let ReturnOrderController = class ReturnOrderController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'ReturnOrderFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new ReturnOrderFactory($element[0]));
        window['$returnOrder'] = $scope;
        window['$returnOrderController'] = $scope;
        $scope['$returnOrderController'] = window['$returnOrderController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
ReturnOrderController = __decorate([
    Controller({ name: 'ReturnOrderController' })
], ReturnOrderController);
function ReportFactory(pelement) {
    console.log(pelement.id, 'ReportFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/Report/Index', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Report/View', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Report/PartialView', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Report/ViewComponent', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Report/Json', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Report/OnActionExecuting', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Report/OnActionExecuted', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Report/OnActionExecutionAsync', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Report/Dispose', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Report/Conflict', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Report/Problem', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Report/ValidationProblem', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Report/Created', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Report/CreatedAtAction', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Report/CreatedAtRoute', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Report/Accepted', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Report/AcceptedAtAction', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Report/AcceptedAtRoute', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Report/Challenge', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Report/Forbid', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Report/SignIn', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Report/SignOut', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Report/TryUpdateModelAsync', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Report/TryValidateModel', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Report/StatusCode', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Report/Content', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Report/NoContent', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Report/Ok', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Report/Redirect', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Report/RedirectPermanent', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Report/RedirectPreserveMethod', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Report/RedirectPermanentPreserveMethod', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Report/LocalRedirect', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Report/LocalRedirectPermanent', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Report/LocalRedirectPreserveMethod', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Report/LocalRedirectPermanentPreserveMethod', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Report/RedirectToAction', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Report/RedirectToActionPreserveMethod', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Report/RedirectToActionPermanent', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Report/RedirectToActionPermanentPreserveMethod', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Report/RedirectToRoute', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Report/RedirectToRoutePreserveMethod', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Report/RedirectToRoutePermanent', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Report/RedirectToRoutePermanentPreserveMethod', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Report/RedirectToPage', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Report/RedirectToPagePermanent', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Report/RedirectToPagePreserveMethod', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Report/RedirectToPagePermanentPreserveMethod', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Report/File', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Report/PhysicalFile', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Report/Unauthorized', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Report/NotFound', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Report/BadRequest', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Report/UnprocessableEntity', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Report/Equals', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Report/GetHashCode', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Report/GetType', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Report/ToString', type: 'ReportFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let ReportController = class ReportController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'ReportFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new ReportFactory($element[0]));
        window['$report'] = $scope;
        window['$reportController'] = $scope;
        $scope['$reportController'] = window['$reportController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
ReportController = __decorate([
    Controller({ name: 'ReportController' })
], ReportController);
function PaneFactory(pelement) {
    console.log(pelement.id, 'PaneFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/Pane/Index', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Pane/View', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Pane/PartialView', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Pane/ViewComponent', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Pane/Json', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Pane/OnActionExecuting', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Pane/OnActionExecuted', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Pane/OnActionExecutionAsync', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Pane/Dispose', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Pane/Conflict', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Pane/Problem', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Pane/ValidationProblem', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Pane/Created', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Pane/CreatedAtAction', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Pane/CreatedAtRoute', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Pane/Accepted', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Pane/AcceptedAtAction', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Pane/AcceptedAtRoute', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Pane/Challenge', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Pane/Forbid', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Pane/SignIn', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Pane/SignOut', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Pane/TryUpdateModelAsync', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Pane/TryValidateModel', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Pane/StatusCode', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Pane/Content', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Pane/NoContent', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Pane/Ok', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Pane/Redirect', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Pane/RedirectPermanent', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Pane/RedirectPreserveMethod', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Pane/RedirectPermanentPreserveMethod', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Pane/LocalRedirect', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Pane/LocalRedirectPermanent', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Pane/LocalRedirectPreserveMethod', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Pane/LocalRedirectPermanentPreserveMethod', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Pane/RedirectToAction', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Pane/RedirectToActionPreserveMethod', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Pane/RedirectToActionPermanent', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Pane/RedirectToActionPermanentPreserveMethod', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Pane/RedirectToRoute', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Pane/RedirectToRoutePreserveMethod', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Pane/RedirectToRoutePermanent', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Pane/RedirectToRoutePermanentPreserveMethod', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Pane/RedirectToPage', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Pane/RedirectToPagePermanent', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Pane/RedirectToPagePreserveMethod', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Pane/RedirectToPagePermanentPreserveMethod', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Pane/File', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Pane/PhysicalFile', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Pane/Unauthorized', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Pane/NotFound', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Pane/BadRequest', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Pane/UnprocessableEntity', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Pane/Equals', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Pane/GetHashCode', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Pane/GetType', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Pane/ToString', type: 'PaneFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let PaneController = class PaneController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'PaneFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new PaneFactory($element[0]));
        window['$pane'] = $scope;
        window['$paneController'] = $scope;
        $scope['$paneController'] = window['$paneController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
PaneController = __decorate([
    Controller({ name: 'PaneController' })
], PaneController);
function PaginationFactory(pelement) {
    console.log(pelement.id, 'PaginationFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Pagination/View', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Pagination/PartialView', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Pagination/ViewComponent', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Pagination/Json', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Pagination/OnActionExecuting', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Pagination/OnActionExecuted', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Pagination/OnActionExecutionAsync', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Pagination/Dispose', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Pagination/Conflict', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Pagination/Problem', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Pagination/ValidationProblem', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Pagination/Created', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Pagination/CreatedAtAction', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Pagination/CreatedAtRoute', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Pagination/Accepted', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Pagination/AcceptedAtAction', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Pagination/AcceptedAtRoute', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Pagination/Challenge', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Pagination/Forbid', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Pagination/SignIn', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Pagination/SignOut', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Pagination/TryUpdateModelAsync', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Pagination/TryValidateModel', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Pagination/StatusCode', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Pagination/Content', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Pagination/NoContent', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Pagination/Ok', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Pagination/Redirect', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Pagination/RedirectPermanent', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Pagination/RedirectPreserveMethod', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Pagination/RedirectPermanentPreserveMethod', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Pagination/LocalRedirect', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Pagination/LocalRedirectPermanent', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Pagination/LocalRedirectPreserveMethod', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Pagination/LocalRedirectPermanentPreserveMethod', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Pagination/RedirectToAction', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Pagination/RedirectToActionPreserveMethod', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Pagination/RedirectToActionPermanent', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Pagination/RedirectToActionPermanentPreserveMethod', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Pagination/RedirectToRoute', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Pagination/RedirectToRoutePreserveMethod', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Pagination/RedirectToRoutePermanent', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Pagination/RedirectToRoutePermanentPreserveMethod', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Pagination/RedirectToPage', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Pagination/RedirectToPagePermanent', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Pagination/RedirectToPagePreserveMethod', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Pagination/RedirectToPagePermanentPreserveMethod', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Pagination/File', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Pagination/PhysicalFile', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Pagination/Unauthorized', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Pagination/NotFound', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Pagination/BadRequest', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Pagination/UnprocessableEntity', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Pagination/Equals', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Pagination/GetHashCode', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Pagination/GetType', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Pagination/ToString', type: 'PaginationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let PaginationController = class PaginationController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'PaginationFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new PaginationFactory($element[0]));
        window['$pagination'] = $scope;
        window['$paginationController'] = $scope;
        $scope['$paginationController'] = window['$paginationController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
PaginationController = __decorate([
    Controller({ name: 'PaginationController' })
], PaginationController);
function MyListFactory(pelement) {
    console.log(pelement.id, 'MyListFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/MyList/View', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/MyList/PartialView', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/MyList/ViewComponent', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/MyList/Json', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/MyList/OnActionExecuting', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/MyList/OnActionExecuted', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/MyList/OnActionExecutionAsync', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/MyList/Dispose', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/MyList/Conflict', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/MyList/Problem', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/MyList/ValidationProblem', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/MyList/Created', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/MyList/CreatedAtAction', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/MyList/CreatedAtRoute', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/MyList/Accepted', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/MyList/AcceptedAtAction', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/MyList/AcceptedAtRoute', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/MyList/Challenge', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/MyList/Forbid', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/MyList/SignIn', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/MyList/SignOut', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/MyList/TryUpdateModelAsync', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/MyList/TryValidateModel', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/MyList/StatusCode', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/MyList/Content', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/MyList/NoContent', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/MyList/Ok', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/MyList/Redirect', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/MyList/RedirectPermanent', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/MyList/RedirectPreserveMethod', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/MyList/RedirectPermanentPreserveMethod', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/MyList/LocalRedirect', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/MyList/LocalRedirectPermanent', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/MyList/LocalRedirectPreserveMethod', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/MyList/LocalRedirectPermanentPreserveMethod', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/MyList/RedirectToAction', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/MyList/RedirectToActionPreserveMethod', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/MyList/RedirectToActionPermanent', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/MyList/RedirectToActionPermanentPreserveMethod', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/MyList/RedirectToRoute', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/MyList/RedirectToRoutePreserveMethod', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/MyList/RedirectToRoutePermanent', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/MyList/RedirectToRoutePermanentPreserveMethod', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/MyList/RedirectToPage', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/MyList/RedirectToPagePermanent', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/MyList/RedirectToPagePreserveMethod', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/MyList/RedirectToPagePermanentPreserveMethod', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/MyList/File', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/MyList/PhysicalFile', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/MyList/Unauthorized', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/MyList/NotFound', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/MyList/BadRequest', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/MyList/UnprocessableEntity', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/MyList/Equals', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/MyList/GetHashCode', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/MyList/GetType', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/MyList/ToString', type: 'MyListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let MyListController = class MyListController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'MyListFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new MyListFactory($element[0]));
        window['$myList'] = $scope;
        window['$myListController'] = $scope;
        $scope['$myListController'] = window['$myListController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
MyListController = __decorate([
    Controller({ name: 'MyListController' })
], MyListController);
function FileFactory(pelement) {
    console.log(pelement.id, 'FileFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.go = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('go', pars);
        return window['https']({ url: '/File/Go', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/File/Index', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.list = function () {
        let pars = toHttpParams({});
        console.log('list', pars);
        return window['https']({ url: '/File/List', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.image = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('image', pars);
        return window['https']({ url: '/File/Image', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.upload = function () {
        let pars = toHttpParams({});
        console.log('upload', pars);
        return window['https']({ url: '/File/Upload', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/File/View', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/File/PartialView', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/File/ViewComponent', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/File/Json', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/File/OnActionExecuting', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/File/OnActionExecuted', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/File/OnActionExecutionAsync', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/File/Dispose', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/File/Conflict', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/File/Problem', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/File/ValidationProblem', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/File/Created', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/File/CreatedAtAction', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/File/CreatedAtRoute', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/File/Accepted', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/File/AcceptedAtAction', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/File/AcceptedAtRoute', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/File/Challenge', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/File/Forbid', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/File/SignIn', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/File/SignOut', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/File/TryUpdateModelAsync', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/File/TryValidateModel', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/File/StatusCode', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/File/Content', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/File/NoContent', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/File/Ok', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/File/Redirect', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/File/RedirectPermanent', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/File/RedirectPreserveMethod', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/File/RedirectPermanentPreserveMethod', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/File/LocalRedirect', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/File/LocalRedirectPermanent', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/File/LocalRedirectPreserveMethod', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/File/LocalRedirectPermanentPreserveMethod', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/File/RedirectToAction', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/File/RedirectToActionPreserveMethod', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/File/RedirectToActionPermanent', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/File/RedirectToActionPermanentPreserveMethod', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/File/RedirectToRoute', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/File/RedirectToRoutePreserveMethod', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/File/RedirectToRoutePermanent', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/File/RedirectToRoutePermanentPreserveMethod', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/File/RedirectToPage', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/File/RedirectToPagePermanent', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/File/RedirectToPagePreserveMethod', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/File/RedirectToPagePermanentPreserveMethod', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/File/File', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/File/PhysicalFile', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/File/Unauthorized', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/File/NotFound', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/File/BadRequest', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/File/UnprocessableEntity', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/File/Equals', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/File/GetHashCode', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/File/GetType', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/File/ToString', type: 'FileFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let FileController = class FileController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'FileFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new FileFactory($element[0]));
        window['$file'] = $scope;
        window['$fileController'] = $scope;
        $scope['$fileController'] = window['$fileController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
FileController = __decorate([
    Controller({ name: 'FileController' })
], FileController);
function FlexContainerFactory(pelement) {
    console.log(pelement.id, 'FlexContainerFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/FlexContainer/View', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/FlexContainer/PartialView', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/FlexContainer/ViewComponent', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/FlexContainer/Json', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/FlexContainer/OnActionExecuting', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/FlexContainer/OnActionExecuted', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/FlexContainer/OnActionExecutionAsync', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/FlexContainer/Dispose', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/FlexContainer/Conflict', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/FlexContainer/Problem', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/FlexContainer/ValidationProblem', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/FlexContainer/Created', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/FlexContainer/CreatedAtAction', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/FlexContainer/CreatedAtRoute', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/FlexContainer/Accepted', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/FlexContainer/AcceptedAtAction', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/FlexContainer/AcceptedAtRoute', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/FlexContainer/Challenge', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/FlexContainer/Forbid', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/FlexContainer/SignIn', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/FlexContainer/SignOut', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/FlexContainer/TryUpdateModelAsync', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/FlexContainer/TryValidateModel', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/FlexContainer/StatusCode', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/FlexContainer/Content', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/FlexContainer/NoContent', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/FlexContainer/Ok', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/FlexContainer/Redirect', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/FlexContainer/RedirectPermanent', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/FlexContainer/RedirectPreserveMethod', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/FlexContainer/RedirectPermanentPreserveMethod', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/FlexContainer/LocalRedirect', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/FlexContainer/LocalRedirectPermanent', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/FlexContainer/LocalRedirectPreserveMethod', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/FlexContainer/LocalRedirectPermanentPreserveMethod', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/FlexContainer/RedirectToAction', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/FlexContainer/RedirectToActionPreserveMethod', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/FlexContainer/RedirectToActionPermanent', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/FlexContainer/RedirectToActionPermanentPreserveMethod', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/FlexContainer/RedirectToRoute', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/FlexContainer/RedirectToRoutePreserveMethod', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/FlexContainer/RedirectToRoutePermanent', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/FlexContainer/RedirectToRoutePermanentPreserveMethod', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/FlexContainer/RedirectToPage', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/FlexContainer/RedirectToPagePermanent', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/FlexContainer/RedirectToPagePreserveMethod', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/FlexContainer/RedirectToPagePermanentPreserveMethod', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/FlexContainer/File', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/FlexContainer/PhysicalFile', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/FlexContainer/Unauthorized', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/FlexContainer/NotFound', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/FlexContainer/BadRequest', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/FlexContainer/UnprocessableEntity', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/FlexContainer/Equals', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/FlexContainer/GetHashCode', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/FlexContainer/GetType', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/FlexContainer/ToString', type: 'FlexContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let FlexContainerController = class FlexContainerController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'FlexContainerFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new FlexContainerFactory($element[0]));
        window['$flexContainer'] = $scope;
        window['$flexContainerController'] = $scope;
        $scope['$flexContainerController'] = window['$flexContainerController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
FlexContainerController = __decorate([
    Controller({ name: 'FlexContainerController' })
], FlexContainerController);
function DropDownFactory(pelement) {
    console.log(pelement.id, 'DropDownFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.expand = function (modelid) {
        let pars = toHttpParams({
            modelid: modelid
        });
        console.log('expand', pars);
        return window['https']({ url: '/DropDown/expand', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DropDown/View', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DropDown/PartialView', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DropDown/ViewComponent', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DropDown/Json', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DropDown/OnActionExecuting', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DropDown/OnActionExecuted', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DropDown/OnActionExecutionAsync', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DropDown/Dispose', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DropDown/Conflict', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DropDown/Problem', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DropDown/ValidationProblem', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DropDown/Created', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DropDown/CreatedAtAction', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DropDown/CreatedAtRoute', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DropDown/Accepted', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DropDown/AcceptedAtAction', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DropDown/AcceptedAtRoute', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DropDown/Challenge', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DropDown/Forbid', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DropDown/SignIn', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DropDown/SignOut', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DropDown/TryUpdateModelAsync', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DropDown/TryValidateModel', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DropDown/StatusCode', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DropDown/Content', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DropDown/NoContent', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DropDown/Ok', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DropDown/Redirect', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DropDown/RedirectPermanent', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DropDown/RedirectPreserveMethod', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DropDown/RedirectPermanentPreserveMethod', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DropDown/LocalRedirect', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DropDown/LocalRedirectPermanent', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DropDown/LocalRedirectPreserveMethod', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DropDown/LocalRedirectPermanentPreserveMethod', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DropDown/RedirectToAction', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DropDown/RedirectToActionPreserveMethod', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DropDown/RedirectToActionPermanent', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DropDown/RedirectToActionPermanentPreserveMethod', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DropDown/RedirectToRoute', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DropDown/RedirectToRoutePreserveMethod', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DropDown/RedirectToRoutePermanent', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DropDown/RedirectToRoutePermanentPreserveMethod', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DropDown/RedirectToPage', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DropDown/RedirectToPagePermanent', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DropDown/RedirectToPagePreserveMethod', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DropDown/RedirectToPagePermanentPreserveMethod', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DropDown/File', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DropDown/PhysicalFile', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DropDown/Unauthorized', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DropDown/NotFound', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DropDown/BadRequest', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DropDown/UnprocessableEntity', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DropDown/Equals', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DropDown/GetHashCode', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DropDown/GetType', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DropDown/ToString', type: 'DropDownFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let DropDownController = class DropDownController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'DropDownFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new DropDownFactory($element[0]));
        window['$dropDown'] = $scope;
        window['$dropDownController'] = $scope;
        $scope['$dropDownController'] = window['$dropDownController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
DropDownController = __decorate([
    Controller({ name: 'DropDownController' })
], DropDownController);
function DataListFactory(pelement) {
    console.log(pelement.id, 'DataListFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DataList/View', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DataList/PartialView', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DataList/ViewComponent', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DataList/Json', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DataList/OnActionExecuting', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DataList/OnActionExecuted', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DataList/OnActionExecutionAsync', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DataList/Dispose', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DataList/Conflict', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DataList/Problem', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DataList/ValidationProblem', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DataList/Created', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DataList/CreatedAtAction', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DataList/CreatedAtRoute', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DataList/Accepted', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DataList/AcceptedAtAction', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DataList/AcceptedAtRoute', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DataList/Challenge', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DataList/Forbid', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DataList/SignIn', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DataList/SignOut', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DataList/TryUpdateModelAsync', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DataList/TryValidateModel', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DataList/StatusCode', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DataList/Content', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DataList/NoContent', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DataList/Ok', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DataList/Redirect', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DataList/RedirectPermanent', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DataList/RedirectPreserveMethod', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DataList/RedirectPermanentPreserveMethod', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DataList/LocalRedirect', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DataList/LocalRedirectPermanent', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DataList/LocalRedirectPreserveMethod', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DataList/LocalRedirectPermanentPreserveMethod', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DataList/RedirectToAction', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DataList/RedirectToActionPreserveMethod', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DataList/RedirectToActionPermanent', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DataList/RedirectToActionPermanentPreserveMethod', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DataList/RedirectToRoute', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DataList/RedirectToRoutePreserveMethod', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DataList/RedirectToRoutePermanent', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DataList/RedirectToRoutePermanentPreserveMethod', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DataList/RedirectToPage', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DataList/RedirectToPagePermanent', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DataList/RedirectToPagePreserveMethod', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DataList/RedirectToPagePermanentPreserveMethod', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DataList/File', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DataList/PhysicalFile', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DataList/Unauthorized', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DataList/NotFound', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DataList/BadRequest', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DataList/UnprocessableEntity', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DataList/Equals', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DataList/GetHashCode', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DataList/GetType', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DataList/ToString', type: 'DataListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let DataListController = class DataListController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'DataListFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new DataListFactory($element[0]));
        window['$dataList'] = $scope;
        window['$dataListController'] = $scope;
        $scope['$dataListController'] = window['$dataListController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
DataListController = __decorate([
    Controller({ name: 'DataListController' })
], DataListController);
function ChartFactory(pelement) {
    console.log(pelement.id, 'ChartFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.getSeriesData = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('getSeriesData', pars);
        return window['https']({ url: '/Chart/GetSeriesData', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Chart/View', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Chart/PartialView', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Chart/ViewComponent', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Chart/Json', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Chart/OnActionExecuting', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Chart/OnActionExecuted', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Chart/OnActionExecutionAsync', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Chart/Dispose', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Chart/Conflict', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Chart/Problem', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Chart/ValidationProblem', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Chart/Created', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Chart/CreatedAtAction', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Chart/CreatedAtRoute', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Chart/Accepted', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Chart/AcceptedAtAction', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Chart/AcceptedAtRoute', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Chart/Challenge', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Chart/Forbid', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Chart/SignIn', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Chart/SignOut', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Chart/TryUpdateModelAsync', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Chart/TryValidateModel', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Chart/StatusCode', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Chart/Content', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Chart/NoContent', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Chart/Ok', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Chart/Redirect', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Chart/RedirectPermanent', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Chart/RedirectPreserveMethod', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Chart/RedirectPermanentPreserveMethod', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Chart/LocalRedirect', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Chart/LocalRedirectPermanent', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Chart/LocalRedirectPreserveMethod', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Chart/LocalRedirectPermanentPreserveMethod', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Chart/RedirectToAction', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Chart/RedirectToActionPreserveMethod', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Chart/RedirectToActionPermanent', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Chart/RedirectToActionPermanentPreserveMethod', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Chart/RedirectToRoute', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Chart/RedirectToRoutePreserveMethod', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Chart/RedirectToRoutePermanent', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Chart/RedirectToRoutePermanentPreserveMethod', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Chart/RedirectToPage', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Chart/RedirectToPagePermanent', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Chart/RedirectToPagePreserveMethod', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Chart/RedirectToPagePermanentPreserveMethod', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Chart/File', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Chart/PhysicalFile', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Chart/Unauthorized', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Chart/NotFound', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Chart/BadRequest', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Chart/UnprocessableEntity', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Chart/Equals', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Chart/GetHashCode', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Chart/GetType', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Chart/ToString', type: 'ChartFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let ChartController = class ChartController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'ChartFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new ChartFactory($element[0]));
        window['$chart'] = $scope;
        window['$chartController'] = $scope;
        $scope['$chartController'] = window['$chartController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
ChartController = __decorate([
    Controller({ name: 'ChartController' })
], ChartController);
function ValidationFactory(pelement) {
    console.log(pelement.id, 'ValidationFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.validateURL = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('validateURL', pars);
        return window['https']({ url: '/Validation/ValidateURL', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Validation/View', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Validation/PartialView', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Validation/ViewComponent', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Validation/Json', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Validation/OnActionExecuting', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Validation/OnActionExecuted', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Validation/OnActionExecutionAsync', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Validation/Dispose', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Validation/Conflict', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Validation/Problem', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Validation/ValidationProblem', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Validation/Created', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Validation/CreatedAtAction', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Validation/CreatedAtRoute', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Validation/Accepted', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Validation/AcceptedAtAction', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Validation/AcceptedAtRoute', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Validation/Challenge', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Validation/Forbid', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Validation/SignIn', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Validation/SignOut', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Validation/TryUpdateModelAsync', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Validation/TryValidateModel', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Validation/StatusCode', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Validation/Content', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Validation/NoContent', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Validation/Ok', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Validation/Redirect', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Validation/RedirectPermanent', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Validation/RedirectPreserveMethod', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Validation/RedirectPermanentPreserveMethod', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Validation/LocalRedirect', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Validation/LocalRedirectPermanent', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Validation/LocalRedirectPreserveMethod', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Validation/LocalRedirectPermanentPreserveMethod', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Validation/RedirectToAction', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Validation/RedirectToActionPreserveMethod', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Validation/RedirectToActionPermanent', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Validation/RedirectToActionPermanentPreserveMethod', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Validation/RedirectToRoute', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Validation/RedirectToRoutePreserveMethod', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Validation/RedirectToRoutePermanent', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Validation/RedirectToRoutePermanentPreserveMethod', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Validation/RedirectToPage', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Validation/RedirectToPagePermanent', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Validation/RedirectToPagePreserveMethod', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Validation/RedirectToPagePermanentPreserveMethod', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Validation/File', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Validation/PhysicalFile', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Validation/Unauthorized', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Validation/NotFound', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Validation/BadRequest', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Validation/UnprocessableEntity', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Validation/Equals', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Validation/GetHashCode', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Validation/GetType', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Validation/ToString', type: 'ValidationFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let ValidationController = class ValidationController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'ValidationFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new ValidationFactory($element[0]));
        window['$validation'] = $scope;
        window['$validationController'] = $scope;
        $scope['$validationController'] = window['$validationController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
ValidationController = __decorate([
    Controller({ name: 'ValidationController' })
], ValidationController);
function ResourceFactory(pelement) {
    console.log(pelement.id, 'ResourceFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.list = function () {
        let pars = toHttpParams({});
        console.log('list', pars);
        return window['https']({ url: '/Resource/List', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.use = function (entity, id) {
        let pars = toHttpParams({
            entity: entity,
            id: id
        });
        console.log('use', pars);
        return window['https']({ url: '/Resource/Use', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.upload = function (modelid, property) {
        let pars = toHttpParams({
            modelid: modelid,
            property: property
        });
        console.log('upload', pars);
        return window['https']({ url: '/Resource/Upload', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.create = function () {
        let pars = toHttpParams({});
        console.log('create', pars);
        return window['https']({ url: '/Resource/Create', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Resource/Conflict', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Resource/Problem', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Resource/ValidationProblem', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Resource/Created', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Resource/CreatedAtAction', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Resource/CreatedAtRoute', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Resource/Accepted', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Resource/AcceptedAtAction', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Resource/AcceptedAtRoute', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Resource/Challenge', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Resource/Forbid', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Resource/SignIn', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Resource/SignOut', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Resource/TryUpdateModelAsync', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Resource/TryValidateModel', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Resource/StatusCode', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Resource/Content', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Resource/NoContent', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Resource/Ok', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Resource/Redirect', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Resource/RedirectPermanent', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Resource/RedirectPreserveMethod', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Resource/RedirectPermanentPreserveMethod', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Resource/LocalRedirect', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Resource/LocalRedirectPermanent', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Resource/LocalRedirectPreserveMethod', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Resource/LocalRedirectPermanentPreserveMethod', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Resource/RedirectToAction', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Resource/RedirectToActionPreserveMethod', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Resource/RedirectToActionPermanent', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Resource/RedirectToActionPermanentPreserveMethod', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Resource/RedirectToRoute', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Resource/RedirectToRoutePreserveMethod', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Resource/RedirectToRoutePermanent', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Resource/RedirectToRoutePermanentPreserveMethod', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Resource/RedirectToPage', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Resource/RedirectToPagePermanent', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Resource/RedirectToPagePreserveMethod', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Resource/RedirectToPagePermanentPreserveMethod', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Resource/File', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Resource/PhysicalFile', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Resource/Unauthorized', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Resource/NotFound', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Resource/BadRequest', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Resource/UnprocessableEntity', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Resource/Equals', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Resource/GetHashCode', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Resource/GetType', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Resource/ToString', type: 'ResourceFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let ResourceController = class ResourceController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'ResourceFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new ResourceFactory($element[0]));
        window['$resource'] = $scope;
        window['$resourceController'] = $scope;
        $scope['$resourceController'] = window['$resourceController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
ResourceController = __decorate([
    Controller({ name: 'ResourceController' })
], ResourceController);
function GroupsFactory(pelement) {
    console.log(pelement.id, 'GroupsFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.getAll = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('getAll', pars);
        return window['https']({ url: '/Groups/GetAll', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getKeywords = function (query) {
        let pars = toHttpParams({
            query: query
        });
        console.log('getKeywords', pars);
        return window['https']({ url: '/Groups/GetKeywords', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.joinToGroup = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('joinToGroup', pars);
        return window['https']({ url: '/Groups/JoinToGroup', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.leaveGroup = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('leaveGroup', pars);
        return window['https']({ url: '/Groups/LeaveGroup', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.details = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('details', pars);
        return window['https']({ url: '/Groups/Details', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.create = function (group) {
        let pars = toHttpParams({
            group: group
        });
        console.log('create', pars);
        return window['https']({ url: '/Groups/Create', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.edit = function (group) {
        let pars = toHttpParams({
            group: group
        });
        console.log('edit', pars);
        return window['https']({ url: '/Groups/Edit', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.delete = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('delete', pars);
        return window['https']({ url: '/Groups/Delete', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.deleteConfirmed = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('deleteConfirmed', pars);
        return window['https']({ url: '/Groups/DeleteConfirmed', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getViewName = function () {
        let pars = toHttpParams({});
        console.log('getViewName', pars);
        return window['https']({ url: '/Groups/GetViewName', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.search = function (query) {
        let pars = toHttpParams({
            query: query
        });
        console.log('search', pars);
        return window['https']({ url: '/Groups/Search', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onInput = function (query) {
        let pars = toHttpParams({
            query: query
        });
        console.log('onInput', pars);
        return window['https']({ url: '/Groups/OnInput', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.initModel = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('initModel', pars);
        return window['https']({ url: '/Groups/InitModel', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setPage = function (page) {
        let pars = toHttpParams({
            page: page
        });
        console.log('setPage', pars);
        return window['https']({ url: '/Groups/SetPage', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setPageSize = function (size) {
        let pars = toHttpParams({
            size: size
        });
        console.log('setPageSize', pars);
        return window['https']({ url: '/Groups/SetPageSize', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/Groups/Index', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.newModel = function () {
        let pars = toHttpParams({});
        console.log('newModel', pars);
        return window['https']({ url: '/Groups/NewModel', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getKey = function () {
        let pars = toHttpParams({});
        console.log('getKey', pars);
        return window['https']({ url: '/Groups/GetKey', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setModel = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('setModel', pars);
        return window['https']({ url: '/Groups/SetModel', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getModel = function (controllerType) {
        let pars = toHttpParams({
            controllerType: controllerType
        });
        console.log('getModel', pars);
        return window['https']({ url: '/Groups/GetModel', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getAnotherModel = function (key) {
        let pars = toHttpParams({
            key: key
        });
        console.log('getAnotherModel', pars);
        return window['https']({ url: '/Groups/GetAnotherModel', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/Groups/ngOnInit', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/Groups/ngOnDestroy', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/Groups/ngOnChanges', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Groups/View', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/Groups/GetSettings', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/Groups/Setup', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/Groups/InfoDialog', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/Groups/ShowHelp', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/Groups/RemoteDialog', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/Groups/ConfirmDialog', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/Groups/CreateEntityDialog', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/Groups/InputDialog', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/Groups/Eval', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/Groups/HandleEvalResult', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/Groups/Callback', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/Groups/AddEventListener', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/Groups/DispatchEvent', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/Groups/OnConnected', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Groups/PartialView', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Groups/ViewComponent', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Groups/Json', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Groups/OnActionExecuting', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Groups/OnActionExecuted', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Groups/OnActionExecutionAsync', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Groups/Dispose', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Groups/Conflict', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Groups/Problem', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Groups/ValidationProblem', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Groups/Created', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Groups/CreatedAtAction', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Groups/CreatedAtRoute', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Groups/Accepted', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Groups/AcceptedAtAction', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Groups/AcceptedAtRoute', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Groups/Challenge', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Groups/Forbid', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Groups/SignIn', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Groups/SignOut', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Groups/TryUpdateModelAsync', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Groups/TryValidateModel', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Groups/StatusCode', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Groups/Content', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Groups/NoContent', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Groups/Ok', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Groups/Redirect', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Groups/RedirectPermanent', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Groups/RedirectPreserveMethod', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Groups/RedirectPermanentPreserveMethod', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Groups/LocalRedirect', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Groups/LocalRedirectPermanent', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Groups/LocalRedirectPreserveMethod', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Groups/LocalRedirectPermanentPreserveMethod', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Groups/RedirectToAction', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Groups/RedirectToActionPreserveMethod', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Groups/RedirectToActionPermanent', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Groups/RedirectToActionPermanentPreserveMethod', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Groups/RedirectToRoute', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Groups/RedirectToRoutePreserveMethod', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Groups/RedirectToRoutePermanent', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Groups/RedirectToRoutePermanentPreserveMethod', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Groups/RedirectToPage', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Groups/RedirectToPagePermanent', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Groups/RedirectToPagePreserveMethod', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Groups/RedirectToPagePermanentPreserveMethod', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Groups/File', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Groups/PhysicalFile', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Groups/Unauthorized', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Groups/NotFound', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Groups/BadRequest', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Groups/UnprocessableEntity', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Groups/Equals', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Groups/GetHashCode', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Groups/GetType', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Groups/ToString', type: 'GroupsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let GroupsController = class GroupsController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'GroupsFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new GroupsFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$groups'] = $scope;
        window['$groupsController'] = $scope;
        $scope['$groupsController'] = window['$groupsController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
GroupsController = __decorate([
    Controller({ name: 'GroupsController' })
], GroupsController);
function AuthorizationApiFactory(pelement) {
    console.log(pelement.id, 'AuthorizationApiFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.isSignin = function () {
        let pars = toHttpParams({});
        console.log('isSignin', pars);
        return window['https']({ url: '/AuthorizationApi/IsSignin', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signin = function (Email, Password) {
        let pars = toHttpParams({
            Email: Email,
            Password: Password
        });
        console.log('signin', pars);
        return window['https']({ url: '/AuthorizationApi/Signin', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signout = function () {
        let pars = toHttpParams({});
        console.log('signout', pars);
        return window['https']({ url: '/AuthorizationApi/Signout', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signup = function (Email, Password, Confirmation, SurName, FirstName, LastName, Birthday, Tel) {
        let pars = toHttpParams({
            Email: Email,
            Password: Password,
            Confirmation: Confirmation,
            SurName: SurName,
            FirstName: FirstName,
            LastName: LastName,
            Birthday: Birthday,
            Tel: Tel
        });
        console.log('signup', pars);
        return window['https']({ url: '/AuthorizationApi/Signup', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.verify = function () {
        let pars = toHttpParams({});
        console.log('verify', pars);
        return window['https']({ url: '/AuthorizationApi/Verify', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.hasUserWithEmail = function (Email) {
        let pars = toHttpParams({
            Email: Email
        });
        console.log('hasUserWithEmail', pars);
        return window['https']({ url: '/AuthorizationApi/HasUserWithEmail', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.hasUserWithTel = function (Tel) {
        let pars = toHttpParams({
            Tel: Tel
        });
        console.log('hasUserWithTel', pars);
        return window['https']({ url: '/AuthorizationApi/HasUserWithTel', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/AuthorizationApi/Conflict', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/AuthorizationApi/Problem', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/AuthorizationApi/ValidationProblem', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/AuthorizationApi/Created', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/AuthorizationApi/CreatedAtAction', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/AuthorizationApi/CreatedAtRoute', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/AuthorizationApi/Accepted', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/AuthorizationApi/AcceptedAtAction', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/AuthorizationApi/AcceptedAtRoute', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/AuthorizationApi/Challenge', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/AuthorizationApi/Forbid', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/AuthorizationApi/SignIn', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/AuthorizationApi/SignOut', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/AuthorizationApi/TryUpdateModelAsync', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/AuthorizationApi/TryValidateModel', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/AuthorizationApi/StatusCode', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/AuthorizationApi/Content', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/AuthorizationApi/NoContent', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/AuthorizationApi/Ok', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/AuthorizationApi/Redirect', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/AuthorizationApi/RedirectPermanent', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/AuthorizationApi/RedirectPreserveMethod', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/AuthorizationApi/RedirectPermanentPreserveMethod', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/AuthorizationApi/LocalRedirect', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/AuthorizationApi/LocalRedirectPermanent', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/AuthorizationApi/LocalRedirectPreserveMethod', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/AuthorizationApi/LocalRedirectPermanentPreserveMethod', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/AuthorizationApi/RedirectToAction', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/AuthorizationApi/RedirectToActionPreserveMethod', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/AuthorizationApi/RedirectToActionPermanent', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/AuthorizationApi/RedirectToActionPermanentPreserveMethod', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/AuthorizationApi/RedirectToRoute', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/AuthorizationApi/RedirectToRoutePreserveMethod', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/AuthorizationApi/RedirectToRoutePermanent', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/AuthorizationApi/RedirectToRoutePermanentPreserveMethod', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/AuthorizationApi/RedirectToPage', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/AuthorizationApi/RedirectToPagePermanent', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/AuthorizationApi/RedirectToPagePreserveMethod', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/AuthorizationApi/RedirectToPagePermanentPreserveMethod', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/AuthorizationApi/File', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/AuthorizationApi/PhysicalFile', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/AuthorizationApi/Unauthorized', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/AuthorizationApi/NotFound', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/AuthorizationApi/BadRequest', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/AuthorizationApi/UnprocessableEntity', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/AuthorizationApi/Equals', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/AuthorizationApi/GetHashCode', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/AuthorizationApi/GetType', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/AuthorizationApi/ToString', type: 'AuthorizationApiFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let AuthorizationApiController = class AuthorizationApiController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'AuthorizationApiFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new AuthorizationApiFactory($element[0]));
        window['$authorizationApi'] = $scope;
        window['$authorizationApiController'] = $scope;
        $scope['$authorizationApiController'] = window['$authorizationApiController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
AuthorizationApiController = __decorate([
    Controller({ name: 'AuthorizationApiController' })
], AuthorizationApiController);
function TextSearchFactory(pelement) {
    console.log(pelement.id, 'TextSearchFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.getKeywords = function (query) {
        let pars = toHttpParams({
            query: query
        });
        console.log('getKeywords', pars);
        return window['https']({ url: '/TextSearch/GetKeywords', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.search = function (query) {
        let pars = toHttpParams({
            query: query
        });
        console.log('search', pars);
        return window['https']({ url: '/TextSearch/Search', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/TextSearch/Conflict', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/TextSearch/Problem', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/TextSearch/ValidationProblem', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/TextSearch/Created', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/TextSearch/CreatedAtAction', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/TextSearch/CreatedAtRoute', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/TextSearch/Accepted', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/TextSearch/AcceptedAtAction', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/TextSearch/AcceptedAtRoute', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/TextSearch/Challenge', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/TextSearch/Forbid', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/TextSearch/SignIn', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/TextSearch/SignOut', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/TextSearch/TryUpdateModelAsync', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/TextSearch/TryValidateModel', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/TextSearch/StatusCode', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/TextSearch/Content', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/TextSearch/NoContent', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/TextSearch/Ok', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/TextSearch/Redirect', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/TextSearch/RedirectPermanent', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/TextSearch/RedirectPreserveMethod', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/TextSearch/RedirectPermanentPreserveMethod', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/TextSearch/LocalRedirect', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/TextSearch/LocalRedirectPermanent', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/TextSearch/LocalRedirectPreserveMethod', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/TextSearch/LocalRedirectPermanentPreserveMethod', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/TextSearch/RedirectToAction', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/TextSearch/RedirectToActionPreserveMethod', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/TextSearch/RedirectToActionPermanent', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/TextSearch/RedirectToActionPermanentPreserveMethod', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/TextSearch/RedirectToRoute', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/TextSearch/RedirectToRoutePreserveMethod', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/TextSearch/RedirectToRoutePermanent', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/TextSearch/RedirectToRoutePermanentPreserveMethod', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/TextSearch/RedirectToPage', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/TextSearch/RedirectToPagePermanent', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/TextSearch/RedirectToPagePreserveMethod', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/TextSearch/RedirectToPagePermanentPreserveMethod', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/TextSearch/File', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/TextSearch/PhysicalFile', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/TextSearch/Unauthorized', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/TextSearch/NotFound', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/TextSearch/BadRequest', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/TextSearch/UnprocessableEntity', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/TextSearch/Equals', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/TextSearch/GetHashCode', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/TextSearch/GetType', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/TextSearch/ToString', type: 'TextSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let TextSearchController = class TextSearchController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'TextSearchFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new TextSearchFactory($element[0]));
        window['$textSearch'] = $scope;
        window['$textSearchController'] = $scope;
        $scope['$textSearchController'] = window['$textSearchController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
TextSearchController = __decorate([
    Controller({ name: 'TextSearchController' })
], TextSearchController);
function TextEditorFactory(pelement) {
    console.log(pelement.id, 'TextEditorFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.expand = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('expand', pars);
        return window['https']({ url: '/TextEditor/Expand', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.select = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('select', pars);
        return window['https']({ url: '/TextEditor/Select', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.check = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('check', pars);
        return window['https']({ url: '/TextEditor/Check', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.focus = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('focus', pars);
        return window['https']({ url: '/TextEditor/Focus', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.create = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('create', pars);
        return window['https']({ url: '/TextEditor/Create', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remove = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('remove', pars);
        return window['https']({ url: '/TextEditor/Remove', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.drop = function (draggable, droppable) {
        let pars = toHttpParams({
            draggable: draggable,
            droppable: droppable
        });
        console.log('drop', pars);
        return window['https']({ url: '/TextEditor/Drop', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/TextEditor/ngOnInit', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/TextEditor/ngOnDestroy', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/TextEditor/ngOnChanges', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/TextEditor/View', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/TextEditor/GetSettings', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/TextEditor/Setup', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/TextEditor/InfoDialog', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/TextEditor/ShowHelp', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/TextEditor/RemoteDialog', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/TextEditor/ConfirmDialog', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/TextEditor/CreateEntityDialog', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/TextEditor/InputDialog', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/TextEditor/Eval', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/TextEditor/HandleEvalResult', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/TextEditor/Callback', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/TextEditor/AddEventListener', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/TextEditor/DispatchEvent', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/TextEditor/OnConnected', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/TextEditor/PartialView', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/TextEditor/ViewComponent', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/TextEditor/Json', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/TextEditor/OnActionExecuting', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/TextEditor/OnActionExecuted', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/TextEditor/OnActionExecutionAsync', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/TextEditor/Dispose', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/TextEditor/Conflict', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/TextEditor/Problem', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/TextEditor/ValidationProblem', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/TextEditor/Created', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/TextEditor/CreatedAtAction', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/TextEditor/CreatedAtRoute', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/TextEditor/Accepted', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/TextEditor/AcceptedAtAction', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/TextEditor/AcceptedAtRoute', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/TextEditor/Challenge', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/TextEditor/Forbid', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/TextEditor/SignIn', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/TextEditor/SignOut', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/TextEditor/TryUpdateModelAsync', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/TextEditor/TryValidateModel', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/TextEditor/StatusCode', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/TextEditor/Content', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/TextEditor/NoContent', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/TextEditor/Ok', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/TextEditor/Redirect', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/TextEditor/RedirectPermanent', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/TextEditor/RedirectPreserveMethod', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/TextEditor/RedirectPermanentPreserveMethod', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/TextEditor/LocalRedirect', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/TextEditor/LocalRedirectPermanent', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/TextEditor/LocalRedirectPreserveMethod', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/TextEditor/LocalRedirectPermanentPreserveMethod', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/TextEditor/RedirectToAction', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/TextEditor/RedirectToActionPreserveMethod', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/TextEditor/RedirectToActionPermanent', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/TextEditor/RedirectToActionPermanentPreserveMethod', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/TextEditor/RedirectToRoute', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/TextEditor/RedirectToRoutePreserveMethod', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/TextEditor/RedirectToRoutePermanent', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/TextEditor/RedirectToRoutePermanentPreserveMethod', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/TextEditor/RedirectToPage', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/TextEditor/RedirectToPagePermanent', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/TextEditor/RedirectToPagePreserveMethod', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/TextEditor/RedirectToPagePermanentPreserveMethod', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/TextEditor/File', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/TextEditor/PhysicalFile', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/TextEditor/Unauthorized', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/TextEditor/NotFound', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/TextEditor/BadRequest', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/TextEditor/UnprocessableEntity', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/TextEditor/Equals', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/TextEditor/GetHashCode', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/TextEditor/GetType', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/TextEditor/ToString', type: 'TextEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let TextEditorController = class TextEditorController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'TextEditorFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new TextEditorFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$textEditor'] = $scope;
        window['$textEditorController'] = $scope;
        $scope['$textEditorController'] = window['$textEditorController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
TextEditorController = __decorate([
    Controller({ name: 'TextEditorController' })
], TextEditorController);
function TreeFactory(pelement) {
    console.log(pelement.id, 'TreeFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.expand = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('expand', pars);
        return window['https']({ url: '/Tree/Expand', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.select = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('select', pars);
        return window['https']({ url: '/Tree/Select', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.check = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('check', pars);
        return window['https']({ url: '/Tree/Check', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.focus = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('focus', pars);
        return window['https']({ url: '/Tree/Focus', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.create = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('create', pars);
        return window['https']({ url: '/Tree/Create', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remove = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('remove', pars);
        return window['https']({ url: '/Tree/Remove', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.drop = function (draggable, droppable) {
        let pars = toHttpParams({
            draggable: draggable,
            droppable: droppable
        });
        console.log('drop', pars);
        return window['https']({ url: '/Tree/Drop', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Tree/View', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Tree/PartialView', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Tree/ViewComponent', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Tree/Json', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Tree/OnActionExecuting', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Tree/OnActionExecuted', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Tree/OnActionExecutionAsync', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Tree/Dispose', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Tree/Conflict', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Tree/Problem', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Tree/ValidationProblem', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Tree/Created', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Tree/CreatedAtAction', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Tree/CreatedAtRoute', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Tree/Accepted', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Tree/AcceptedAtAction', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Tree/AcceptedAtRoute', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Tree/Challenge', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Tree/Forbid', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Tree/SignIn', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Tree/SignOut', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Tree/TryUpdateModelAsync', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Tree/TryValidateModel', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Tree/StatusCode', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Tree/Content', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Tree/NoContent', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Tree/Ok', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Tree/Redirect', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Tree/RedirectPermanent', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Tree/RedirectPreserveMethod', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Tree/RedirectPermanentPreserveMethod', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Tree/LocalRedirect', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Tree/LocalRedirectPermanent', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Tree/LocalRedirectPreserveMethod', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Tree/LocalRedirectPermanentPreserveMethod', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Tree/RedirectToAction', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Tree/RedirectToActionPreserveMethod', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Tree/RedirectToActionPermanent', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Tree/RedirectToActionPermanentPreserveMethod', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Tree/RedirectToRoute', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Tree/RedirectToRoutePreserveMethod', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Tree/RedirectToRoutePermanent', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Tree/RedirectToRoutePermanentPreserveMethod', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Tree/RedirectToPage', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Tree/RedirectToPagePermanent', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Tree/RedirectToPagePreserveMethod', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Tree/RedirectToPagePermanentPreserveMethod', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Tree/File', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Tree/PhysicalFile', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Tree/Unauthorized', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Tree/NotFound', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Tree/BadRequest', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Tree/UnprocessableEntity', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Tree/Equals', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Tree/GetHashCode', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Tree/GetType', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Tree/ToString', type: 'TreeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let TreeController = class TreeController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'TreeFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new TreeFactory($element[0]));
        window['$tree'] = $scope;
        window['$treeController'] = $scope;
        $scope['$treeController'] = window['$treeController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
TreeController = __decorate([
    Controller({ name: 'TreeController' })
], TreeController);
function NotificationsFactory(pelement) {
    console.log(pelement.id, 'NotificationsFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.info = function (title, text, href, imageurl) {
        let pars = toHttpParams({
            title: title,
            text: text,
            href: href,
            imageurl: imageurl
        });
        console.log('info', pars);
        return window['https']({ url: '/Notifications/info', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/Notifications/ngOnInit', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/Notifications/ngOnDestroy', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/Notifications/ngOnChanges', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Notifications/View', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/Notifications/GetSettings', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/Notifications/Setup', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/Notifications/InfoDialog', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/Notifications/ShowHelp', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/Notifications/RemoteDialog', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/Notifications/ConfirmDialog', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/Notifications/CreateEntityDialog', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/Notifications/InputDialog', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/Notifications/Eval', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/Notifications/HandleEvalResult', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/Notifications/Callback', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/Notifications/AddEventListener', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/Notifications/DispatchEvent', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/Notifications/OnConnected', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Notifications/PartialView', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Notifications/ViewComponent', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Notifications/Json', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Notifications/OnActionExecuting', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Notifications/OnActionExecuted', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Notifications/OnActionExecutionAsync', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Notifications/Dispose', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Notifications/Conflict', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Notifications/Problem', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Notifications/ValidationProblem', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Notifications/Created', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Notifications/CreatedAtAction', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Notifications/CreatedAtRoute', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Notifications/Accepted', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Notifications/AcceptedAtAction', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Notifications/AcceptedAtRoute', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Notifications/Challenge', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Notifications/Forbid', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Notifications/SignIn', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Notifications/SignOut', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Notifications/TryUpdateModelAsync', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Notifications/TryValidateModel', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Notifications/StatusCode', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Notifications/Content', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Notifications/NoContent', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Notifications/Ok', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Notifications/Redirect', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Notifications/RedirectPermanent', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Notifications/RedirectPreserveMethod', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Notifications/RedirectPermanentPreserveMethod', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Notifications/LocalRedirect', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Notifications/LocalRedirectPermanent', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Notifications/LocalRedirectPreserveMethod', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Notifications/LocalRedirectPermanentPreserveMethod', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Notifications/RedirectToAction', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Notifications/RedirectToActionPreserveMethod', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Notifications/RedirectToActionPermanent', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Notifications/RedirectToActionPermanentPreserveMethod', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Notifications/RedirectToRoute', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Notifications/RedirectToRoutePreserveMethod', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Notifications/RedirectToRoutePermanent', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Notifications/RedirectToRoutePermanentPreserveMethod', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Notifications/RedirectToPage', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Notifications/RedirectToPagePermanent', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Notifications/RedirectToPagePreserveMethod', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Notifications/RedirectToPagePermanentPreserveMethod', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Notifications/File', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Notifications/PhysicalFile', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Notifications/Unauthorized', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Notifications/NotFound', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Notifications/BadRequest', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Notifications/UnprocessableEntity', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Notifications/Equals', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Notifications/GetHashCode', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Notifications/GetType', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Notifications/ToString', type: 'NotificationsFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let NotificationsController = class NotificationsController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'NotificationsFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new NotificationsFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$notifications'] = $scope;
        window['$notificationsController'] = $scope;
        $scope['$notificationsController'] = window['$notificationsController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
NotificationsController = __decorate([
    Controller({ name: 'NotificationsController' })
], NotificationsController);
function MasterPageFactory(pelement) {
    console.log(pelement.id, 'MasterPageFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/MasterPage/Index', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/MasterPage/View', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/MasterPage/PartialView', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/MasterPage/ViewComponent', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/MasterPage/Json', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/MasterPage/OnActionExecuting', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/MasterPage/OnActionExecuted', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/MasterPage/OnActionExecutionAsync', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/MasterPage/Dispose', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/MasterPage/Conflict', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/MasterPage/Problem', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/MasterPage/ValidationProblem', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/MasterPage/Created', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/MasterPage/CreatedAtAction', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/MasterPage/CreatedAtRoute', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/MasterPage/Accepted', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/MasterPage/AcceptedAtAction', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/MasterPage/AcceptedAtRoute', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/MasterPage/Challenge', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/MasterPage/Forbid', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/MasterPage/SignIn', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/MasterPage/SignOut', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/MasterPage/TryUpdateModelAsync', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/MasterPage/TryValidateModel', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/MasterPage/StatusCode', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/MasterPage/Content', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/MasterPage/NoContent', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/MasterPage/Ok', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/MasterPage/Redirect', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/MasterPage/RedirectPermanent', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/MasterPage/RedirectPreserveMethod', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/MasterPage/RedirectPermanentPreserveMethod', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/MasterPage/LocalRedirect', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/MasterPage/LocalRedirectPermanent', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/MasterPage/LocalRedirectPreserveMethod', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/MasterPage/LocalRedirectPermanentPreserveMethod', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/MasterPage/RedirectToAction', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/MasterPage/RedirectToActionPreserveMethod', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/MasterPage/RedirectToActionPermanent', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/MasterPage/RedirectToActionPermanentPreserveMethod', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/MasterPage/RedirectToRoute', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/MasterPage/RedirectToRoutePreserveMethod', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/MasterPage/RedirectToRoutePermanent', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/MasterPage/RedirectToRoutePermanentPreserveMethod', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/MasterPage/RedirectToPage', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/MasterPage/RedirectToPagePermanent', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/MasterPage/RedirectToPagePreserveMethod', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/MasterPage/RedirectToPagePermanentPreserveMethod', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/MasterPage/File', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/MasterPage/PhysicalFile', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/MasterPage/Unauthorized', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/MasterPage/NotFound', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/MasterPage/BadRequest', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/MasterPage/UnprocessableEntity', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/MasterPage/Equals', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/MasterPage/GetHashCode', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/MasterPage/GetType', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/MasterPage/ToString', type: 'MasterPageFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let MasterPageController = class MasterPageController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'MasterPageFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new MasterPageFactory($element[0]));
        window['$masterPage'] = $scope;
        window['$masterPageController'] = $scope;
        $scope['$masterPageController'] = window['$masterPageController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
MasterPageController = __decorate([
    Controller({ name: 'MasterPageController' })
], MasterPageController);
function NavBarFactory(pelement) {
    console.log(pelement.id, 'NavBarFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/NavBar/Index', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/NavBar/View', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/NavBar/PartialView', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/NavBar/ViewComponent', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/NavBar/Json', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/NavBar/OnActionExecuting', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/NavBar/OnActionExecuted', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/NavBar/OnActionExecutionAsync', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/NavBar/Dispose', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/NavBar/Conflict', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/NavBar/Problem', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/NavBar/ValidationProblem', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/NavBar/Created', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/NavBar/CreatedAtAction', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/NavBar/CreatedAtRoute', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/NavBar/Accepted', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/NavBar/AcceptedAtAction', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/NavBar/AcceptedAtRoute', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/NavBar/Challenge', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/NavBar/Forbid', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/NavBar/SignIn', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/NavBar/SignOut', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/NavBar/TryUpdateModelAsync', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/NavBar/TryValidateModel', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/NavBar/StatusCode', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/NavBar/Content', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/NavBar/NoContent', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/NavBar/Ok', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/NavBar/Redirect', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/NavBar/RedirectPermanent', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/NavBar/RedirectPreserveMethod', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/NavBar/RedirectPermanentPreserveMethod', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/NavBar/LocalRedirect', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/NavBar/LocalRedirectPermanent', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/NavBar/LocalRedirectPreserveMethod', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/NavBar/LocalRedirectPermanentPreserveMethod', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/NavBar/RedirectToAction', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/NavBar/RedirectToActionPreserveMethod', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/NavBar/RedirectToActionPermanent', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/NavBar/RedirectToActionPermanentPreserveMethod', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/NavBar/RedirectToRoute', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/NavBar/RedirectToRoutePreserveMethod', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/NavBar/RedirectToRoutePermanent', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/NavBar/RedirectToRoutePermanentPreserveMethod', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/NavBar/RedirectToPage', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/NavBar/RedirectToPagePermanent', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/NavBar/RedirectToPagePreserveMethod', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/NavBar/RedirectToPagePermanentPreserveMethod', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/NavBar/File', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/NavBar/PhysicalFile', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/NavBar/Unauthorized', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/NavBar/NotFound', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/NavBar/BadRequest', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/NavBar/UnprocessableEntity', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/NavBar/Equals', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/NavBar/GetHashCode', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/NavBar/GetType', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/NavBar/ToString', type: 'NavBarFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let NavBarController = class NavBarController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'NavBarFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new NavBarFactory($element[0]));
        window['$navBar'] = $scope;
        window['$navBarController'] = $scope;
        $scope['$navBarController'] = window['$navBarController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
NavBarController = __decorate([
    Controller({ name: 'NavBarController' })
], NavBarController);
function ListFactory(pelement) {
    console.log(pelement.id, 'ListFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/List/Index', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/List/View', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/List/PartialView', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/List/ViewComponent', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/List/Json', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/List/OnActionExecuting', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/List/OnActionExecuted', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/List/OnActionExecutionAsync', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/List/Dispose', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/List/Conflict', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/List/Problem', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/List/ValidationProblem', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/List/Created', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/List/CreatedAtAction', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/List/CreatedAtRoute', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/List/Accepted', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/List/AcceptedAtAction', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/List/AcceptedAtRoute', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/List/Challenge', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/List/Forbid', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/List/SignIn', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/List/SignOut', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/List/TryUpdateModelAsync', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/List/TryValidateModel', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/List/StatusCode', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/List/Content', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/List/NoContent', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/List/Ok', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/List/Redirect', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/List/RedirectPermanent', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/List/RedirectPreserveMethod', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/List/RedirectPermanentPreserveMethod', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/List/LocalRedirect', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/List/LocalRedirectPermanent', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/List/LocalRedirectPreserveMethod', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/List/LocalRedirectPermanentPreserveMethod', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/List/RedirectToAction', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/List/RedirectToActionPreserveMethod', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/List/RedirectToActionPermanent', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/List/RedirectToActionPermanentPreserveMethod', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/List/RedirectToRoute', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/List/RedirectToRoutePreserveMethod', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/List/RedirectToRoutePermanent', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/List/RedirectToRoutePermanentPreserveMethod', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/List/RedirectToPage', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/List/RedirectToPagePermanent', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/List/RedirectToPagePreserveMethod', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/List/RedirectToPagePermanentPreserveMethod', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/List/File', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/List/PhysicalFile', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/List/Unauthorized', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/List/NotFound', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/List/BadRequest', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/List/UnprocessableEntity', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/List/Equals', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/List/GetHashCode', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/List/GetType', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/List/ToString', type: 'ListFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let ListController = class ListController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'ListFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new ListFactory($element[0]));
        window['$list'] = $scope;
        window['$listController'] = $scope;
        $scope['$listController'] = window['$listController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
ListController = __decorate([
    Controller({ name: 'ListController' })
], ListController);
function ListItemFactory(pelement) {
    console.log(pelement.id, 'ListItemFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/ListItem/Index', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onClick = function (hash) {
        let pars = toHttpParams({
            hash: hash
        });
        console.log('onClick', pars);
        return window['https']({ url: '/ListItem/onClick', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/ListItem/ngOnInit', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/ListItem/ngOnDestroy', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/ListItem/ngOnChanges', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/ListItem/View', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/ListItem/GetSettings', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/ListItem/Setup', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/ListItem/InfoDialog', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/ListItem/ShowHelp', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/ListItem/RemoteDialog', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/ListItem/ConfirmDialog', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/ListItem/CreateEntityDialog', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/ListItem/InputDialog', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/ListItem/Eval', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/ListItem/HandleEvalResult', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/ListItem/Callback', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/ListItem/AddEventListener', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/ListItem/DispatchEvent', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/ListItem/OnConnected', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/ListItem/PartialView', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/ListItem/ViewComponent', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/ListItem/Json', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/ListItem/OnActionExecuting', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/ListItem/OnActionExecuted', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/ListItem/OnActionExecutionAsync', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/ListItem/Dispose', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/ListItem/Conflict', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/ListItem/Problem', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/ListItem/ValidationProblem', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/ListItem/Created', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/ListItem/CreatedAtAction', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/ListItem/CreatedAtRoute', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/ListItem/Accepted', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/ListItem/AcceptedAtAction', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/ListItem/AcceptedAtRoute', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/ListItem/Challenge', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/ListItem/Forbid', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/ListItem/SignIn', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/ListItem/SignOut', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/ListItem/TryUpdateModelAsync', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/ListItem/TryValidateModel', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/ListItem/StatusCode', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/ListItem/Content', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/ListItem/NoContent', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/ListItem/Ok', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/ListItem/Redirect', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/ListItem/RedirectPermanent', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/ListItem/RedirectPreserveMethod', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/ListItem/RedirectPermanentPreserveMethod', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/ListItem/LocalRedirect', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/ListItem/LocalRedirectPermanent', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/ListItem/LocalRedirectPreserveMethod', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/ListItem/LocalRedirectPermanentPreserveMethod', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/ListItem/RedirectToAction', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/ListItem/RedirectToActionPreserveMethod', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/ListItem/RedirectToActionPermanent', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/ListItem/RedirectToActionPermanentPreserveMethod', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/ListItem/RedirectToRoute', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/ListItem/RedirectToRoutePreserveMethod', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/ListItem/RedirectToRoutePermanent', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/ListItem/RedirectToRoutePermanentPreserveMethod', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/ListItem/RedirectToPage', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/ListItem/RedirectToPagePermanent', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/ListItem/RedirectToPagePreserveMethod', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/ListItem/RedirectToPagePermanentPreserveMethod', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/ListItem/File', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/ListItem/PhysicalFile', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/ListItem/Unauthorized', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/ListItem/NotFound', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/ListItem/BadRequest', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/ListItem/UnprocessableEntity', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/ListItem/Equals', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/ListItem/GetHashCode', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/ListItem/GetType', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/ListItem/ToString', type: 'ListItemFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let ListItemController = class ListItemController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'ListItemFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new ListItemFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$listItem'] = $scope;
        window['$listItemController'] = $scope;
        $scope['$listItemController'] = window['$listItemController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
ListItemController = __decorate([
    Controller({ name: 'ListItemController' })
], ListItemController);
function FormFieldFactory(pelement) {
    console.log(pelement.id, 'FormFieldFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/FormField/Index', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.copyData = function (fieldid, dataid) {
        let pars = toHttpParams({
            fieldid: fieldid,
            dataid: dataid
        });
        console.log('copyData', pars);
        return window['https']({ url: '/FormField/CopyData', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.image = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('image', pars);
        return window['https']({ url: '/FormField/Image', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/FormField/ngOnInit', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/FormField/ngOnDestroy', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/FormField/ngOnChanges', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/FormField/View', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/FormField/GetSettings', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/FormField/Setup', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/FormField/InfoDialog', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/FormField/ShowHelp', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/FormField/RemoteDialog', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/FormField/ConfirmDialog', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/FormField/CreateEntityDialog', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/FormField/InputDialog', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/FormField/Eval', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/FormField/HandleEvalResult', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/FormField/Callback', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/FormField/AddEventListener', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/FormField/DispatchEvent', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/FormField/OnConnected', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/FormField/PartialView', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/FormField/ViewComponent', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/FormField/Json', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/FormField/OnActionExecuting', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/FormField/OnActionExecuted', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/FormField/OnActionExecutionAsync', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/FormField/Dispose', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/FormField/Conflict', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/FormField/Problem', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/FormField/ValidationProblem', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/FormField/Created', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/FormField/CreatedAtAction', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/FormField/CreatedAtRoute', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/FormField/Accepted', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/FormField/AcceptedAtAction', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/FormField/AcceptedAtRoute', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/FormField/Challenge', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/FormField/Forbid', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/FormField/SignIn', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/FormField/SignOut', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/FormField/TryUpdateModelAsync', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/FormField/TryValidateModel', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/FormField/StatusCode', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/FormField/Content', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/FormField/NoContent', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/FormField/Ok', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/FormField/Redirect', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/FormField/RedirectPermanent', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/FormField/RedirectPreserveMethod', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/FormField/RedirectPermanentPreserveMethod', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/FormField/LocalRedirect', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/FormField/LocalRedirectPermanent', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/FormField/LocalRedirectPreserveMethod', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/FormField/LocalRedirectPermanentPreserveMethod', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/FormField/RedirectToAction', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/FormField/RedirectToActionPreserveMethod', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/FormField/RedirectToActionPermanent', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/FormField/RedirectToActionPermanentPreserveMethod', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/FormField/RedirectToRoute', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/FormField/RedirectToRoutePreserveMethod', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/FormField/RedirectToRoutePermanent', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/FormField/RedirectToRoutePermanentPreserveMethod', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/FormField/RedirectToPage', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/FormField/RedirectToPagePermanent', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/FormField/RedirectToPagePreserveMethod', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/FormField/RedirectToPagePermanentPreserveMethod', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/FormField/File', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/FormField/PhysicalFile', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/FormField/Unauthorized', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/FormField/NotFound', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/FormField/BadRequest', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/FormField/UnprocessableEntity', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/FormField/Equals', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/FormField/GetHashCode', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/FormField/GetType', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/FormField/ToString', type: 'FormFieldFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let FormFieldController = class FormFieldController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'FormFieldFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new FormFieldFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$formField'] = $scope;
        window['$formFieldController'] = $scope;
        $scope['$formFieldController'] = window['$formFieldController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
FormFieldController = __decorate([
    Controller({ name: 'FormFieldController' })
], FormFieldController);
function ButtonFactory(pelement) {
    console.log(pelement.id, 'ButtonFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.onClick = function (hash) {
        let pars = toHttpParams({
            hash: hash
        });
        console.log('onClick', pars);
        return window['https']({ url: '/Button/OnClick', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Button/View', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Button/PartialView', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Button/ViewComponent', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Button/Json', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Button/OnActionExecuting', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Button/OnActionExecuted', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Button/OnActionExecutionAsync', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Button/Dispose', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Button/Conflict', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Button/Problem', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Button/ValidationProblem', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Button/Created', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Button/CreatedAtAction', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Button/CreatedAtRoute', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Button/Accepted', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Button/AcceptedAtAction', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Button/AcceptedAtRoute', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Button/Challenge', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Button/Forbid', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Button/SignIn', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Button/SignOut', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Button/TryUpdateModelAsync', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Button/TryValidateModel', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Button/StatusCode', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Button/Content', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Button/NoContent', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Button/Ok', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Button/Redirect', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Button/RedirectPermanent', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Button/RedirectPreserveMethod', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Button/RedirectPermanentPreserveMethod', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Button/LocalRedirect', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Button/LocalRedirectPermanent', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Button/LocalRedirectPreserveMethod', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Button/LocalRedirectPermanentPreserveMethod', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Button/RedirectToAction', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Button/RedirectToActionPreserveMethod', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Button/RedirectToActionPermanent', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Button/RedirectToActionPermanentPreserveMethod', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Button/RedirectToRoute', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Button/RedirectToRoutePreserveMethod', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Button/RedirectToRoutePermanent', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Button/RedirectToRoutePermanentPreserveMethod', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Button/RedirectToPage', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Button/RedirectToPagePermanent', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Button/RedirectToPagePreserveMethod', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Button/RedirectToPagePermanentPreserveMethod', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Button/File', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Button/PhysicalFile', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Button/Unauthorized', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Button/NotFound', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Button/BadRequest', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Button/UnprocessableEntity', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Button/Equals', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Button/GetHashCode', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Button/GetType', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Button/ToString', type: 'ButtonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let ButtonController = class ButtonController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'ButtonFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new ButtonFactory($element[0]));
        window['$button'] = $scope;
        window['$buttonController'] = $scope;
        $scope['$buttonController'] = window['$buttonController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
ButtonController = __decorate([
    Controller({ name: 'ButtonController' })
], ButtonController);
function PersonFactory(pelement) {
    console.log(pelement.id, 'PersonFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/Person/Index', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.complete = function () {
        let pars = toHttpParams({});
        console.log('complete', pars);
        return window['https']({ url: '/Person/Complete', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.get = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('get', pars);
        return window['https']({ url: '/Person/Get', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.put = function (name, value) {
        let pars = toHttpParams({
            name: name,
            value: value
        });
        console.log('put', pars);
        return window['https']({ url: '/Person/Put', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.post = function (form) {
        let pars = toHttpParams({
            form: form
        });
        console.log('post', pars);
        return window['https']({ url: '/Person/Post', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.initModel = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('initModel', pars);
        return window['https']({ url: '/Person/InitModel', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.newModel = function () {
        let pars = toHttpParams({});
        console.log('newModel', pars);
        return window['https']({ url: '/Person/NewModel', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getKey = function () {
        let pars = toHttpParams({});
        console.log('getKey', pars);
        return window['https']({ url: '/Person/GetKey', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setModel = function (model) {
        let pars = toHttpParams({
            model: model
        });
        console.log('setModel', pars);
        return window['https']({ url: '/Person/SetModel', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getModel = function (controllerType) {
        let pars = toHttpParams({
            controllerType: controllerType
        });
        console.log('getModel', pars);
        return window['https']({ url: '/Person/GetModel', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getAnotherModel = function (key) {
        let pars = toHttpParams({
            key: key
        });
        console.log('getAnotherModel', pars);
        return window['https']({ url: '/Person/GetAnotherModel', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/Person/ngOnInit', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/Person/ngOnDestroy', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/Person/ngOnChanges', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Person/View', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/Person/GetSettings', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/Person/Setup', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/Person/InfoDialog', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/Person/ShowHelp', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/Person/RemoteDialog', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/Person/ConfirmDialog', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/Person/CreateEntityDialog', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/Person/InputDialog', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/Person/Eval', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/Person/HandleEvalResult', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/Person/Callback', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/Person/AddEventListener', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/Person/DispatchEvent', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/Person/OnConnected', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Person/PartialView', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Person/ViewComponent', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Person/Json', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Person/OnActionExecuting', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Person/OnActionExecuted', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Person/OnActionExecutionAsync', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Person/Dispose', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Person/Conflict', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Person/Problem', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Person/ValidationProblem', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Person/Created', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Person/CreatedAtAction', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Person/CreatedAtRoute', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Person/Accepted', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Person/AcceptedAtAction', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Person/AcceptedAtRoute', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Person/Challenge', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Person/Forbid', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Person/SignIn', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Person/SignOut', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Person/TryUpdateModelAsync', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Person/TryValidateModel', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Person/StatusCode', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Person/Content', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Person/NoContent', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Person/Ok', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Person/Redirect', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Person/RedirectPermanent', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Person/RedirectPreserveMethod', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Person/RedirectPermanentPreserveMethod', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Person/LocalRedirect', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Person/LocalRedirectPermanent', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Person/LocalRedirectPreserveMethod', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Person/LocalRedirectPermanentPreserveMethod', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Person/RedirectToAction', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Person/RedirectToActionPreserveMethod', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Person/RedirectToActionPermanent', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Person/RedirectToActionPermanentPreserveMethod', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Person/RedirectToRoute', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Person/RedirectToRoutePreserveMethod', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Person/RedirectToRoutePermanent', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Person/RedirectToRoutePermanentPreserveMethod', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Person/RedirectToPage', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Person/RedirectToPagePermanent', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Person/RedirectToPagePreserveMethod', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Person/RedirectToPagePermanentPreserveMethod', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Person/File', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Person/PhysicalFile', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Person/Unauthorized', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Person/NotFound', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Person/BadRequest', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Person/UnprocessableEntity', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Person/Equals', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Person/GetHashCode', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Person/GetType', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Person/ToString', type: 'PersonFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let PersonController = class PersonController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'PersonFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new PersonFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$person'] = $scope;
        window['$personController'] = $scope;
        $scope['$personController'] = window['$personController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
PersonController = __decorate([
    Controller({ name: 'PersonController' })
], PersonController);
function DatabaseEditorFactory(pelement) {
    console.log(pelement.id, 'DatabaseEditorFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.get = function (entity, operation, args) {
        let pars = toHttpParams({
            entity: entity,
            operation: operation,
            args: args
        });
        console.log('get', pars);
        return window['https']({ url: '/DatabaseEditor/Get', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/DatabaseEditor/ngOnInit', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/DatabaseEditor/ngOnDestroy', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/DatabaseEditor/ngOnChanges', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DatabaseEditor/View', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/DatabaseEditor/GetSettings', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/DatabaseEditor/Setup', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/DatabaseEditor/InfoDialog', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/DatabaseEditor/ShowHelp', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/DatabaseEditor/RemoteDialog', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/DatabaseEditor/ConfirmDialog', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/DatabaseEditor/CreateEntityDialog', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/DatabaseEditor/InputDialog', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/DatabaseEditor/Eval', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/DatabaseEditor/HandleEvalResult', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/DatabaseEditor/Callback', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/DatabaseEditor/AddEventListener', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/DatabaseEditor/DispatchEvent', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/DatabaseEditor/OnConnected', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DatabaseEditor/PartialView', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DatabaseEditor/ViewComponent', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DatabaseEditor/Json', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DatabaseEditor/OnActionExecuting', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DatabaseEditor/OnActionExecuted', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DatabaseEditor/OnActionExecutionAsync', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DatabaseEditor/Dispose', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DatabaseEditor/Conflict', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DatabaseEditor/Problem', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DatabaseEditor/ValidationProblem', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DatabaseEditor/Created', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DatabaseEditor/CreatedAtAction', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DatabaseEditor/CreatedAtRoute', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DatabaseEditor/Accepted', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DatabaseEditor/AcceptedAtAction', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DatabaseEditor/AcceptedAtRoute', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DatabaseEditor/Challenge', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DatabaseEditor/Forbid', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DatabaseEditor/SignIn', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DatabaseEditor/SignOut', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DatabaseEditor/TryUpdateModelAsync', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DatabaseEditor/TryValidateModel', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DatabaseEditor/StatusCode', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DatabaseEditor/Content', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DatabaseEditor/NoContent', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DatabaseEditor/Ok', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DatabaseEditor/Redirect', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DatabaseEditor/RedirectPermanent', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DatabaseEditor/RedirectPreserveMethod', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DatabaseEditor/RedirectPermanentPreserveMethod', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DatabaseEditor/LocalRedirect', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DatabaseEditor/LocalRedirectPermanent', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DatabaseEditor/LocalRedirectPreserveMethod', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DatabaseEditor/LocalRedirectPermanentPreserveMethod', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DatabaseEditor/RedirectToAction', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DatabaseEditor/RedirectToActionPreserveMethod', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DatabaseEditor/RedirectToActionPermanent', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DatabaseEditor/RedirectToActionPermanentPreserveMethod', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DatabaseEditor/RedirectToRoute', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DatabaseEditor/RedirectToRoutePreserveMethod', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DatabaseEditor/RedirectToRoutePermanent', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DatabaseEditor/RedirectToRoutePermanentPreserveMethod', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DatabaseEditor/RedirectToPage', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DatabaseEditor/RedirectToPagePermanent', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DatabaseEditor/RedirectToPagePreserveMethod', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DatabaseEditor/RedirectToPagePermanentPreserveMethod', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DatabaseEditor/File', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DatabaseEditor/PhysicalFile', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DatabaseEditor/Unauthorized', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DatabaseEditor/NotFound', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DatabaseEditor/BadRequest', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DatabaseEditor/UnprocessableEntity', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DatabaseEditor/Equals', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DatabaseEditor/GetHashCode', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DatabaseEditor/GetType', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DatabaseEditor/ToString', type: 'DatabaseEditorFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let DatabaseEditorController = class DatabaseEditorController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'DatabaseEditorFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new DatabaseEditorFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$databaseEditor'] = $scope;
        window['$databaseEditorController'] = $scope;
        $scope['$databaseEditorController'] = window['$databaseEditorController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
DatabaseEditorController = __decorate([
    Controller({ name: 'DatabaseEditorController' })
], DatabaseEditorController);
function PersonSearchFactory(pelement) {
    console.log(pelement.id, 'PersonSearchFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.getKeywords = function (query) {
        let pars = toHttpParams({
            query: query
        });
        console.log('getKeywords', pars);
        return window['https']({ url: '/PersonSearch/GetKeywords', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getIndexes = function () {
        let pars = toHttpParams({});
        console.log('getIndexes', pars);
        return window['https']({ url: '/PersonSearch/GetIndexes', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.search = function (query) {
        let pars = toHttpParams({
            query: query
        });
        console.log('search', pars);
        return window['https']({ url: '/PersonSearch/Search', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/PersonSearch/View', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/PersonSearch/PartialView', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/PersonSearch/ViewComponent', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/PersonSearch/Json', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/PersonSearch/OnActionExecuting', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/PersonSearch/OnActionExecuted', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/PersonSearch/OnActionExecutionAsync', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/PersonSearch/Dispose', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/PersonSearch/Conflict', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/PersonSearch/Problem', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/PersonSearch/ValidationProblem', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/PersonSearch/Created', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/PersonSearch/CreatedAtAction', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/PersonSearch/CreatedAtRoute', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/PersonSearch/Accepted', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/PersonSearch/AcceptedAtAction', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/PersonSearch/AcceptedAtRoute', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/PersonSearch/Challenge', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/PersonSearch/Forbid', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/PersonSearch/SignIn', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/PersonSearch/SignOut', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/PersonSearch/TryUpdateModelAsync', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/PersonSearch/TryValidateModel', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/PersonSearch/StatusCode', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/PersonSearch/Content', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/PersonSearch/NoContent', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/PersonSearch/Ok', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/PersonSearch/Redirect', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/PersonSearch/RedirectPermanent', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/PersonSearch/RedirectPreserveMethod', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/PersonSearch/RedirectPermanentPreserveMethod', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/PersonSearch/LocalRedirect', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/PersonSearch/LocalRedirectPermanent', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/PersonSearch/LocalRedirectPreserveMethod', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/PersonSearch/LocalRedirectPermanentPreserveMethod', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/PersonSearch/RedirectToAction', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/PersonSearch/RedirectToActionPreserveMethod', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/PersonSearch/RedirectToActionPermanent', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/PersonSearch/RedirectToActionPermanentPreserveMethod', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/PersonSearch/RedirectToRoute', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/PersonSearch/RedirectToRoutePreserveMethod', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/PersonSearch/RedirectToRoutePermanent', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/PersonSearch/RedirectToRoutePermanentPreserveMethod', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/PersonSearch/RedirectToPage', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/PersonSearch/RedirectToPagePermanent', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/PersonSearch/RedirectToPagePreserveMethod', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/PersonSearch/RedirectToPagePermanentPreserveMethod', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/PersonSearch/File', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/PersonSearch/PhysicalFile', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/PersonSearch/Unauthorized', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/PersonSearch/NotFound', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/PersonSearch/BadRequest', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/PersonSearch/UnprocessableEntity', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/PersonSearch/Equals', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/PersonSearch/GetHashCode', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/PersonSearch/GetType', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/PersonSearch/ToString', type: 'PersonSearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let PersonSearchController = class PersonSearchController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'PersonSearchFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new PersonSearchFactory($element[0]));
        window['$personSearch'] = $scope;
        window['$personSearchController'] = $scope;
        $scope['$personSearchController'] = window['$personSearchController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
PersonSearchController = __decorate([
    Controller({ name: 'PersonSearchController' })
], PersonSearchController);
function DatabaseFactory(pelement) {
    console.log(pelement.id, 'DatabaseFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/Database/Index', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.isPrimitive = function (subject) {
        let pars = toHttpParams({
            subject: subject
        });
        console.log('isPrimitive', pars);
        return window['https']({ url: '/Database/IsPrimitive', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.get = function (entity, operation, args) {
        let pars = toHttpParams({
            entity: entity,
            operation: operation,
            args: args
        });
        console.log('get', pars);
        return window['https']({ url: '/Database/Get', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Database/View', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Database/PartialView', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Database/ViewComponent', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Database/Json', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Database/OnActionExecuting', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Database/OnActionExecuted', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Database/OnActionExecutionAsync', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Database/Dispose', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Database/Conflict', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Database/Problem', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Database/ValidationProblem', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Database/Created', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Database/CreatedAtAction', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Database/CreatedAtRoute', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Database/Accepted', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Database/AcceptedAtAction', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Database/AcceptedAtRoute', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Database/Challenge', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Database/Forbid', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Database/SignIn', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Database/SignOut', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Database/TryUpdateModelAsync', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Database/TryValidateModel', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Database/StatusCode', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Database/Content', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Database/NoContent', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Database/Ok', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Database/Redirect', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Database/RedirectPermanent', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Database/RedirectPreserveMethod', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Database/RedirectPermanentPreserveMethod', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Database/LocalRedirect', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Database/LocalRedirectPermanent', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Database/LocalRedirectPreserveMethod', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Database/LocalRedirectPermanentPreserveMethod', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Database/RedirectToAction', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Database/RedirectToActionPreserveMethod', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Database/RedirectToActionPermanent', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Database/RedirectToActionPermanentPreserveMethod', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Database/RedirectToRoute', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Database/RedirectToRoutePreserveMethod', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Database/RedirectToRoutePermanent', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Database/RedirectToRoutePermanentPreserveMethod', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Database/RedirectToPage', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Database/RedirectToPagePermanent', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Database/RedirectToPagePreserveMethod', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Database/RedirectToPagePermanentPreserveMethod', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Database/File', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Database/PhysicalFile', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Database/Unauthorized', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Database/NotFound', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Database/BadRequest', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Database/UnprocessableEntity', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Database/Equals', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Database/GetHashCode', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Database/GetType', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Database/ToString', type: 'DatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let DatabaseController = class DatabaseController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'DatabaseFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new DatabaseFactory($element[0]));
        window['$database'] = $scope;
        window['$databaseController'] = $scope;
        $scope['$databaseController'] = window['$databaseController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
DatabaseController = __decorate([
    Controller({ name: 'DatabaseController' })
], DatabaseController);
function OdbcFactory(pelement) {
    console.log(pelement.id, 'OdbcFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/Odbc/Index', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.isPrimitive = function (subject) {
        let pars = toHttpParams({
            subject: subject
        });
        console.log('isPrimitive', pars);
        return window['https']({ url: '/Odbc/IsPrimitive', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.get = function (entity, datasourceId, operation, args) {
        let pars = toHttpParams({
            entity: entity,
            datasourceId: datasourceId,
            operation: operation,
            args: args
        });
        console.log('get', pars);
        return window['https']({ url: '/Odbc/Get', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Odbc/View', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Odbc/PartialView', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Odbc/ViewComponent', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Odbc/Json', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Odbc/OnActionExecuting', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Odbc/OnActionExecuted', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Odbc/OnActionExecutionAsync', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Odbc/Dispose', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Odbc/Conflict', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Odbc/Problem', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Odbc/ValidationProblem', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Odbc/Created', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Odbc/CreatedAtAction', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Odbc/CreatedAtRoute', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Odbc/Accepted', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Odbc/AcceptedAtAction', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Odbc/AcceptedAtRoute', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Odbc/Challenge', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Odbc/Forbid', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Odbc/SignIn', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Odbc/SignOut', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Odbc/TryUpdateModelAsync', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Odbc/TryValidateModel', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Odbc/StatusCode', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Odbc/Content', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Odbc/NoContent', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Odbc/Ok', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Odbc/Redirect', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Odbc/RedirectPermanent', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Odbc/RedirectPreserveMethod', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Odbc/RedirectPermanentPreserveMethod', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Odbc/LocalRedirect', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Odbc/LocalRedirectPermanent', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Odbc/LocalRedirectPreserveMethod', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Odbc/LocalRedirectPermanentPreserveMethod', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Odbc/RedirectToAction', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Odbc/RedirectToActionPreserveMethod', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Odbc/RedirectToActionPermanent', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Odbc/RedirectToActionPermanentPreserveMethod', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Odbc/RedirectToRoute', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Odbc/RedirectToRoutePreserveMethod', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Odbc/RedirectToRoutePermanent', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Odbc/RedirectToRoutePermanentPreserveMethod', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Odbc/RedirectToPage', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Odbc/RedirectToPagePermanent', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Odbc/RedirectToPagePreserveMethod', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Odbc/RedirectToPagePermanentPreserveMethod', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Odbc/File', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Odbc/PhysicalFile', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Odbc/Unauthorized', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Odbc/NotFound', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Odbc/BadRequest', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Odbc/UnprocessableEntity', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Odbc/Equals', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Odbc/GetHashCode', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Odbc/GetType', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Odbc/ToString', type: 'OdbcFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let OdbcController = class OdbcController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'OdbcFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new OdbcFactory($element[0]));
        window['$odbc'] = $scope;
        window['$odbcController'] = $scope;
        $scope['$odbcController'] = window['$odbcController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
OdbcController = __decorate([
    Controller({ name: 'OdbcController' })
], OdbcController);
function DevFactory(pelement) {
    console.log(pelement.id, 'DevFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.devDatabase = function () {
        let pars = toHttpParams({});
        console.log('devDatabase', pars);
        return window['https']({ url: '/DevFace/Dev/DevDatabase', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dataConstructor = function () {
        let pars = toHttpParams({});
        console.log('dataConstructor', pars);
        return window['https']({ url: '/DevFace/Dev/DataConstructor', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.devHome = function () {
        let pars = toHttpParams({});
        console.log('devHome', pars);
        return window['https']({ url: '/DevFace/Dev/DevHome', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createReport = function (report) {
        let pars = toHttpParams({
            report: report
        });
        console.log('createReport', pars);
        return window['https']({ url: '/DevFace/Dev/CreateReport', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.updateReport = function (report) {
        let pars = toHttpParams({
            report: report
        });
        console.log('updateReport', pars);
        return window['https']({ url: '/DevFace/Dev/UpdateReport', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.deleteReport = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('deleteReport', pars);
        return window['https']({ url: '/DevFace/Dev/DeleteReport', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.findReport = function (id) {
        let pars = toHttpParams({
            id: id
        });
        console.log('findReport', pars);
        return window['https']({ url: '/DevFace/Dev/FindReport', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.testConnectinString = function (str) {
        let pars = toHttpParams({
            str: str
        });
        console.log('testConnectinString', pars);
        return window['https']({ url: '/DevFace/Dev/testConnectinString', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createNavigation = function () {
        let pars = toHttpParams({});
        console.log('createNavigation', pars);
        return window['https']({ url: '/DevFace/Dev/CreateNavigation', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/DevFace/Dev/View', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/DevFace/Dev/PartialView', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/DevFace/Dev/ViewComponent', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/DevFace/Dev/Json', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/DevFace/Dev/OnActionExecuting', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/DevFace/Dev/OnActionExecuted', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/DevFace/Dev/OnActionExecutionAsync', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/DevFace/Dev/Dispose', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/DevFace/Dev/Conflict', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/DevFace/Dev/Problem', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/DevFace/Dev/ValidationProblem', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/DevFace/Dev/Created', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/DevFace/Dev/CreatedAtAction', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/DevFace/Dev/CreatedAtRoute', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/DevFace/Dev/Accepted', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/DevFace/Dev/AcceptedAtAction', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/DevFace/Dev/AcceptedAtRoute', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/DevFace/Dev/Challenge', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/DevFace/Dev/Forbid', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/DevFace/Dev/SignIn', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/DevFace/Dev/SignOut', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/DevFace/Dev/TryUpdateModelAsync', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/DevFace/Dev/TryValidateModel', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/DevFace/Dev/StatusCode', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/DevFace/Dev/Content', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/DevFace/Dev/NoContent', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/DevFace/Dev/Ok', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/DevFace/Dev/Redirect', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/DevFace/Dev/RedirectPermanent', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Dev/RedirectPreserveMethod', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Dev/RedirectPermanentPreserveMethod', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/DevFace/Dev/LocalRedirect', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/DevFace/Dev/LocalRedirectPermanent', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Dev/LocalRedirectPreserveMethod', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Dev/LocalRedirectPermanentPreserveMethod', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/DevFace/Dev/RedirectToAction', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Dev/RedirectToActionPreserveMethod', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/DevFace/Dev/RedirectToActionPermanent', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Dev/RedirectToActionPermanentPreserveMethod', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/DevFace/Dev/RedirectToRoute', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/DevFace/Dev/RedirectToRoutePreserveMethod', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/DevFace/Dev/RedirectToRoutePermanent', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Dev/RedirectToRoutePermanentPreserveMethod', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/DevFace/Dev/RedirectToPage', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/DevFace/Dev/RedirectToPagePermanent', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/DevFace/Dev/RedirectToPagePreserveMethod', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/DevFace/Dev/RedirectToPagePermanentPreserveMethod', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/DevFace/Dev/File', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/DevFace/Dev/PhysicalFile', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/DevFace/Dev/Unauthorized', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/DevFace/Dev/NotFound', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/DevFace/Dev/BadRequest', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/DevFace/Dev/UnprocessableEntity', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/DevFace/Dev/Equals', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/DevFace/Dev/GetHashCode', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/DevFace/Dev/GetType', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/DevFace/Dev/ToString', type: 'DevFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let DevController = class DevController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'DevFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new DevFactory($element[0]));
        window['$dev'] = $scope;
        window['$devController'] = $scope;
        $scope['$devController'] = window['$devController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
DevController = __decorate([
    Controller({ name: 'DevController' })
], DevController);
function SearchDatabaseFactory(pelement) {
    console.log(pelement.id, 'SearchDatabaseFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/SearchDatabase/View', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/SearchDatabase/PartialView', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/SearchDatabase/ViewComponent', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/SearchDatabase/Json', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/SearchDatabase/OnActionExecuting', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/SearchDatabase/OnActionExecuted', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/SearchDatabase/OnActionExecutionAsync', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/SearchDatabase/Dispose', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/SearchDatabase/Conflict', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/SearchDatabase/Problem', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/SearchDatabase/ValidationProblem', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/SearchDatabase/Created', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/SearchDatabase/CreatedAtAction', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/SearchDatabase/CreatedAtRoute', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/SearchDatabase/Accepted', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/SearchDatabase/AcceptedAtAction', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/SearchDatabase/AcceptedAtRoute', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/SearchDatabase/Challenge', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/SearchDatabase/Forbid', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/SearchDatabase/SignIn', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/SearchDatabase/SignOut', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/SearchDatabase/TryUpdateModelAsync', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/SearchDatabase/TryValidateModel', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/SearchDatabase/StatusCode', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/SearchDatabase/Content', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/SearchDatabase/NoContent', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/SearchDatabase/Ok', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/SearchDatabase/Redirect', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/SearchDatabase/RedirectPermanent', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/SearchDatabase/RedirectPreserveMethod', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/SearchDatabase/RedirectPermanentPreserveMethod', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/SearchDatabase/LocalRedirect', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/SearchDatabase/LocalRedirectPermanent', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/SearchDatabase/LocalRedirectPreserveMethod', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/SearchDatabase/LocalRedirectPermanentPreserveMethod', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/SearchDatabase/RedirectToAction', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/SearchDatabase/RedirectToActionPreserveMethod', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/SearchDatabase/RedirectToActionPermanent', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/SearchDatabase/RedirectToActionPermanentPreserveMethod', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/SearchDatabase/RedirectToRoute', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/SearchDatabase/RedirectToRoutePreserveMethod', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/SearchDatabase/RedirectToRoutePermanent', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/SearchDatabase/RedirectToRoutePermanentPreserveMethod', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/SearchDatabase/RedirectToPage', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/SearchDatabase/RedirectToPagePermanent', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/SearchDatabase/RedirectToPagePreserveMethod', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/SearchDatabase/RedirectToPagePermanentPreserveMethod', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/SearchDatabase/File', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/SearchDatabase/PhysicalFile', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/SearchDatabase/Unauthorized', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/SearchDatabase/NotFound', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/SearchDatabase/BadRequest', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/SearchDatabase/UnprocessableEntity', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/SearchDatabase/Equals', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/SearchDatabase/GetHashCode', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/SearchDatabase/GetType', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/SearchDatabase/ToString', type: 'SearchDatabaseFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let SearchDatabaseController = class SearchDatabaseController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'SearchDatabaseFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new SearchDatabaseFactory($element[0]));
        window['$searchDatabase'] = $scope;
        window['$searchDatabaseController'] = $scope;
        $scope['$searchDatabaseController'] = window['$searchDatabaseController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
SearchDatabaseController = __decorate([
    Controller({ name: 'SearchDatabaseController' })
], SearchDatabaseController);
function SearchFactory(pelement) {
    console.log(pelement.id, 'SearchFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Search/View', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Search/PartialView', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Search/ViewComponent', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Search/Json', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Search/OnActionExecuting', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Search/OnActionExecuted', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Search/OnActionExecutionAsync', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Search/Dispose', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Search/Conflict', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Search/Problem', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Search/ValidationProblem', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Search/Created', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Search/CreatedAtAction', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Search/CreatedAtRoute', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Search/Accepted', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Search/AcceptedAtAction', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Search/AcceptedAtRoute', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Search/Challenge', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Search/Forbid', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Search/SignIn', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Search/SignOut', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Search/TryUpdateModelAsync', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Search/TryValidateModel', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Search/StatusCode', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Search/Content', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Search/NoContent', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Search/Ok', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Search/Redirect', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Search/RedirectPermanent', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Search/RedirectPreserveMethod', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Search/RedirectPermanentPreserveMethod', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Search/LocalRedirect', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Search/LocalRedirectPermanent', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Search/LocalRedirectPreserveMethod', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Search/LocalRedirectPermanentPreserveMethod', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Search/RedirectToAction', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Search/RedirectToActionPreserveMethod', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Search/RedirectToActionPermanent', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Search/RedirectToActionPermanentPreserveMethod', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Search/RedirectToRoute', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Search/RedirectToRoutePreserveMethod', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Search/RedirectToRoutePermanent', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Search/RedirectToRoutePermanentPreserveMethod', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Search/RedirectToPage', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Search/RedirectToPagePermanent', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Search/RedirectToPagePreserveMethod', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Search/RedirectToPagePermanentPreserveMethod', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Search/File', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Search/PhysicalFile', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Search/Unauthorized', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Search/NotFound', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Search/BadRequest', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Search/UnprocessableEntity', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Search/Equals', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Search/GetHashCode', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Search/GetType', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Search/ToString', type: 'SearchFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let SearchController = class SearchController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'SearchFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new SearchFactory($element[0]));
        window['$search'] = $scope;
        window['$searchController'] = $scope;
        $scope['$searchController'] = window['$searchController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
SearchController = __decorate([
    Controller({ name: 'SearchController' })
], SearchController);
function SearchByCtrlFactory(pelement) {
    console.log(pelement.id, 'SearchByCtrlFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/SearchByCtrl/Index', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/SearchByCtrl/View', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/SearchByCtrl/PartialView', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/SearchByCtrl/ViewComponent', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/SearchByCtrl/Json', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/SearchByCtrl/OnActionExecuting', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/SearchByCtrl/OnActionExecuted', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/SearchByCtrl/OnActionExecutionAsync', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/SearchByCtrl/Dispose', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/SearchByCtrl/Conflict', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/SearchByCtrl/Problem', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/SearchByCtrl/ValidationProblem', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/SearchByCtrl/Created', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/SearchByCtrl/CreatedAtAction', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/SearchByCtrl/CreatedAtRoute', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/SearchByCtrl/Accepted', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/SearchByCtrl/AcceptedAtAction', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/SearchByCtrl/AcceptedAtRoute', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/SearchByCtrl/Challenge', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/SearchByCtrl/Forbid', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/SearchByCtrl/SignIn', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/SearchByCtrl/SignOut', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/SearchByCtrl/TryUpdateModelAsync', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/SearchByCtrl/TryValidateModel', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/SearchByCtrl/StatusCode', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/SearchByCtrl/Content', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/SearchByCtrl/NoContent', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/SearchByCtrl/Ok', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/SearchByCtrl/Redirect', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/SearchByCtrl/RedirectPermanent', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/SearchByCtrl/RedirectPreserveMethod', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/SearchByCtrl/RedirectPermanentPreserveMethod', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/SearchByCtrl/LocalRedirect', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/SearchByCtrl/LocalRedirectPermanent', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/SearchByCtrl/LocalRedirectPreserveMethod', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/SearchByCtrl/LocalRedirectPermanentPreserveMethod', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/SearchByCtrl/RedirectToAction', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/SearchByCtrl/RedirectToActionPreserveMethod', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/SearchByCtrl/RedirectToActionPermanent', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/SearchByCtrl/RedirectToActionPermanentPreserveMethod', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/SearchByCtrl/RedirectToRoute', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/SearchByCtrl/RedirectToRoutePreserveMethod', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/SearchByCtrl/RedirectToRoutePermanent', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/SearchByCtrl/RedirectToRoutePermanentPreserveMethod', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/SearchByCtrl/RedirectToPage', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/SearchByCtrl/RedirectToPagePermanent', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/SearchByCtrl/RedirectToPagePreserveMethod', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/SearchByCtrl/RedirectToPagePermanentPreserveMethod', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/SearchByCtrl/File', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/SearchByCtrl/PhysicalFile', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/SearchByCtrl/Unauthorized', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/SearchByCtrl/NotFound', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/SearchByCtrl/BadRequest', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/SearchByCtrl/UnprocessableEntity', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/SearchByCtrl/Equals', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/SearchByCtrl/GetHashCode', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/SearchByCtrl/GetType', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/SearchByCtrl/ToString', type: 'SearchByCtrlFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let SearchByCtrlController = class SearchByCtrlController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'SearchByCtrlFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new SearchByCtrlFactory($element[0]));
        window['$searchByCtrl'] = $scope;
        window['$searchByCtrlController'] = $scope;
        $scope['$searchByCtrlController'] = window['$searchByCtrlController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
SearchByCtrlController = __decorate([
    Controller({ name: 'SearchByCtrlController' })
], SearchByCtrlController);
function GridFactory(pelement) {
    console.log(pelement.id, 'GridFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Grid/View', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Grid/PartialView', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Grid/ViewComponent', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Grid/Json', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Grid/OnActionExecuting', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Grid/OnActionExecuted', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Grid/OnActionExecutionAsync', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Grid/Dispose', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Grid/Conflict', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Grid/Problem', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Grid/ValidationProblem', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Grid/Created', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Grid/CreatedAtAction', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Grid/CreatedAtRoute', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Grid/Accepted', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Grid/AcceptedAtAction', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Grid/AcceptedAtRoute', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Grid/Challenge', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Grid/Forbid', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Grid/SignIn', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Grid/SignOut', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Grid/TryUpdateModelAsync', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Grid/TryValidateModel', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Grid/StatusCode', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Grid/Content', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Grid/NoContent', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Grid/Ok', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Grid/Redirect', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Grid/RedirectPermanent', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Grid/RedirectPreserveMethod', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Grid/RedirectPermanentPreserveMethod', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Grid/LocalRedirect', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Grid/LocalRedirectPermanent', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Grid/LocalRedirectPreserveMethod', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Grid/LocalRedirectPermanentPreserveMethod', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Grid/RedirectToAction', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Grid/RedirectToActionPreserveMethod', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Grid/RedirectToActionPermanent', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Grid/RedirectToActionPermanentPreserveMethod', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Grid/RedirectToRoute', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Grid/RedirectToRoutePreserveMethod', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Grid/RedirectToRoutePermanent', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Grid/RedirectToRoutePermanentPreserveMethod', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Grid/RedirectToPage', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Grid/RedirectToPagePermanent', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Grid/RedirectToPagePreserveMethod', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Grid/RedirectToPagePermanentPreserveMethod', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Grid/File', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Grid/PhysicalFile', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Grid/Unauthorized', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Grid/NotFound', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Grid/BadRequest', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Grid/UnprocessableEntity', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Grid/Equals', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Grid/GetHashCode', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Grid/GetType', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Grid/ToString', type: 'GridFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let GridController = class GridController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'GridFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new GridFactory($element[0]));
        window['$grid'] = $scope;
        window['$gridController'] = $scope;
        $scope['$gridController'] = window['$gridController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
GridController = __decorate([
    Controller({ name: 'GridController' })
], GridController);
function HomeFactory(pelement) {
    console.log(pelement.id, 'HomeFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.index = function () {
        let pars = toHttpParams({});
        console.log('index', pars);
        return window['https']({ url: '/Home/Index', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.privacy = function () {
        let pars = toHttpParams({});
        console.log('privacy', pars);
        return window['https']({ url: '/Home/Privacy', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.test = function () {
        let pars = toHttpParams({});
        console.log('test', pars);
        return window['https']({ url: '/Home/Test', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/Home/ngOnInit', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/Home/ngOnDestroy', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/Home/ngOnChanges', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Home/View', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/Home/GetSettings', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/Home/Setup', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/Home/InfoDialog', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/Home/ShowHelp', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/Home/RemoteDialog', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/Home/ConfirmDialog', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/Home/CreateEntityDialog', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/Home/InputDialog', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/Home/Eval', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/Home/HandleEvalResult', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/Home/Callback', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/Home/AddEventListener', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/Home/DispatchEvent', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/Home/OnConnected', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Home/PartialView', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Home/ViewComponent', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Home/Json', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Home/OnActionExecuting', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Home/OnActionExecuted', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Home/OnActionExecutionAsync', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Home/Dispose', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Home/Conflict', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Home/Problem', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Home/ValidationProblem', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Home/Created', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Home/CreatedAtAction', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Home/CreatedAtRoute', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Home/Accepted', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Home/AcceptedAtAction', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Home/AcceptedAtRoute', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Home/Challenge', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Home/Forbid', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Home/SignIn', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Home/SignOut', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Home/TryUpdateModelAsync', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Home/TryValidateModel', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Home/StatusCode', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Home/Content', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Home/NoContent', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Home/Ok', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Home/Redirect', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Home/RedirectPermanent', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Home/RedirectPreserveMethod', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Home/RedirectPermanentPreserveMethod', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Home/LocalRedirect', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Home/LocalRedirectPermanent', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Home/LocalRedirectPreserveMethod', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Home/LocalRedirectPermanentPreserveMethod', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Home/RedirectToAction', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Home/RedirectToActionPreserveMethod', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Home/RedirectToActionPermanent', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Home/RedirectToActionPermanentPreserveMethod', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Home/RedirectToRoute', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Home/RedirectToRoutePreserveMethod', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Home/RedirectToRoutePermanent', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Home/RedirectToRoutePermanentPreserveMethod', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Home/RedirectToPage', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Home/RedirectToPagePermanent', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Home/RedirectToPagePreserveMethod', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Home/RedirectToPagePermanentPreserveMethod', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Home/File', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Home/PhysicalFile', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Home/Unauthorized', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Home/NotFound', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Home/BadRequest', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Home/UnprocessableEntity', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Home/Equals', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Home/GetHashCode', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Home/GetType', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Home/ToString', type: 'HomeFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let HomeController = class HomeController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'HomeFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new HomeFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$home'] = $scope;
        window['$homeController'] = $scope;
        $scope['$homeController'] = window['$homeController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
HomeController = __decorate([
    Controller({ name: 'HomeController' })
], HomeController);
function UserFactory(pelement) {
    console.log(pelement.id, 'UserFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.userHome = function () {
        let pars = toHttpParams({});
        console.log('userHome', pars);
        return window['https']({ url: '/UserFace/User/UserHome', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.personalRoom = function () {
        let pars = toHttpParams({});
        console.log('personalRoom', pars);
        return window['https']({ url: '/UserFace/User/PersonalRoom', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/UserFace/User/View', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/UserFace/User/PartialView', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/UserFace/User/ViewComponent', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/UserFace/User/Json', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/UserFace/User/OnActionExecuting', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/UserFace/User/OnActionExecuted', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/UserFace/User/OnActionExecutionAsync', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/UserFace/User/Dispose', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/UserFace/User/Conflict', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/UserFace/User/Problem', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/UserFace/User/ValidationProblem', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/UserFace/User/Created', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/UserFace/User/CreatedAtAction', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/UserFace/User/CreatedAtRoute', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/UserFace/User/Accepted', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/UserFace/User/AcceptedAtAction', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/UserFace/User/AcceptedAtRoute', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/UserFace/User/Challenge', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/UserFace/User/Forbid', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/UserFace/User/SignIn', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/UserFace/User/SignOut', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/UserFace/User/TryUpdateModelAsync', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/UserFace/User/TryValidateModel', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/UserFace/User/StatusCode', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/UserFace/User/Content', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/UserFace/User/NoContent', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/UserFace/User/Ok', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/UserFace/User/Redirect', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/UserFace/User/RedirectPermanent', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/UserFace/User/RedirectPreserveMethod', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/UserFace/User/RedirectPermanentPreserveMethod', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/UserFace/User/LocalRedirect', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/UserFace/User/LocalRedirectPermanent', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/UserFace/User/LocalRedirectPreserveMethod', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/UserFace/User/LocalRedirectPermanentPreserveMethod', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/UserFace/User/RedirectToAction', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/UserFace/User/RedirectToActionPreserveMethod', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/UserFace/User/RedirectToActionPermanent', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/UserFace/User/RedirectToActionPermanentPreserveMethod', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/UserFace/User/RedirectToRoute', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/UserFace/User/RedirectToRoutePreserveMethod', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/UserFace/User/RedirectToRoutePermanent', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/UserFace/User/RedirectToRoutePermanentPreserveMethod', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/UserFace/User/RedirectToPage', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/UserFace/User/RedirectToPagePermanent', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/UserFace/User/RedirectToPagePreserveMethod', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/UserFace/User/RedirectToPagePermanentPreserveMethod', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/UserFace/User/File', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/UserFace/User/PhysicalFile', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/UserFace/User/Unauthorized', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/UserFace/User/NotFound', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/UserFace/User/BadRequest', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/UserFace/User/UnprocessableEntity', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/UserFace/User/Equals', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/UserFace/User/GetHashCode', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/UserFace/User/GetType', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/UserFace/User/ToString', type: 'UserFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let UserController = class UserController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'UserFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new UserFactory($element[0]));
        window['$user'] = $scope;
        window['$userController'] = $scope;
        $scope['$userController'] = window['$userController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
UserController = __decorate([
    Controller({ name: 'UserController' })
], UserController);
function ContainerFactory(pelement) {
    console.log(pelement.id, 'ContainerFactory');
    function toHttpParams(obj) {
        const result = {};
        Object.getOwnPropertyNames(obj).forEach(name => {
            result[name] = window['convertToHttpMessageParam'](obj[name]);
        });
        return result;
    }
    this.ngOnInit = function () {
        let pars = toHttpParams({});
        console.log('ngOnInit', pars);
        return window['https']({ url: '/Container/ngOnInit', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnDestroy = function () {
        let pars = toHttpParams({});
        console.log('ngOnDestroy', pars);
        return window['https']({ url: '/Container/ngOnDestroy', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ngOnChanges = function (changes) {
        let pars = toHttpParams({
            changes: changes
        });
        console.log('ngOnChanges', pars);
        return window['https']({ url: '/Container/ngOnChanges', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.view = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('view', pars);
        return window['https']({ url: '/Container/View', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getSettings = function () {
        let pars = toHttpParams({});
        console.log('getSettings', pars);
        return window['https']({ url: '/Container/GetSettings', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.setup = function () {
        let pars = toHttpParams({});
        console.log('setup', pars);
        return window['https']({ url: '/Container/Setup', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.infoDialog = function (Title, Text, Button) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text,
            Button: Button
        });
        console.log('infoDialog', pars);
        return window['https']({ url: '/Container/InfoDialog', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.showHelp = function (Text) {
        let pars = toHttpParams({
            Text: Text
        });
        console.log('showHelp', pars);
        return window['https']({ url: '/Container/ShowHelp', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.remoteDialog = function (Title, Url) {
        let pars = toHttpParams({
            Title: Title,
            Url: Url
        });
        console.log('remoteDialog', pars);
        return window['https']({ url: '/Container/RemoteDialog', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.confirmDialog = function (Title, Text) {
        let pars = toHttpParams({
            Title: Title,
            Text: Text
        });
        console.log('confirmDialog', pars);
        return window['https']({ url: '/Container/ConfirmDialog', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createEntityDialog = function (Title, Entity) {
        let pars = toHttpParams({
            Title: Title,
            Entity: Entity
        });
        console.log('createEntityDialog', pars);
        return window['https']({ url: '/Container/CreateEntityDialog', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.inputDialog = function (Title, Properties) {
        let pars = toHttpParams({
            Title: Title,
            Properties: Properties
        });
        console.log('inputDialog', pars);
        return window['https']({ url: '/Container/InputDialog', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.eval = function (js) {
        let pars = toHttpParams({
            js: js
        });
        console.log('eval', pars);
        return window['https']({ url: '/Container/Eval', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.handleEvalResult = function (handle, js) {
        let pars = toHttpParams({
            handle: handle,
            js: js
        });
        console.log('handleEvalResult', pars);
        return window['https']({ url: '/Container/HandleEvalResult', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.callback = function (action, args) {
        let pars = toHttpParams({
            action: action,
            args: args
        });
        console.log('callback', pars);
        return window['https']({ url: '/Container/Callback', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.addEventListener = function (id, type, js) {
        let pars = toHttpParams({
            id: id,
            type: type,
            js: js
        });
        console.log('addEventListener', pars);
        return window['https']({ url: '/Container/AddEventListener', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispatchEvent = function (id, type, message) {
        let pars = toHttpParams({
            id: id,
            type: type,
            message: message
        });
        console.log('dispatchEvent', pars);
        return window['https']({ url: '/Container/DispatchEvent', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onConnected = function (token) {
        let pars = toHttpParams({
            token: token
        });
        console.log('onConnected', pars);
        return window['https']({ url: '/Container/OnConnected', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.partialView = function (viewName, model) {
        let pars = toHttpParams({
            viewName: viewName,
            model: model
        });
        console.log('partialView', pars);
        return window['https']({ url: '/Container/PartialView', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.viewComponent = function (componentType, arguments) {
        let pars = toHttpParams({
            componentType: componentType,
            arguments: arguments
        });
        console.log('viewComponent', pars);
        return window['https']({ url: '/Container/ViewComponent', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.json = function (data, serializerSettings) {
        let pars = toHttpParams({
            data: data,
            serializerSettings: serializerSettings
        });
        console.log('json', pars);
        return window['https']({ url: '/Container/Json', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuting = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuting', pars);
        return window['https']({ url: '/Container/OnActionExecuting', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecuted = function (context) {
        let pars = toHttpParams({
            context: context
        });
        console.log('onActionExecuted', pars);
        return window['https']({ url: '/Container/OnActionExecuted', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.onActionExecutionAsync = function (context, next) {
        let pars = toHttpParams({
            context: context,
            next: next
        });
        console.log('onActionExecutionAsync', pars);
        return window['https']({ url: '/Container/OnActionExecutionAsync', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.dispose = function () {
        let pars = toHttpParams({});
        console.log('dispose', pars);
        return window['https']({ url: '/Container/Dispose', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.conflict = function (error) {
        let pars = toHttpParams({
            error: error
        });
        console.log('conflict', pars);
        return window['https']({ url: '/Container/Conflict', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.problem = function (detail, instance, statusCode, title, type) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type
        });
        console.log('problem', pars);
        return window['https']({ url: '/Container/Problem', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.validationProblem = function (detail, instance, statusCode, title, type, modelStateDictionary) {
        let pars = toHttpParams({
            detail: detail,
            instance: instance,
            statusCode: statusCode,
            title: title,
            type: type,
            modelStateDictionary: modelStateDictionary
        });
        console.log('validationProblem', pars);
        return window['https']({ url: '/Container/ValidationProblem', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.created = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('created', pars);
        return window['https']({ url: '/Container/Created', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtAction', pars);
        return window['https']({ url: '/Container/CreatedAtAction', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.createdAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('createdAtRoute', pars);
        return window['https']({ url: '/Container/CreatedAtRoute', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.accepted = function (uri, value) {
        let pars = toHttpParams({
            uri: uri,
            value: value
        });
        console.log('accepted', pars);
        return window['https']({ url: '/Container/Accepted', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtAction = function (actionName, controllerName, routeValues, value) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtAction', pars);
        return window['https']({ url: '/Container/AcceptedAtAction', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.acceptedAtRoute = function (routeName, routeValues, value) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            value: value
        });
        console.log('acceptedAtRoute', pars);
        return window['https']({ url: '/Container/AcceptedAtRoute', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.challenge = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('challenge', pars);
        return window['https']({ url: '/Container/Challenge', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.forbid = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('forbid', pars);
        return window['https']({ url: '/Container/Forbid', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signIn = function (principal, properties, authenticationScheme) {
        let pars = toHttpParams({
            principal: principal,
            properties: properties,
            authenticationScheme: authenticationScheme
        });
        console.log('signIn', pars);
        return window['https']({ url: '/Container/SignIn', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.signOut = function (properties, authenticationSchemes) {
        let pars = toHttpParams({
            properties: properties,
            authenticationSchemes: authenticationSchemes
        });
        console.log('signOut', pars);
        return window['https']({ url: '/Container/SignOut', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryUpdateModelAsync = function (model, modelType, prefix, valueProvider, propertyFilter) {
        let pars = toHttpParams({
            model: model,
            modelType: modelType,
            prefix: prefix,
            valueProvider: valueProvider,
            propertyFilter: propertyFilter
        });
        console.log('tryUpdateModelAsync', pars);
        return window['https']({ url: '/Container/TryUpdateModelAsync', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.tryValidateModel = function (model, prefix) {
        let pars = toHttpParams({
            model: model,
            prefix: prefix
        });
        console.log('tryValidateModel', pars);
        return window['https']({ url: '/Container/TryValidateModel', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.statusCode = function (statusCode, value) {
        let pars = toHttpParams({
            statusCode: statusCode,
            value: value
        });
        console.log('statusCode', pars);
        return window['https']({ url: '/Container/StatusCode', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.content = function (content, contentType) {
        let pars = toHttpParams({
            content: content,
            contentType: contentType
        });
        console.log('content', pars);
        return window['https']({ url: '/Container/Content', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.noContent = function () {
        let pars = toHttpParams({});
        console.log('noContent', pars);
        return window['https']({ url: '/Container/NoContent', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.ok = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('ok', pars);
        return window['https']({ url: '/Container/Ok', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirect = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirect', pars);
        return window['https']({ url: '/Container/Redirect', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanent = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanent', pars);
        return window['https']({ url: '/Container/RedirectPermanent', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPreserveMethod', pars);
        return window['https']({ url: '/Container/RedirectPreserveMethod', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectPermanentPreserveMethod = function (url) {
        let pars = toHttpParams({
            url: url
        });
        console.log('redirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Container/RedirectPermanentPreserveMethod', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirect = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirect', pars);
        return window['https']({ url: '/Container/LocalRedirect', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanent = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanent', pars);
        return window['https']({ url: '/Container/LocalRedirectPermanent', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPreserveMethod', pars);
        return window['https']({ url: '/Container/LocalRedirectPreserveMethod', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.localRedirectPermanentPreserveMethod = function (localUrl) {
        let pars = toHttpParams({
            localUrl: localUrl
        });
        console.log('localRedirectPermanentPreserveMethod', pars);
        return window['https']({ url: '/Container/LocalRedirectPermanentPreserveMethod', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToAction = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToAction', pars);
        return window['https']({ url: '/Container/RedirectToAction', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPreserveMethod', pars);
        return window['https']({ url: '/Container/RedirectToActionPreserveMethod', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanent = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanent', pars);
        return window['https']({ url: '/Container/RedirectToActionPermanent', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToActionPermanentPreserveMethod = function (actionName, controllerName, routeValues, fragment) {
        let pars = toHttpParams({
            actionName: actionName,
            controllerName: controllerName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToActionPermanentPreserveMethod', pars);
        return window['https']({ url: '/Container/RedirectToActionPermanentPreserveMethod', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoute = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoute', pars);
        return window['https']({ url: '/Container/RedirectToRoute', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePreserveMethod', pars);
        return window['https']({ url: '/Container/RedirectToRoutePreserveMethod', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanent = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanent', pars);
        return window['https']({ url: '/Container/RedirectToRoutePermanent', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToRoutePermanentPreserveMethod = function (routeName, routeValues, fragment) {
        let pars = toHttpParams({
            routeName: routeName,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToRoutePermanentPreserveMethod', pars);
        return window['https']({ url: '/Container/RedirectToRoutePermanentPreserveMethod', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPage = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPage', pars);
        return window['https']({ url: '/Container/RedirectToPage', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanent = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanent', pars);
        return window['https']({ url: '/Container/RedirectToPagePermanent', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePreserveMethod', pars);
        return window['https']({ url: '/Container/RedirectToPagePreserveMethod', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.redirectToPagePermanentPreserveMethod = function (pageName, pageHandler, routeValues, fragment) {
        let pars = toHttpParams({
            pageName: pageName,
            pageHandler: pageHandler,
            routeValues: routeValues,
            fragment: fragment
        });
        console.log('redirectToPagePermanentPreserveMethod', pars);
        return window['https']({ url: '/Container/RedirectToPagePermanentPreserveMethod', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.file = function (virtualPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            virtualPath: virtualPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('file', pars);
        return window['https']({ url: '/Container/File', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.physicalFile = function (physicalPath, contentType, fileDownloadName, lastModified, entityTag, enableRangeProcessing) {
        let pars = toHttpParams({
            physicalPath: physicalPath,
            contentType: contentType,
            fileDownloadName: fileDownloadName,
            lastModified: lastModified,
            entityTag: entityTag,
            enableRangeProcessing: enableRangeProcessing
        });
        console.log('physicalFile', pars);
        return window['https']({ url: '/Container/PhysicalFile', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unauthorized = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('unauthorized', pars);
        return window['https']({ url: '/Container/Unauthorized', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.notFound = function (value) {
        let pars = toHttpParams({
            value: value
        });
        console.log('notFound', pars);
        return window['https']({ url: '/Container/NotFound', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.badRequest = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('badRequest', pars);
        return window['https']({ url: '/Container/BadRequest', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.unprocessableEntity = function (modelState) {
        let pars = toHttpParams({
            modelState: modelState
        });
        console.log('unprocessableEntity', pars);
        return window['https']({ url: '/Container/UnprocessableEntity', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.equals = function (obj) {
        let pars = toHttpParams({
            obj: obj
        });
        console.log('equals', pars);
        return window['https']({ url: '/Container/Equals', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getHashCode = function () {
        let pars = toHttpParams({});
        console.log('getHashCode', pars);
        return window['https']({ url: '/Container/GetHashCode', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.getType = function () {
        let pars = toHttpParams({});
        console.log('getType', pars);
        return window['https']({ url: '/Container/GetType', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
    this.toString = function () {
        let pars = toHttpParams({});
        console.log('toString', pars);
        return window['https']({ url: '/Container/ToString', type: 'ContainerFactory', params: pars, headers: { 'Content-Type': 'text/json', Scope: angular.element(pelement).scope().$id, Model: pelement ? pelement.id.replace('view-', '') : '' }, method: 'GET', }).then((r) => { window['checkout'](); return r; });
    };
}
let ContainerController = class ContainerController {
    constructor($scope, $element, $attrs) {
        $scope.$element = $element;
        this.ctrlName = 'ContainerFactory';
        $element[0].ctrl = $scope;
        const ctrl = this;
        window['app'].scopes[$scope.$id] = this;
        $scope.$watch('model', function (e) { console.log(e); });
        Object.assign($scope, new ContainerFactory($element[0]));
        Object.assign(this, { $onInit() { console.log('init ', $scope); $scope.ngOnInit().then((resp) => { Object.assign($scope, resp); }, console.error); }, $onDestroy() { $scope.ngOnDesctroy(); }, $onChanges(changes) { $scope.ngOnChanges(changes).then(console.log, console.error); } });
        window['$container'] = $scope;
        window['$containerController'] = $scope;
        $scope['$containerController'] = window['$containerController'] = $scope;
        function toHttpParams(obj) {
            const result = {};
            Object.getOwnPropertyNames(obj).forEach(name => {
                result[name] = window['convertToHttpMessageParam'](obj[name]);
            });
            return result;
        }
        this.$scope = $scope;
        Object.assign(this.$scope, {});
        Object.assign($element[0], $scope);
    }
};
ContainerController = __decorate([
    Controller({ name: 'ContainerController' })
], ContainerController);
