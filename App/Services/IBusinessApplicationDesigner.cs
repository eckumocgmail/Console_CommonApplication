using Microsoft.Extensions.DependencyInjection;

using System;

public interface IBusinessApplicationDesigner : IServiceProvider, IDisposable, IServiceScopeFactory
{

    /// <summary>
    /// Регистрация сервиса уровня приложения.
    /// Это значит что при использовании системы внедрения зависимостей
    /// всегда будет предоставлен один и тот же объект.
    /// </summary>
    /// <typeparam name="T">Тип сервиса</typeparam>
    /// <returns>
    ///     -true, если регистрация выполнена
    ///     -false, если регистрация не выполенена по причине уже 
    /// существующих данных об этом сервисе
    /// </returns>
    public bool AddSingleton<T>();

    /// <summary>
    /// Регистрация коллекции сервисов уровня приложения.
    /// Это значит что при использовании системы внедрения зависимостей
    /// всегда будет предоставлен один и тот же объект.
    /// </summary>
    /// <typeparam name="T">Тип сервиса</typeparam>
    /// <returns>
    ///     -true, если регистрация выполнена
    ///     -false, если регистрация не выполенена по причине уже 
    /// существующих данных об этом сервисе
    /// </returns>
    public bool AddSingletonCollection<T>();

    /// <summary>
    /// Регистрация сервиса уровня сеанса.
    /// Это значит что при использовании системы внедрения зависимостей
    /// всегда будет предоставлен один и тот же объект в рамках одного сеанса.
    /// Важно отметить что такие сервисы могут быть использованы только 
    /// на этапе обработки Http запроса.
    /// </summary>
    /// <typeparam name="T">Тип сервиса</typeparam>
    /// <returns>
    ///     -true, если регистрация выполнена
    ///     -false, если регистрация не выполенена по причине уже 
    /// существующих данных об этом сервисе
    /// </returns>
    public bool AddSession<T>();

    /// <summary>
    /// Регистрация коллекции сервисов уровня сеанса.
    /// Это значит что при использовании системы внедрения зависимостей
    /// всегда будет предоставлен один и тот же объект в рамках одного сеанса.
    /// Важно отметить что такие сервисы могут быть использованы только 
    /// на этапе обработки Http запроса.
    /// </summary>
    /// <typeparam name="T">Тип сервиса</typeparam>
    /// <returns>
    ///     -true, если регистрация выполнена
    ///     -false, если регистрация не выполенена по причине уже 
    /// существующих данных об этом сервисе
    /// </returns>
    public bool AddSessionCollection<T>();

    /// <summary>
    /// Регистрация изолированного сервиса.    
    /// Это значит что при использовании системы внедрения зависимостей
    /// всегда будет предоставлен новый экземпляр данного типа.
    /// </summary>
    /// <typeparam name="T">Тип сервиса</typeparam>
    /// <returns>
    ///     -true, если регистрация выполнена
    ///     -false, если регистрация не выполенена по причине уже 
    /// существующих данных об этом сервисе
    /// </returns>
    public bool AddTransient<T>();

    /// <summary>
    /// Регистрация сервиса времени жизни запроса.    
    /// Это значит что при использовании системы внедрения зависимостей
    /// всегда будет предоставлен один и тотже экземпляр данного типа пока запрос не был окончательно 
    /// обработан.
    /// </summary>
    /// <typeparam name="T">Тип сервиса</typeparam>
    /// <returns>
    ///     -true, если регистрация выполнена
    ///     -false, если регистрация не выполенена по причине уже 
    /// существующих данных об этом сервисе
    /// </returns>
    public bool AddScoped<T>();

    /// <summary>
    /// Регистрация коллекции сервисов времени жизни запроса.    
    /// Это значит что при использовании системы внедрения зависимостей
    /// всегда будет предоставлен один и тотже экземпляр данного типа пока запрос не был окончательно 
    /// обработан.
    /// </summary>
    /// <typeparam name="T">Тип сервиса</typeparam>
    /// <returns>
    ///     -true, если регистрация выполнена
    ///     -false, если регистрация не выполенена по причине уже 
    /// существующих данных об этом сервисе
    /// </returns>
    public bool AddScopedCollection<T>();

    /// <summary>
    /// Регистрация функции генератора.
    /// На предварительном этапе приложение выполняет динамическое формирование
    /// служебный типов исп. такие генераторы.    
    /// </summary>
    public bool AddGenerationMethod<TInput, TOutput>(); 

    /// <summary>
    /// Регистрирует тип объекта с отслеживаемой активностью.
    /// Примером такого типа объектов является сущность "Пользователь".
    /// Эти объекты получают управление из службы управления доступом.
    /// Проходят идентификацию, получают токен, далее токен проверяется для
    /// получения данных из экземпляров типа и исполнения методов данного типа.
    /// </summary>    
    public bool AddActiveObjects<T>() where T: ActiveObject;

    /// <summary>
    /// Регистрация сервиса управления иерархическим справочником и иерархическим представлением
    /// с журналом учета статистики по группам (измерениям) полученным динамически на основе анализа 
    /// зависимостей
    /// </summary>  
    public bool AddHierDictionary<T>();

    /// <summary>
    /// Регистрация бизнес операции исполняемой автивным объектом приложения.
    /// </summary>   
    public bool AddActivity<TActiveObject, TBusinessLogic, TInput, TOutput>(string name)
        where TActiveObject : ActiveObject
        where TInput : class
        where TOutput : class
        where TBusinessLogic : BusinessLogic;



    /// <summary>
    /// Вывод тестовой информации относительно текущего состояния системы.
    /// </summary>
    /// <returns></returns>
    public string ToDocument();
}

